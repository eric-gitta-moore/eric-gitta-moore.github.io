<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows 重新映射 CapsLock 大写锁定到 Ctrl</title>
      <link href="/2023/09/02/Windows%20%E9%87%8D%E6%96%B0%E6%98%A0%E5%B0%84%20CapsLock%20%E5%A4%A7%E5%86%99%E9%94%81%E5%AE%9A%E5%88%B0%20Ctrl/"/>
      <url>/2023/09/02/Windows%20%E9%87%8D%E6%96%B0%E6%98%A0%E5%B0%84%20CapsLock%20%E5%A4%A7%E5%86%99%E9%94%81%E5%AE%9A%E5%88%B0%20Ctrl/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-重新映射-CapsLock-大写锁定到-Ctrl"><a href="#Windows-重新映射-CapsLock-大写锁定到-Ctrl" class="headerlink" title="Windows 重新映射 CapsLock 大写锁定到 Ctrl"></a>Windows 重新映射 CapsLock 大写锁定到 Ctrl</h1><p>本要点中的这些方法适用于我的美国键盘布局。我不确定其他布局。如果出现问题，请恢复您的更改；删除您创建的注册表项（并重新启动）。</p><p>强烈推荐 方法5 <code>ctrl2cap</code>，因为不会影响 <code>FastGestures</code> 的触控板三指滑动</p><h2 id="方法1-通过-regedit-手动修改"><a href="#方法1-通过-regedit-手动修改" class="headerlink" title="方法1.通过 regedit 手动修改"></a>方法1.通过 regedit 手动修改</h2><p>在 <code>regedit</code> 中导航到 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</code> 并在名为 <code>Scancode Map</code> 中创建一个新的二进制值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00 00 00 00 00 02 00 00 00 1d 00 3a 00 00 00 00 00</span><br></pre></td></tr></table></figure><p>保存。重启。完毕。</p><blockquote><p>参考：</p><ul><li><p><a href="https://renenyffenegger.ch/notes/Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout/index">Registry: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout (renenyffenegger.ch)</a></p></li><li><p><a href="https://superuser.com/a/1264295">https://superuser.com/a/1264295</a></p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">; 这一串十六进制数据分为五组，每组四个字节:</span><br><span class="line">;   00,00,00,00,\    header 版本 (固定值 00000000)</span><br><span class="line">;   00,00,00,00,\    header flags (固定值 00000000)</span><br><span class="line">;   04,00,00,00,\    # 该文本描述了一组条目（在此情况下是3个），以及一个空终止符行。</span><br><span class="line">;                    每个条目都由一个2字节的配对组成：要发送的键码和要发送的键盘按键。</span><br><span class="line">;                    每个条目按照“最不重要字节，最重要字节”的顺序排列，例如 0x1234 变为 34,12</span><br><span class="line">;   1d,00,3a,00,\    发送 LEFT CTRL (0x001d) code 当用户按下 CAPS LOCK key (0x003a) </span><br><span class="line">;   38,00,1d,00,\    发送 LEFT ALT (0x0038) code 当用户按下 LEFT CTRL key (0x001d) </span><br><span class="line">;   3a,00,38,00,\    发送 CAPS LOCK (0x003a) code 当用户按下 LEFT ALT key (0x0038) </span><br><span class="line">;   00,00,00,00      NULL 终止符</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;=hex:00,00,00,00,\</span><br><span class="line">                   00,00,00,00,\</span><br><span class="line">                   04,00,00,00,\</span><br><span class="line">                   1d,00,3a,00,\</span><br><span class="line">                   38,00,1d,00,\</span><br><span class="line">                   3a,00,38,00,\</span><br><span class="line">                   00,00,00,00</span><br></pre></td></tr></table></figure><h2 id="方法-2-创建您自己的注册表项文件"><a href="#方法-2-创建您自己的注册表项文件" class="headerlink" title="方法 2. 创建您自己的注册表项文件"></a>方法 2. 创建您自己的注册表项文件</h2><p>创建一个新的 <code>.reg</code> 文件并将其命名为有意义的名称，例如 <code>capstoctrl.reg</code> 。编辑文件并粘贴以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00</span><br></pre></td></tr></table></figure><p>保存。运行该文件。重启。完毕。</p><h2 id="方法-3-通过-PowerShell（以管理员身份）"><a href="#方法-3-通过-PowerShell（以管理员身份）" class="headerlink" title="方法 3. 通过 PowerShell（以管理员身份）"></a>方法 3. 通过 PowerShell（以管理员身份）</h2><p>以管理员身份打开 PowerShell (Win + X)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$hexified = &quot;00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00&quot;.Split(&#x27;,&#x27;) | % &#123; &quot;0x$_&quot;&#125;;</span><br><span class="line"></span><br><span class="line">$kbLayout = &#x27;HKLM:\System\CurrentControlSet\Control\Keyboard Layout&#x27;;</span><br><span class="line"></span><br><span class="line">New-ItemProperty -Path $kbLayout -Name &quot;Scancode Map&quot; -PropertyType Binary -Value ([byte[]]$hexified);</span><br></pre></td></tr></table></figure><p>保存。运行该文件。重启。完毕。</p><h2 id="方法-4-Microsoft-PowerToys"><a href="#方法-4-Microsoft-PowerToys" class="headerlink" title="方法 4. Microsoft PowerToys"></a>方法 4. Microsoft PowerToys</h2><p>尝试一下 PowerToys 不仅可以重新映射大写锁定键，还可以重新映射其他键。 Microsoft PowerToys：自定义 Windows 10 的实用程序。</p><p>Microsoft PowerToys：键盘管理器使您能够重新定义键盘上的按键。</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936313430601693631342489.png" alt="16936313430601693631342489.png"></p><blockquote><p>以上方法都有问题，如果你还使用其他依赖 <code>ctrl</code> 的软件可能就会出问题。</p><p>这些软件如果需要监听原始按键，是依旧可以监听到 <code>caps</code> 按下。这个时候在 sysinternals 工具箱有一个叫 <code>ctrl2cap</code> 的工具</p></blockquote><h2 id="方法5-Ctrl2Cap-驱动级修改"><a href="#方法5-Ctrl2Cap-驱动级修改" class="headerlink" title="方法5. Ctrl2Cap 驱动级修改"></a>方法5. Ctrl2Cap 驱动级修改</h2><blockquote><p>出处：<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/ctrl2cap">Ctrl2cap - Sysinternals | Microsoft Learn</a></p></blockquote><p>Ctrl2cap 是一个内核模式设备驱动程序，用于筛选系统的键盘类驱动程序，以便将 caps-lock 字符转换为 control 字符。 像我这样从 UNIX 迁移到 NT 的人习惯于将 control 键置于标准电脑键盘上 caps-lock 键的位置，因此这样的实用工具对于我们的编辑工作至关重要。</p><p><strong>安装</strong></p><ul><li>打开管理员 cmd，或者 管理员 powershell</li><li>从解压缩 Ctrl2cap 文件的目录中运行命令 <code>Ctrl2cap.exe /install</code> 以安装 Ctrl2cap。 若要卸载，<code>ctrl2cap /uninstall</code></li></ul><p><strong>Ctrl2cap 的工作原理</strong></p><p>在 NT 4 上，Ctrlcap 实际上相当简单。 它只是将自身附加到键盘类驱动程序，以便捕获键盘读取请求。 对于每个请求，它都会发布一个 I&#x2F;O 完成回调，此时它会查看返回的扫描代码。 如果它恰好是 caps-lock，则 ctrl2cap 将其更改为left-control。</p><p>在 Win2K 上，Ctrl2cap 是一个 WDM 筛选器驱动程序，它在键盘类设备之上的键盘类设备堆栈中分层。 这与 Win2K DDK 的 kbfiltr 示例形成对比，后者将自己分层在 i8042 端口设备和键盘类设备之间。 出于以下几个原因，我选择在键盘类设备上分层：</p><ul><li>这意味着 Ctrl2cap IRP_MJ_READ 拦截和操作代码在 NT 4 和 Win2K 版本之间共享。</li><li>我不需要提供 INF 文件，也不需要让用户通过设备管理器来安装 Ctrl2cap - 我只需修改相应的注册表值（键盘类设备的 HKLM\System\CurrentControlSet\Control\Class UpperFilters 值）。</li></ul><p>我的方法的缺点是（这是一个优点还是缺点，取决于你的观点）：</p><ul><li>由于我没有通过设备管理器使用 INF 文件进行安装，因此不会警告用户 Ctrl2cap 驱动程序文件未由 Microsoft 进行数字签名。</li></ul><p>在这种情况下，我觉得优点大于缺点。 但是，在为 Ctrl2cap 上的 Win2K 键盘筛选器建模之前，我强烈建议你学习 Win2K DDK 中的 kbfiltr 示例。 Kbfiltr 在键输入序列中的拦截点使 kbfiltr 可以轻松地将击键注入输入流。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/ctrl2cap">Ctrl2cap - Sysinternals | Microsoft Learn</a></li><li><a href="https://superuser.com/a/1389340">https://superuser.com/a/1389340</a></li><li><a href="https://gist.github.com/joshschmelzle/5e88dabc71014d7427ff01bca3fed33d">Remap Caps Lock to Control on Windows 10 (github.com)</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu 中非 root 的普通用户怎么直接执行 Docker 命令</title>
      <link href="/2023/09/01/wsl%20Ubuntu%E4%B8%AD%E9%9D%9Eroot%E7%9A%84%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%80%8E%E4%B9%88%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8Cdocker%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/09/01/wsl%20Ubuntu%E4%B8%AD%E9%9D%9Eroot%E7%9A%84%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%80%8E%E4%B9%88%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8Cdocker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>docker需要root权限，如果希望非root用户直接使用docker命令，而不是使用sudo，可以选择将该用户加入到docker用户组。</p><p><code>sudo groupadd docker</code>：添加到groupadd用户组（已经有docker用户组，所以可以不用再新增docker用户组）</p><p><code>sudo gpasswd -a $USER docker</code>：添加当前用户到docker组</p><p><code>newgrp docker</code>：更新docker用户组</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在 WSL2 中使用 NVIDIA Docker 进行全栈开发和深度学习 TensorFlow pytorch GPU 加速</title>
      <link href="/2023/08/31/%E5%9C%A8%20WSL2%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20NVIDIA%20Docker%20%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20TensorFlow%20pytorch%20GPU%20%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/08/31/%E5%9C%A8%20WSL2%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20NVIDIA%20Docker%20%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20TensorFlow%20pytorch%20GPU%20%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><h3 id="0-1-起源"><a href="#0-1-起源" class="headerlink" title="0.1 起源"></a>0.1 起源</h3><ul><li>生产环境都是在 k8d pod 中运行，直接在容器中开发不好嘛？</li><li>每次换电脑，都要配配配，呸呸呸</li><li>新电脑只安装日常用的软件不好嘛，环境变量配配配，各种日常软件和开发软件到处拉💩</li><li>虚拟机呗，怎么调用 GPU 是个问题，hyper-v 好像是可以魔改配置实现，又得改改改。改好了本地能跑了，生产给你报错报错错错错</li><li>到处拉💩，文件弄乱了怎么办，容器直接销毁重建就完事，分分钟解决。电脑重装再配环境也遭不住</li></ul><h3 id="0-2-容器化开发之后"><a href="#0-2-容器化开发之后" class="headerlink" title="0.2. 容器化开发之后"></a>0.2. 容器化开发之后</h3><ul><li>宿主机电脑随便换，随便重装。重装之后我只要 <code>上网</code> + <code>wsl --install</code> + <code>get docker</code> + <code>docker compose up -d</code> 就完事了</li><li>换 macOS？没事，<code>docker compsoe up -d</code></li><li>换 Windows？没事，<code>docker compose up -d</code></li><li>没电脑？没事，搞台远程机子 <code>ssh</code> +  <code>docker compose up -d</code></li><li>电脑炸了？没事，所有 git 修改都在远端有一份。开发环境换台机子 <code>docker compose up -d</code> 继续</li></ul><h3 id="0-3-不足"><a href="#0-3-不足" class="headerlink" title="0.3 不足"></a>0.3 不足</h3><ul><li>如果是做 k8s 开发的，估计不行，起本地集群建议用 vagrant。本质上一个容器根本无法解决这个问题</li><li>如果没有机器不支持 <code>systemd</code> 没法搞，比如公司只给提供开发容器环境（只能操作给你的容器），这个情况下目前正在解决，使用 ansible 重写 Dockerfile 里面的脚本，摆脱容器限制。主要区别就是环境安装过程在本地还是在远端</li></ul><h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1. 前置条件"></a>1. 前置条件</h2><h3 id="1-1-安装系统"><a href="#1-1-安装系统" class="headerlink" title="1.1. 安装系统"></a>1.1. 安装系统</h3><p>Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11</p><p><strong>跳过</strong></p><h3 id="1-2-处理好网络环境"><a href="#1-2-处理好网络环境" class="headerlink" title="1.2. 处理好网络环境"></a>1.2. 处理好网络环境</h3><p>安装过程中需要访问国际网络，自行处理好。建议开启 tun 模式</p><h2 id="2-准备-WSL"><a href="#2-准备-WSL" class="headerlink" title="2. 准备 WSL"></a>2. 准备 WSL</h2><h3 id="2-1-安装-WSL"><a href="#2-1-安装-WSL" class="headerlink" title="2.1. 安装 WSL"></a>2.1. 安装 WSL</h3><p>在管理员模式下打开 PowerShell 或 Windows 命令提示符</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>安装完成，重启电脑</p><h3 id="2-2-首次打开-WSL"><a href="#2-2-首次打开-WSL" class="headerlink" title="2.2. 首次打开 WSL"></a>2.2. 首次打开 WSL</h3><p>重启完成后，打开 powershell，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><p>此时应该会提示为 Linux 发行版创建“用户名”和“密码”</p><blockquote><p>如果这里提示没有安装 Linux 发行版，那么这里可以再次执行 <code>wsl --install</code>，会自动安装 Ubuntu 22.04 LTS</p></blockquote><h3 id="2-3-设置-root-密码"><a href="#2-3-设置-root-密码" class="headerlink" title="2.3. 设置 root 密码"></a>2.3. 设置 root 密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h3 id="2-4-换源"><a href="#2-4-换源" class="headerlink" title="2.4. 换源"></a>2.4. 换源</h3><p>切换到 root 用户，执行下面命令换源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&#x27;EOF&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># # deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirror.nju.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># # deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>出处：南京大学镜像站 -&gt; <a href="https://mirror.nju.edu.cn/mirrorz-help/ubuntu/?mirror=NJU">https://mirror.nju.edu.cn/mirrorz-help/ubuntu/?mirror=NJU</a></p></blockquote><h3 id="2-5-（可选）迁移-WSL-磁盘目录"><a href="#2-5-（可选）迁移-WSL-磁盘目录" class="headerlink" title="2.5.（可选）迁移 WSL 磁盘目录"></a>2.5.（可选）迁移 WSL 磁盘目录</h3><p>这里以迁移到 <code>D:\hyper-v\ubu1\ubu1.vhdx</code> 为例</p><h3 id="2-6-设置默认用户"><a href="#2-6-设置默认用户" class="headerlink" title="2.6. 设置默认用户"></a>2.6. 设置默认用户</h3><p>把 <code>你的用户名</code> 替换成你设置的用户名，然后在 WSL 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;[user]\ndefault=你的用户名&quot;</span> &gt;&gt; /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>比如我的用户名是 <code>linux</code>，那么我执行的命令就是 <code>sudo echo &quot;[user]\ndefault=linux&quot; &gt;&gt; /etc/wsl.conf</code></p><h3 id="2-7-导出磁盘镜像"><a href="#2-7-导出磁盘镜像" class="headerlink" title="2.7. 导出磁盘镜像"></a>2.7. 导出磁盘镜像</h3><p>在 Windows poweshell 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu d:\hyper-v\ubu1\ubu1.vhdx --vhd</span><br></pre></td></tr></table></figure><h3 id="2-8-删除原系统"><a href="#2-8-删除原系统" class="headerlink" title="2.8. 删除原系统"></a>2.8. 删除原系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h3 id="2-9-导入新系统"><a href="#2-9-导入新系统" class="headerlink" title="2.9. 导入新系统"></a>2.9. 导入新系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import-in-place ubu1 d:\hyper-v\ubu1\ubu1.vhdx</span><br></pre></td></tr></table></figure><h2 id="3-配置-NVIDIA-Docker"><a href="#3-配置-NVIDIA-Docker" class="headerlink" title="3. 配置 NVIDIA Docker"></a>3. 配置 NVIDIA Docker</h2><h3 id="3-1-安装-Docker"><a href="#3-1-安装-Docker" class="headerlink" title="3.1. 安装 Docker"></a>3.1. 安装 Docker</h3><blockquote><p>参考：docker 官网 和 南京大学镜像 -&gt; <a href="https://mirror.nju.edu.cn/mirrorz-help/docker-ce/?mirror=NJU">https://mirror.nju.edu.cn/mirrorz-help/docker-ce/?mirror=NJU</a></p></blockquote><p>在 powershell 中输入 <code>wsl</code>，进入 WSL 中，执行</p><p>首先安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br></pre></td></tr></table></figure><p>信任 Docker 的 GPG 公钥并添加仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirror.nju.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>最后安装 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="3-2-配置普通用户直接使用-Docker-命令"><a href="#3-2-配置普通用户直接使用-Docker-命令" class="headerlink" title="3.2. 配置普通用户直接使用 Docker 命令"></a>3.2. 配置普通用户直接使用 Docker 命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="3-3-安装-NVIDIA-支持"><a href="#3-3-安装-NVIDIA-支持" class="headerlink" title="3.3 安装 NVIDIA 支持"></a>3.3 安装 NVIDIA 支持</h3><blockquote><p>参考：微软 WSL 官方文档：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute">https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute</a></p></blockquote><p>通过运行以下命令为 NVIDIA 容器工具包设置稳定存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> $ID<span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-docker-keyring.gpg</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | sed <span class="string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-docker-keyring.gpg] https://#g&#x27;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-docker.list</span><br></pre></td></tr></table></figure><p>安装 NVIDIA 运行时包和依赖项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br></pre></td></tr></table></figure><h3 id="3-4-Docker-换源"><a href="#3-4-Docker-换源" class="headerlink" title="3.4 Docker 换源"></a>3.4 Docker 换源</h3><blockquote><p>参考：南京大学镜像</p></blockquote><p>修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>正常走到这一步应该是这样的</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934842593104adf16cae3f4c17cb676b650e7ab189a.png" alt="16934842593104adf16cae3f4c17cb676b650e7ab189a.png"></p><br/><p>添加一行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">,</span><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://docker.nju.edu.cn/&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348443613133713cbe8c88e63ec50c28abeb2a443e.png" alt="169348443613133713cbe8c88e63ec50c28abeb2a443e.png"></p><br/><p>按下 <code>ctrl+o</code> 再按下 <code>回车</code> 保存文件</p><p>再按下 <code>ctrl+x</code> 退出编辑器</p><p>检查一下结果，<code>cat /etc/docker/daemon.json</code></p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484492129119f80574646149e30461fa3f60246fc.png" alt="1693484492129119f80574646149e30461fa3f60246fc.png"></p><br/><p>重启 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="4-拉取-运行-Docker-镜像"><a href="#4-拉取-运行-Docker-镜像" class="headerlink" title="4. 拉取 &amp; 运行 Docker 镜像"></a>4. 拉取 &amp; 运行 Docker 镜像</h2><blockquote><p>这个全栈开发镜像是我自己构建的<br>Dockfile 在 GitHub 仓库这里 <a href="https://github.com/james-curtis/code-os-debian">https://github.com/james-curtis/code-os-debian</a><br>包含了</p><ul><li>zsh</li><li>ohmyzsh</li><li>powerlevel10k</li><li>中文语言包，gui 下微软雅黑字体支持</li><li>nodejs、nvm</li><li>openssh</li><li>c++</li><li>wslg 透传到 Windows 母机支持</li><li>Python、conda、pdm<br> temurin 8、11、17 jdk，jenv<br> docker cli<br> TensorFlow<br> pytorch<br> cuda 11.8、cudatoolkit</li></ul></blockquote><h3 id="4-1-拉取镜像"><a href="#4-1-拉取镜像" class="headerlink" title="4.1. 拉取镜像"></a>4.1. 拉取镜像</h3><p>由于镜像较大，建议单独拉取</p><ul><li>GPU 支持镜像（9.94 GB）：<code>jamescurtisfoxmail/code-os:latest-gpu</code></li><li>仅 CPU 支持镜像（2.77 GB）：<code>jamescurtisfoxmail/code-os:latest</code></li></ul><p>这里以 GPU 支持镜像为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jamescurtisfoxmail/code-os:latest-gpu</span><br></pre></td></tr></table></figure><h3 id="4-2-下载-compose-配置"><a href="#4-2-下载-compose-配置" class="headerlink" title="4.2. 下载 compose 配置"></a>4.2. 下载 compose 配置</h3><p>下载 Docker compose 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/james-curtis/code-os-debian.git</span><br></pre></td></tr></table></figure><h3 id="4-3-启动-Docker-compose"><a href="#4-3-启动-Docker-compose" class="headerlink" title="4.3. 启动 Docker compose"></a>4.3. 启动 Docker compose</h3><p>启动 docker compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code-os-debian/docker/wsl/</span><br><span class="line">bash run-gpu.sh</span><br></pre></td></tr></table></figure><p>可以看到已经启动成功了<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484526128a07ecfed1340e7d02b919f23da9378c3.png" alt="1693484526128a07ecfed1340e7d02b919f23da9378c3.png"></p><h2 id="5-检验成果"><a href="#5-检验成果" class="headerlink" title="5. 检验成果"></a>5. 检验成果</h2><p>先进入 Docker 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .gpu-envrc</span><br><span class="line">docker compose <span class="built_in">exec</span> os zsh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484539128fb39edd4cc37214c59b3cfd33a419119.png" alt="1693484539128fb39edd4cc37214c59b3cfd33a419119.png"></p><blockquote><p>如果字体乱码，应该是没有配置 powerlevel10k 的 <code>MesloLGS NF</code> 字体支持。</p><p>我使用的终端是 <code>tabby</code> 全平台支持    </p><p> <img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348454912865a864d5c148fa2d05c1ef3a0f4cd041.png" alt="169348454912865a864d5c148fa2d05c1ef3a0f4cd041.png"></p><p>在项目中有这几个字体，复制到 <code>c:\windows\fonts</code> 中即可</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484558129f5fa68a6adf756a7251eddb9cf098e08.png" alt="1693484558129f5fa68a6adf756a7251eddb9cf098e08.png"></p></blockquote><h3 id="5-1-检测-wslg-支持"><a href="#5-1-检测-wslg-支持" class="headerlink" title="5.1. 检测 wslg 支持"></a>5.1. 检测 wslg 支持</h3><p><code>xeyes</code> 会显示一个跟随鼠标的小眼睛</p><p><code>xclock</code> 是显示一个时钟</p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934845681289dc2fb94f291f99e9c92fb8286d1299e.png" alt="16934845681289dc2fb94f291f99e9c92fb8286d1299e.png"></p><h3 id="5-2-检测-NVIDIA-支持"><a href="#5-2-检测-NVIDIA-支持" class="headerlink" title="5.2. 检测 NVIDIA 支持"></a>5.2. 检测 NVIDIA 支持</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934845861283b76e4afea48293b2be2659a6259389e.png" alt="16934845861283b76e4afea48293b2be2659a6259389e.png"><br>我这里显示出了母机的 3060，说明 Docker 已经检测到这张显卡</p><h3 id="5-3-检测-TensorFlow支持"><a href="#5-3-检测-TensorFlow支持" class="headerlink" title="5.3. 检测 TensorFlow支持"></a>5.3. 检测 TensorFlow支持</h3><h4 id="5-3-1-TensorFlow-CPU"><a href="#5-3-1-TensorFlow-CPU" class="headerlink" title="5.3.1 TensorFlow CPU"></a>5.3.1 TensorFlow CPU</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484594155ce96a3ea90d8dd75ead62cb469ca6561.png" alt="1693484594155ce96a3ea90d8dd75ead62cb469ca6561.png"></p><p>打印出了张量</p><h4 id="5-3-2-TensorFlow-GPU"><a href="#5-3-2-TensorFlow-GPU" class="headerlink" title="5.3.2 TensorFlow GPU"></a>5.3.2 TensorFlow GPU</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.config.list_physical_devices(&#x27;GPU&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484602126dce0e8a22b6a116b0332392835e9010e.png" alt="1693484602126dce0e8a22b6a116b0332392835e9010e.png"></p><p>可以看到 TensorFlow 也检测到了显卡</p><h4 id="5-3-3-安装-kaggle-cli"><a href="#5-3-3-安装-kaggle-cli" class="headerlink" title="5.3.3 安装 kaggle cli"></a>5.3.3 安装 kaggle cli</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kaggle</span><br></pre></td></tr></table></figure><p>登录 kaggle 下载登录凭据，下载到 <code>~/.kaggle/kaggle.json</code></p><blockquote><p>官方教程 <a href="https://github.com/Kaggle/kaggle-api#api-credentials">https://github.com/Kaggle/kaggle-api#api-credentials</a></p></blockquote><p>设置权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 ~/.kaggle/kaggle.json</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484611126002ed3169310ad3a2442ea36491ac828.png" alt="1693484611126002ed3169310ad3a2442ea36491ac828.png"></p><h4 id="5-3-4-检测-TensorFlow-GPU-负载支持"><a href="#5-3-4-检测-TensorFlow-GPU-负载支持" class="headerlink" title="5.3.4 检测 TensorFlow GPU 负载支持"></a>5.3.4 检测 TensorFlow GPU 负载支持</h4><p>这里我们使用 kaggle cli 下载比赛中别人提交的代码进行测试，<a href="https://www.kaggle.com/code/hassanamin/tensorflow-mnist-gpu-tutorial">https://www.kaggle.com/code/hassanamin/tensorflow-mnist-gpu-tutorial</a></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846191270cd4adf205ebd8790e2b4bde76166a2b.png" alt="16934846191270cd4adf205ebd8790e2b4bde76166a2b.png"><br>复制下载命令</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484626126a7990a1e7044a3bb5a2054ec07eb7c8a.png" alt="1693484626126a7990a1e7044a3bb5a2054ec07eb7c8a.png"></p><p><strong>启动 openssh-server</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>输入密码 <code>linux</code> </p><blockquote><p>默认用户和密码都是 <code>linux</code></p><p><code>root</code> 用户名也是 <code>linux</code></p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846331264737dece647d08f3fd827674cb12bd7b.png" alt="16934846331264737dece647d08f3fd827674cb12bd7b.png"></p><p><strong>打开 vscode 进行远程连接</strong><br>需要先下载远程开发插件 <code>ms-vscode-remote.vscode-remote-extensionpack</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846411276154d21eb0a904f597d3fcb891ce5345.png" alt="16934846411276154d21eb0a904f597d3fcb891ce5345.png"></p><p>点击左下角的蓝标，会弹出命令列表，选择 <code>Connect to host</code></p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484662126f34f5829cb9c8ae47ed3eba65b933212.png" alt="1693484662126f34f5829cb9c8ae47ed3eba65b933212.png"></p><br/><p>直接连接 <code>localhost</code> 即可</p><br/><blockquote><p>为什么可以直接通过 <code>localhost</code> 连接有两个原因</p><ol><li>微软支持宿主机直接访问 WSL 的监听端口</li><li>docker compose 中设置的 <code>network</code> 类型是 <code>host</code>，也就是和 WSL 公用一个网络</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484685126844afa00df2604630c9f9dc7df47533a.png" alt="1693484685126844afa00df2604630c9f9dc7df47533a.png"></p><p>点击右侧的 <code>Connect</code> </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846901241578876302c28e81b0e1922330432b6f.png" alt="16934846901241578876302c28e81b0e1922330432b6f.png"><br>会提示选择平台和输入密码</p><p>完成之后即可进行远程开发</p><p><strong>进入刚刚 kaggle 的项目</strong></p><p>这里由于的刚刚我下载的目录是 <code>/tmp/kaggle/tf</code> 所以这里我需要打开这个目录</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484697124b68c65ea075ddb3ca0f4bae8f94dfaa2.png" alt="1693484697124b68c65ea075ddb3ca0f4bae8f94dfaa2.png"><br><strong>安装插件</strong><br>需要安装的插件有</p><ul><li>donjayamanne.python-extension-pack</li><li>donjayamanne.python-extension-pack</li></ul><p>安装完成之后需要加载窗口</p><p><strong>选择运行环境</strong><br>选择 conda Python3.9 作为运行环境<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847051258ce5bc169a1945be5f4a05805a73f026.png" alt="16934847051258ce5bc169a1945be5f4a05805a73f026.png"><br>逐个单元格运行试试效果</p><p>可以看到检测到 GPU 了<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484713124268cedbf858fe22cf23a9d8a0a0b15c6.png" alt="1693484713124268cedbf858fe22cf23a9d8a0a0b15c6.png"><br>可以看到成功调用宿主机显卡<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847201250b779cecd0e73850fd2689ddf9d169cc.png" alt="16934847201250b779cecd0e73850fd2689ddf9d169cc.png"><br>不过似乎没有使得显卡满载</p><h3 id="5-4-检测-pytorch-cuda-支持"><a href="#5-4-检测-pytorch-cuda-支持" class="headerlink" title="5.4. 检测 pytorch cuda 支持"></a>5.4. 检测 pytorch cuda 支持</h3><p>在 WSL 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import torch;print(torch.cuda.is_available());&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348472712535ea23e934d88048e2c6c8dab35c3aea.png" alt="169348472712535ea23e934d88048e2c6c8dab35c3aea.png"></p><blockquote><p>这里我还没有换 vscode 的终端字体，所以乱码了，忽略即可</p></blockquote><h4 id="5-4-1-检测-pytorch-GPU-负载支持"><a href="#5-4-1-检测-pytorch-GPU-负载支持" class="headerlink" title="5.4.1 检测 pytorch GPU 负载支持"></a>5.4.1 检测 pytorch GPU 负载支持</h4><p>对于 pytorch，这里使用 <a href="https://www.kaggle.com/code/lyhue1991/pytorch-gpu-examples%EF%BC%8C%E4%BD%9C%E4%B8%BA%E6%B5%8B%E8%AF%95">https://www.kaggle.com/code/lyhue1991/pytorch-gpu-examples，作为测试</a> demo</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484734124b153e92b893a5c208c7eb054b3154899.png" alt="1693484734124b153e92b893a5c208c7eb054b3154899.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484743125e0d3a43375a635fe2a488d29b8a0c0ea.png" alt="1693484743125e0d3a43375a635fe2a488d29b8a0c0ea.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348475112489327abd58292ac9fc75036ecd4b132e.png" alt="169348475112489327abd58292ac9fc75036ecd4b132e.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348476212373dcb403f84c118c1e16e48e6bf352ad.png" alt="169348476212373dcb403f84c118c1e16e48e6bf352ad.png"><br>可以看到成功调度 GPU</p><h3 id="6-检查-nodejs"><a href="#6-检查-nodejs" class="headerlink" title="6. 检查 nodejs"></a>6. 检查 nodejs</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847731247a5f0ca36fe146f3fa6985adb40d9a4c.png" alt="16934847731247a5f0ca36fe146f3fa6985adb40d9a4c.png"></p><h3 id="7-检查-java"><a href="#7-检查-java" class="headerlink" title="7. 检查 java"></a>7. 检查 java</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line">jenv versions</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484779123aaba208a8173522f6b82e93ac2a64cb9.png" alt="1693484779123aaba208a8173522f6b82e93ac2a64cb9.png"></p><h3 id="8-检查-c"><a href="#8-检查-c" class="headerlink" title="8. 检查 c++"></a>8. 检查 c++</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -v</span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348478612341eb734dbd75537dc43fba98abb4c225.png" alt="169348478612341eb734dbd75537dc43fba98abb4c225.png"></p><h3 id="9-容器卷"><a href="#9-容器卷" class="headerlink" title="9. 容器卷"></a>9. 容器卷</h3><p>在 Dockerfile 中有写到</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =========== 配置 容器卷 =============</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [ <span class="string">&quot;/mnt/workspace&quot;</span>, <span class="string">&quot;/mnt/data&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>这两个目录都是持久化的，也就是 docker 容器销毁之后，只有这两个目录下的文件不会清理（重启不影响）</p><p>其中 <code>/mnt/workspace</code> 是映射到 WSL 中的，IO 性能比较差</p><p><code>/mnt/data</code> 是没有映射的容器卷，IO 性能较好，建议项目都放到该目录下</p><p>至于 <code>/home/linux</code> 用户目录下的文件可以自己创建并映射容器卷</p><h2 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6. 参考文档"></a>6. 参考文档</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></li><li><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/30/hello-world/"/>
      <url>/2023/08/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>debian 怎么修改 man help 为中文，wsl 怎么修改显示语言为中文</title>
      <link href="/2023/08/03/debian%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9man%20help%E4%B8%BA%E4%B8%AD%E6%96%87%EF%BC%8Cwsl%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80%E4%B8%BA%E4%B8%AD%E6%96%87/"/>
      <url>/2023/08/03/debian%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9man%20help%E4%B8%BA%E4%B8%AD%E6%96%87%EF%BC%8Cwsl%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80%E4%B8%BA%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>在Debian 12系统中，要将系统语言和Man帮助手册设置为中文，需要执行以下步骤：</p><ol><li><p>安装中文语言包：<br>首先，更新软件包列表并安装中文语言包。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install locales</span><br></pre></td></tr></table></figure></li><li><p>配置本地化设置：<br>安装完成后，使用以下命令重新配置本地化设置，并选择中文语言包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>在选择界面中，选中<code>zh_CN.UTF-8</code>（中文简体）和其他你希望支持的语言设置。然后按空格键选中，使用方向键移动到”OK”并按下回车键。</p></li><li><p>设置系统默认语言：<br>在终端中编辑你的bash配置文件（如<code>.bashrc</code>或<code>.bash_profile</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文件末尾添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>按下 <code>Ctrl+X</code>，然后输入 <code>Y</code> 保存更改并退出编辑器。</p></li><li><p>使设置生效：<br>输入以下命令使配置文件的更改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>安装中文Man帮助手册：<br>安装中文Man帮助手册的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install manpages-zh</span><br></pre></td></tr></table></figure></li><li><p>查看中文Man帮助手册：<br>现在，你可以使用<code>man</code>命令查看中文的Man帮助手册了。例如，要查看<code>ls</code>命令的中文Man帮助手册，可以输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>确保系统和应用程序现在以中文显示，并正确解析和处理中文字符。</p></li></ol><hr><p>如果想默认是英文，在需要时候切换到中文的话，可以把设置环境变量的两条语句写到其他文件比如 <code>.zhcnrc</code> 在需要使用中文的时候，使用 <code>source ~/.zhcnrc</code> 命令即可切换</p><p>要判断是否切换成功，可以使用 <code>locales</code> 命令查看</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim怎么使用，vim使用教程，vimtutor怎么切换中文 汉化</title>
      <link href="/2023/08/02/vim%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%8Cvim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8Cvimtutor%E6%80%8E%E4%B9%88%E5%88%87%E6%8D%A2%E4%B8%AD%E6%96%87%20%E6%B1%89%E5%8C%96/"/>
      <url>/2023/08/02/vim%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%8Cvim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8Cvimtutor%E6%80%8E%E4%B9%88%E5%88%87%E6%8D%A2%E4%B8%AD%E6%96%87%20%E6%B1%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="vim怎么使用，vim使用教程，vimtutor怎么切换中文-汉化"><a href="#vim怎么使用，vim使用教程，vimtutor怎么切换中文-汉化" class="headerlink" title="vim怎么使用，vim使用教程，vimtutor怎么切换中文 汉化"></a>vim怎么使用，vim使用教程，vimtutor怎么切换中文 汉化</h1><h1 id="vim-使用"><a href="#vim-使用" class="headerlink" title="vim 使用"></a>vim 使用</h1><blockquote><p>在安装了 vim 的 unix 系统下可以使用 <code>vimtutor zh_cn</code> 开启下面的教程</p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">===============================================================================</span><br><span class="line">=      欢     迎     阅     读   《 V I M  教  程 》   ——      版本 1.7       =</span><br><span class="line">===============================================================================</span><br><span class="line"></span><br><span class="line">     Vim 是一个具有很多命令的功能非常强大的编辑器。限于篇幅，在本教程当中</span><br><span class="line">     就不详细介绍了。本教程的设计目标是讲述一些必要的基本命令，而掌握好这</span><br><span class="line">     些命令，您就能够很容易地将 Vim 当作一个通用编辑器来使用了。</span><br><span class="line"></span><br><span class="line">     完成本教程的内容大约需要25-30分钟，取决于您训练的时间。</span><br><span class="line"></span><br><span class="line">     注意：</span><br><span class="line">     每一节的命令操作将会更改本文。推荐您复制本文的一个副本，然后在副本上</span><br><span class="line">     进行训练(如果您是通过&quot;vimtutor&quot;来启动教程的，那么本文就已经是副本了)。</span><br><span class="line"></span><br><span class="line">     切记一点：本教程的设计思路是在使用中进行学习的。也就是说，您需要通过</span><br><span class="line">     执行命令来学习它们本身的正确用法。如果您只是阅读而不操作，那么您可能</span><br><span class="line">     会很快遗忘这些命令的！</span><br><span class="line"></span><br><span class="line">     好了，现在请确定您的Shift-Lock(大小写锁定键)还没有按下，然后按键盘上</span><br><span class="line">     的字母键 j 足够多次来移动光标，直到第一节的内容能够完全充满屏幕。</span><br></pre></td></tr></table></figure><h2 id="第一讲第一节：移动光标"><a href="#第一讲第一节：移动光标" class="headerlink" title="第一讲第一节：移动光标"></a>第一讲第一节：移动光标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">             ** 要移动光标，请依照说明分别按下 h、j、k、l 键。 **</span><br><span class="line"></span><br><span class="line">             ^</span><br><span class="line">             k              提示： h 的键位于左边，每次按下就会向左移动。</span><br><span class="line">       &lt; h       l &gt;               l 的键位于右边，每次按下就会向右移动。</span><br><span class="line">             j                     j 键看起来很象一支尖端方向朝下的箭头。</span><br><span class="line">             v</span><br><span class="line"></span><br><span class="line">  1. 请随意在屏幕内移动光标，直至您觉得舒服为止。</span><br><span class="line"></span><br><span class="line">  2. 按下下行键(j)，直到出现光标重复下行。</span><br><span class="line"></span><br><span class="line">---&gt; 现在您应该已经学会如何移动到下一讲吧。</span><br><span class="line"></span><br><span class="line">  3. 现在请使用下行键，将光标移动到第一讲第二节。</span><br><span class="line"></span><br><span class="line">提示：如果您不敢确定您所按下的字母，请按下&lt;ESC&gt;键回到正常(Normal)模式。</span><br><span class="line">      然后再次从键盘输入您想要的命令。</span><br><span class="line"></span><br><span class="line">提示：光标键应当也能正常工作的。但是使用hjkl键，在习惯之后您就能够更快</span><br><span class="line">      地在屏幕内四处移动光标。真的是这样！</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>hjkl</code>并不是特定单词的缩写。这些字符<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>仅仅是为了方便在Vim编辑器中表示上下左右方向而选定的按键。它们没有特定的含义或单词背后的缩写。</p><h2 id="第一讲第二节：VIM的进入和退出"><a href="#第一讲第二节：VIM的进入和退出" class="headerlink" title="第一讲第二节：VIM的进入和退出"></a>第一讲第二节：VIM的进入和退出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  !! 特别提示：敬请阅读本一节的完整内容，然后再执行以下所讲解的命令。</span><br><span class="line"></span><br><span class="line">  1. 按&lt;ESC&gt;键(这是为了确保您处在正常模式)。</span><br><span class="line"></span><br><span class="line">  2. 然后输入：                 :q! &lt;回车&gt;</span><br><span class="line">     这种方式的退出编辑器会丢弃您进入编辑器以来所做的改动。</span><br><span class="line"></span><br><span class="line">  3. 如果您看到了命令行提示符，请输入能够带您回到本教程的命令，那就是：</span><br><span class="line">     vimtutor &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">  4. 如果您自信已经牢牢记住了这些步骤的话，请从步骤1执行到步骤3退出，然</span><br><span class="line">     后再次进入编辑器。</span><br><span class="line"></span><br><span class="line">提示： :q! &lt;回车&gt; 会丢弃您所做的任何改动。几讲之后您将学会如何保存改动到文件。</span><br><span class="line"></span><br><span class="line">  5. 将光标下移到第一讲第三节。</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>q</code> 是 <code>quit</code>（退出）单词缩写</p><h2 id="第一讲第三节：文本编辑之删除"><a href="#第一讲第三节：文本编辑之删除" class="headerlink" title="第一讲第三节：文本编辑之删除"></a>第一讲第三节：文本编辑之删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   ** 在正常(Normal)模式下，可以按下 x 键来删除光标所在位置的字符。**</span><br><span class="line"></span><br><span class="line">  1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。</span><br><span class="line"></span><br><span class="line">  2. 为了修正输入错误，请将光标移至准备删除的字符的位置处。</span><br><span class="line"></span><br><span class="line">  3. 然后按下 x 键将错误字符删除掉。</span><br><span class="line"></span><br><span class="line">  4. 重复步骤2到步骤4，直到句子修正为止。</span><br><span class="line"></span><br><span class="line">---&gt; The ccow jumpedd ovverr thhe mooon.</span><br><span class="line"></span><br><span class="line">  5. 好了，该行已经修正了，下面是第一讲第四节。</span><br><span class="line"></span><br><span class="line">特别提示：在浏览本教程时，不要强行记忆。记住一点：在使用中学习。</span><br></pre></td></tr></table></figure><h2 id="第一讲第四节：文本编辑之插入"><a href="#第一讲第四节：文本编辑之插入" class="headerlink" title="第一讲第四节：文本编辑之插入"></a>第一讲第四节：文本编辑之插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">         ** 在正常模式下，可以按下 i 键来插入文本。**</span><br><span class="line"></span><br><span class="line">  1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。</span><br><span class="line"></span><br><span class="line">  2. 为了使得第一行内容雷同于第二行，请将光标移至文本第一个准备插入字符</span><br><span class="line">     的位置。</span><br><span class="line"></span><br><span class="line">  3. 然后按下 i 键，接着输入必要的文本字符。</span><br><span class="line"></span><br><span class="line">  4. 每个错误修正完毕后，请按下 &lt;ESC&gt; 键返回正常模式。</span><br><span class="line">     重复步骤2至步骤4以便修正句子。</span><br><span class="line"></span><br><span class="line">---&gt; There is text misng this .</span><br><span class="line">---&gt; There is some text missing from this line.</span><br><span class="line"></span><br><span class="line">  5. 如果您对文本插入操作已经很满意，请接着阅读下面的第一讲第五节。</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>i</code> 是 <code>insert</code>（插入）单词的缩写</p><p>I键（小写）：在当前光标所在字符的前面进入插入模式。</p><p>按下I键后，光标会保持在当前字符的位置，然后你可以开始输入新的文本。这对于在行的任何位置开始添加内容很有用。</p><h2 id="第一讲第五节：文本编辑之添加"><a href="#第一讲第五节：文本编辑之添加" class="headerlink" title="第一讲第五节：文本编辑之添加"></a>第一讲第五节：文本编辑之添加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                        ** 按 A 键以添加文本。 **</span><br><span class="line"></span><br><span class="line">  1. 移动光标到下面第一个标记有 ---&gt; 的一行。</span><br><span class="line">     光标放在那一行的哪个字符上并不重要。</span><br><span class="line"></span><br><span class="line">  2. 按 A 键输入必要的添加内容。</span><br><span class="line"></span><br><span class="line">  3. 文本添加完毕后，按 &lt;ESC&gt; 键回到正常模式。</span><br><span class="line"></span><br><span class="line">  4. 移动光标到下面第二个标记有 ---&gt; 的一行。重复步骤2和步骤3以改正这个句子。</span><br><span class="line"></span><br><span class="line">---&gt; There is some text missing from th</span><br><span class="line">     There is some text missing from this line.</span><br><span class="line">---&gt; There is also some text miss</span><br><span class="line">     There is also some text missing here.</span><br><span class="line"></span><br><span class="line">  5. 当您对添加文本操作感到满意时，请继续学习第一讲第六节。</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>a</code> 是 <code>append</code>（添加）单词的缩写</p><p>A键（小写）：在当前光标所在字符的后面进入插入模式。</p><p>按下A键后，光标会移动到当前行的末尾，然后你可以开始输入新的文本。这对于在行的末尾添加内容很方便。</p><h2 id="第一讲第六节：编辑文件"><a href="#第一讲第六节：编辑文件" class="headerlink" title="第一讲第六节：编辑文件"></a>第一讲第六节：编辑文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">                  ** 使用 :wq 以保存文件并退出。 **</span><br><span class="line"></span><br><span class="line">特别提示：在执行以下步骤之前，请先读完整个小节！</span><br><span class="line"></span><br><span class="line">1. 如您在第一讲第二节中所做的那样退出本教程： :q!</span><br><span class="line">   或者，如果您可以访问另一个终端，请在那里执行以下操作。</span><br><span class="line"></span><br><span class="line">2. 在 shell 的提示符下输入命令： vim tutor &lt;回车&gt;</span><br><span class="line">   &#x27;vim&#x27;是启动 Vim 编辑器的命令，&#x27;tutor&#x27;是您希望编辑的文件的名字。</span><br><span class="line">   请使用一个可以改动的文件。</span><br><span class="line"></span><br><span class="line">3. 使用您在前面的教程中学到的命令插入删除文本。</span><br><span class="line"></span><br><span class="line">4. 保存改动过的文件并退出 Vim，按这些键： :wq  &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">5. 如果您在步骤1中已经退出 vimtutor，请重启 vimtutor 移动到下面的小结一节。</span><br><span class="line"></span><br><span class="line">6. 阅读完以上步骤，弄懂它们的意义，然后在实践中进行练习。</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br><code>:wq</code> 中的 <code>w</code> 是 <code>write</code>（写入）的缩写</p><h2 id="第一讲小结"><a href="#第一讲小结" class="headerlink" title="第一讲小结"></a>第一讲小结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。</span><br><span class="line">         h (左移)       j (下行)       k (上行)     l (右移)</span><br><span class="line"></span><br><span class="line">  2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">  3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt;   :q!   &lt;回车&gt; 放弃所有改动。</span><br><span class="line">                      或者输入 &lt;ESC&gt;   :wq   &lt;回车&gt; 保存改动。</span><br><span class="line"></span><br><span class="line">  4. 在正常模式下删除光标所在位置的字符，请按： x</span><br><span class="line"></span><br><span class="line">  5. 欲插入或添加文本，请输入：</span><br><span class="line"></span><br><span class="line">         i   输入欲插入文本   &lt;ESC&gt;             在光标前插入文本</span><br><span class="line">         A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本</span><br><span class="line"></span><br><span class="line">特别提示：按下 &lt;ESC&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整</span><br><span class="line">的命令。</span><br><span class="line"></span><br><span class="line">好了，第一讲到此结束。下面接下来继续第二讲的内容。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>替换linux的文泉驿正黑fonts-wqy-zenhei字体 替换linux默认中文字体</title>
      <link href="/2023/08/01/%E6%9B%BF%E6%8D%A2linux%E7%9A%84%E6%96%87%E6%B3%89%E9%A9%BF%E6%AD%A3%E9%BB%91fonts-wqy-zenhei%E5%AD%97%E4%BD%93%20%E6%9B%BF%E6%8D%A2linux%E9%BB%98%E8%AE%A4%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"/>
      <url>/2023/08/01/%E6%9B%BF%E6%8D%A2linux%E7%9A%84%E6%96%87%E6%B3%89%E9%A9%BF%E6%AD%A3%E9%BB%91fonts-wqy-zenhei%E5%AD%97%E4%BD%93%20%E6%9B%BF%E6%8D%A2linux%E9%BB%98%E8%AE%A4%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>WSL 怎么替换 linux 的文泉驿正黑 fonts-wqy-zenhei 字体<br>WSL 怎么替换 linux 默认中文字体</p><p>在 wsl 中默认是没有 gnome 界面或者 xface 的，但是我需要使用 wsl 开发 electron 或者使用 chrome 浏览器。这个时候系统就会调用默认的系统字体了。</p><p>我使用的是 debian12，如果默认没有安装其他字体的话，浏览器看中文页面就是方框乱码。这时候我们可以安装文泉驿正黑中文字体来解决这个问题。</p><p>但是这个字体也太 nm 丑了吧。就想把微软雅黑或者苹方放进来。百度谷歌教程都翻烂了，几乎没找到替换文泉驿正黑字体 或者在命令行下替换默认字体 或者修改文字优先级的教程。于是把 chat 老师也问烂了，终于找到了答案，那就是使用这个文件 <code>/etc/fonts/local.conf</code>，居然 debian 官网连这个文件的说明都没有，只有对 <code>fonts.conf</code> 的说明。不过 arch linux 官方对 <code>local.conf</code> 这个文件有说明，但是没有这个 xml 定义的说明。</p><h1 id="手动安装字体"><a href="#手动安装字体" class="headerlink" title="手动安装字体"></a>手动安装字体</h1><p>手动安装字体，所有ttf、ttc或者otf等格式的字体都可以用这种方式。</p><p>找到 <code>/usr/share/fonts</code> 目录，新建一个文件夹，比如说 <code>/usr/share/fonts/custom</code> 这样我知道这一块的字体是我自己添加的。</p><p>然后把微软雅黑或者苹方字体拷贝进去。苹方字体建议使用 <code>19.0d4e2</code> 这个版本的字体。</p><blockquote><p>19.0d4e2 版本的苹方可以直接被 Windows 识别，估计是华康在导出文件的时候忘了设置什么东西。</p></blockquote><h1 id="修改字体优先级"><a href="#修改字体优先级" class="headerlink" title="修改字体优先级"></a>修改字体优先级</h1><ol><li>打开终端，并使用文本编辑器（例如 nano 或 vim）创建一个新的 Fontconfig 配置文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/fonts/local.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>在新建的配置文件中添加以下内容，将微软雅黑字体的优先级设置为较高：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">fontconfig</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;urn:fontconfig:fonts.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Set preferable fonts for non-Latin<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>system-ui<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>问题来了，我怎么知道这个配置文件是这样写的。我也不知道，我只是复制了 <code>/etc/fonts/fonts.conf</code> 然后把 <code>prefer</code> 中的字段都删完，只留一个，然后全部都替换成 <code>Microsoft YaHei UI</code></p><p>保存退出</p><h1 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h1><p>在终端中执行以下命令以更新字体缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936350960641693635095476.png" alt="16936350960641693635095476.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023软件工程中各种图在现代企业级开发中的使用频率</title>
      <link href="/2023/06/20/2023%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%90%84%E7%A7%8D%E5%9B%BE%E5%9C%A8%E7%8E%B0%E4%BB%A3%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E9%A2%91%E7%8E%87/"/>
      <url>/2023/06/20/2023%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%90%84%E7%A7%8D%E5%9B%BE%E5%9C%A8%E7%8E%B0%E4%BB%A3%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E9%A2%91%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h1 id="2023软件工程中各种图在现代企业级开发中的使用频率"><a href="#2023软件工程中各种图在现代企业级开发中的使用频率" class="headerlink" title="2023软件工程中各种图在现代企业级开发中的使用频率"></a>2023软件工程中各种图在现代企业级开发中的使用频率</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936351800641693635179264.png" alt="16936351800641693635179264.png"></p><h2 id="系统流程图-✔"><a href="#系统流程图-✔" class="headerlink" title="系统流程图 ✔"></a>系统流程图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936351990621693635198471.png" alt="16936351990621693635198471.png"></p><h2 id="数据流图-×不常用"><a href="#数据流图-×不常用" class="headerlink" title="数据流图  ×不常用"></a>数据流图  ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352180661693635217853.png" alt="16936352180661693635217853.png"></p><h2 id="ER图-✔"><a href="#ER图-✔" class="headerlink" title="ER图 ✔"></a>ER图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352380641693635237871.png" alt="16936352380641693635237871.png"></p><h2 id="状态转换图-✔"><a href="#状态转换图-✔" class="headerlink" title="状态转换图 ✔"></a>状态转换图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352480751693635247278.png" alt="16936352480751693635247278.png"></p><h2 id="Warnier图-×不常用"><a href="#Warnier图-×不常用" class="headerlink" title="Warnier图 ×不常用"></a>Warnier图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352590741693635258629.png" alt="16936352590741693635258629.png"></p><h2 id="IPO图-×不常用"><a href="#IPO图-×不常用" class="headerlink" title="IPO图 ×不常用"></a>IPO图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352820601693635281639.png" alt="16936352820601693635281639.png"></p><h2 id="Petri网-×不常用"><a href="#Petri网-×不常用" class="headerlink" title="Petri网 ×不常用"></a>Petri网 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352920661693635291966.png" alt="16936352920661693635291966.png"></p><h2 id="层次方框图-×不常用"><a href="#层次方框图-×不常用" class="headerlink" title="层次方框图 ×不常用"></a>层次方框图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353020611693635301590.png" alt="16936353020611693635301590.png"></p><h2 id="层次图-a-k-a-H图-✔"><a href="#层次图-a-k-a-H图-✔" class="headerlink" title="层次图 a.k.a. H图 ✔"></a>层次图 a.k.a. H图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353250741693635324362.png" alt="16936353250741693635324362.png"></p><blockquote><p>1,层次图描绘软件的层次结构.层层次方框图描绘的是数据结构。</p><p>2,层次图的方框表示模块或子模块。层次方框图的方框表示数据结构整体或其子集。</p><p>3,层次图的连线表示调用关系，层次方框图表示组成关系。</p></blockquote><h2 id="结构图-×不常用"><a href="#结构图-×不常用" class="headerlink" title="结构图 ×不常用"></a>结构图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353450681693635344883.png" alt="16936353450681693635344883.png"></p><h2 id="HIPO图-×不常用"><a href="#HIPO图-×不常用" class="headerlink" title="HIPO图 ×不常用"></a>HIPO图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353875351693635386586.png" alt="16936353875351693635386586.png"></p><blockquote><p>HIPO图是美国IBM公司发明的“层次图加输入&#x2F;处理&#x2F;输出图”的英文缩写。为了能使HIPO图具有可追踪性，在H图（层次图）里除了最顶层的方框之外，每个方框都加了编号。编号规则和第2.4节中介绍的数据流图的编号规则相同，例如，图5.3加了编号后得到图5,4。</p><p>和H图中每个方框相对应，应该有一张IPO图描绘这个方框代表的模块的处理过程。第3.7节已经详细介绍过IPO图，此处不再重复。但是，有一点应该着重指出，那就是HIPO图中的每张IPO图内都应该明显地标出它所描绘的模块在H图中的编号，以便追踪了解这个模块在软件结构中的位置。</p></blockquote><h2 id="盒图-a-k-a-N-S图-×不常用"><a href="#盒图-a-k-a-N-S图-×不常用" class="headerlink" title="盒图 a.k.a. N-S图 ×不常用"></a>盒图 a.k.a. N-S图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936354075351693635406755.png" alt="16936354075351693635406755.png"></p><h2 id="PAD图-×不常用"><a href="#PAD图-×不常用" class="headerlink" title="PAD图 ×不常用"></a>PAD图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936354215431693635421533.png" alt="16936354215431693635421533.png"></p><h2 id="Jackson图-×不常用"><a href="#Jackson图-×不常用" class="headerlink" title="Jackson图 ×不常用"></a>Jackson图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936354365351693635436128.png" alt="16936354365351693635436128.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://juejin.cn/post/7129822677748940813#heading-8">https://juejin.cn/post/7129822677748940813#heading-8</a></li><li><a href="https://www.liuchuo.net/archives/1848">https://www.liuchuo.net/archives/1848</a></li><li><a href="https://www.kancloud.cn/netcon/t4/241479">https://www.kancloud.cn/netcon/t4/241479</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>educoder头歌强制显示右侧目录按钮，方便查看测试代码，便于怎么在本地自测头歌代码？</title>
      <link href="/2023/04/30/educoder%E5%A4%B4%E6%AD%8C%E5%BC%BA%E5%88%B6%E6%98%BE%E7%A4%BA%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95%E6%8C%89%E9%92%AE%EF%BC%8C%E6%96%B9%E4%BE%BF%E6%9F%A5%E7%9C%8B%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BE%BF%E4%BA%8E%E6%80%8E%E4%B9%88%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%87%AA%E6%B5%8B%E5%A4%B4%E6%AD%8C%E4%BB%A3%E7%A0%81%EF%BC%9F/"/>
      <url>/2023/04/30/educoder%E5%A4%B4%E6%AD%8C%E5%BC%BA%E5%88%B6%E6%98%BE%E7%A4%BA%E5%8F%B3%E4%BE%A7%E7%9B%AE%E5%BD%95%E6%8C%89%E9%92%AE%EF%BC%8C%E6%96%B9%E4%BE%BF%E6%9F%A5%E7%9C%8B%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BE%BF%E4%BA%8E%E6%80%8E%E4%B9%88%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%87%AA%E6%B5%8B%E5%A4%B4%E6%AD%8C%E4%BB%A3%E7%A0%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936355635371693635562880.png" alt="16936355635371693635562880.png"></p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>F12打开控制台<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936355855361693635584793.png" alt="16936355855361693635584793.png"></p></li><li><p>ctrl+shift+f全局搜索 <code>_ref2.code_hidden</code><br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936355945351693635594504.png" alt="16936355945351693635594504.png"></p></li><li><p>在左侧找到 <code>覆盖</code> 按钮，<code>选择替代文件夹</code>，并允许权限<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356145391693635614527.png" alt="16936356145391693635614527.png"></p></li><li><p>在编辑框内右键，选择<code>保存以备替代</code><br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356255361693635625063.png" alt="16936356255361693635625063.png"></p></li><li><p>把 <code>code_hidden</code> 的值修改为 <code>false</code>，然后按下 <code>ctrl+s</code> 保存<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356355351693635634766.png" alt="16936356355351693635634766.png"></p></li><li><p>保持控制台不关闭，刷新页面，enjoying。接下来就可以直接根据测试代码在本地自测了</p></li></ol><h1 id="方法思路"><a href="#方法思路" class="headerlink" title="方法思路"></a>方法思路</h1><p>我是怎么找到这个方法的呢，且听我慢慢道来。</p><ol><li><p>首先的找到一个不显示文件夹按钮的页面和一个可以正常显示文件夹按钮的页面</p></li><li><p>打开控制台，定位到文件夹按钮这个元素<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356495351693635649038.png" alt="16936356495351693635649038.png"></p></li><li><p>发现有个明显的图标名字，这是一个很明显的特征，代码里面肯定会有写。于是全局搜索一下，看看这块代码附件的上下文怎么写的（只要看js就好）<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356645411693635664482.png" alt="16936356645411693635664482.png"></p></li><li><p>解码一下9528行的Unicode，结果是<code>显示目录</code>，说明这一块就是渲染代码<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356765401693635676223.png" alt="16936356765401693635676223.png"></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code_hidden ? <span class="literal">null</span> : <span class="comment">/*#__PURE__*/</span>(<span class="number">0</span>,jsx_runtime.<span class="property">jsx</span>)(<span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;\u663E\u793A\u76EE\u5F55&quot;</span>,</span><br><span class="line">          <span class="attr">onClick</span>: onShowDir,</span><br><span class="line">          <span class="attr">children</span>: <span class="comment">/*#__PURE__*/</span>(<span class="number">0</span>,jsx_runtime.<span class="property">jsx</span>)(<span class="string">&quot;i&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">className</span>: <span class="string">&quot;iconfont icon-wenjian &quot;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>从代码中可以看得出，这个按钮是否显示取决于 <code>code_hidden</code> 变量的值</p><ol start="5"><li>向上搜索 <code>code_hidden </code><br>发现变量是在这里定义的，只要把这里写死为<code>true</code>就好了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">function</span> <span class="title function_">action_bar</span>(<span class="params">_ref2</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> loading = _ref2.<span class="property">loading</span>,</span><br><span class="line">    lastedUpdateTime = _ref2.<span class="property">lastedUpdateTime</span>,</span><br><span class="line">    moveY = _ref2.<span class="property">moveY</span>,</span><br><span class="line">    code_hidden = _ref2.<span class="property">code_hidden</span>,</span><br><span class="line">    hide_code = _ref2.<span class="property">hide_code</span>,</span><br><span class="line">    gameStatus = _ref2.<span class="property">gameStatus</span>,</span><br><span class="line">    isEditPath = _ref2.<span class="property">isEditPath</span>,</span><br><span class="line">    isNotice = _ref2.<span class="property">isNotice</span>,</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356935391693635693364.png" alt="16936356935391693635693364.png"></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rke2集群安装完成之后使用kubectl反应很慢</title>
      <link href="/2023/03/17/rke2%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8kubectl%E5%8F%8D%E5%BA%94%E5%BE%88%E6%85%A2/"/>
      <url>/2023/03/17/rke2%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8kubectl%E5%8F%8D%E5%BA%94%E5%BE%88%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<p>从头开始检查</p><h1 id="检查kubectl请求"><a href="#检查kubectl请求" class="headerlink" title="检查kubectl请求"></a>检查kubectl请求</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@rke2-3:~# kubectl get nodes -v 9</span><br><span class="line">I0317 12:03:12.948874   50681 loader.go:372] Config loaded from file:  /root/.kube/config</span><br><span class="line">I0317 12:03:12.966771   50681 round_trippers.go:435] curl -v -XGET  -H &quot;User-Agent: kubectl/v1.22.17+rke2r1 (linux/amd64) kubernetes/a7736ea&quot; -H &quot;Accept: application/json, */*&quot; &#x27;https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s&#x27;</span><br><span class="line">I0317 12:03:17.976244   50681 round_trippers.go:454] GET https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s 503 Service Unavailable in 5009 milliseconds</span><br><span class="line">I0317 12:03:17.976302   50681 round_trippers.go:460] Response Headers:</span><br><span class="line">I0317 12:03:17.976310   50681 round_trippers.go:463]     Date: Fri, 17 Mar 2023 04:03:17 GMT</span><br><span class="line">I0317 12:03:17.976314   50681 round_trippers.go:463]     Audit-Id: 6161f664-ef9b-4c43-bc8a-7a9bc4aadc4d</span><br><span class="line">I0317 12:03:17.976318   50681 round_trippers.go:463]     Cache-Control: no-cache, private</span><br><span class="line">I0317 12:03:17.976322   50681 round_trippers.go:463]     Content-Type: text/plain; charset=utf-8</span><br><span class="line">I0317 12:03:17.976326   50681 round_trippers.go:463]     X-Content-Type-Options: nosniff</span><br><span class="line">I0317 12:03:17.976330   50681 round_trippers.go:463]     X-Kubernetes-Pf-Flowschema-Uid: 18ac6688-4bae-4287-bb86-d3e59b300a3b</span><br><span class="line">I0317 12:03:17.976334   50681 round_trippers.go:463]     X-Kubernetes-Pf-Prioritylevel-Uid: 8030cae1-7f3d-431a-90c4-09f0ba76b7aa</span><br><span class="line">I0317 12:03:17.976338   50681 round_trippers.go:463]     Content-Length: 68</span><br><span class="line">I0317 12:03:17.979957   50681 request.go:1197] Response Body: error trying to reach service: dial tcp 10.42.0.3:8443: i/o timeout</span><br><span class="line">I0317 12:03:17.983359   50681 request.go:1388] body was not decodable (unable to check for Status): yaml: mapping values are not allowed in this context</span><br><span class="line">I0317 12:03:17.983405   50681 cached_discovery.go:78] skipped caching discovery info due to the server is currently unable to handle the request</span><br><span class="line">I0317 12:03:17.984416   50681 round_trippers.go:435] curl -v -XGET  -H &quot;Accept: application/json, */*&quot; -H &quot;User-Agent: kubectl/v1.22.17+rke2r1 (linux/amd64) kubernetes/a7736ea&quot; &#x27;https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s&#x27;</span><br></pre></td></tr></table></figure><p>发现超时在这一个请求 <code>https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s 503 Service Unavailable in 5009 milliseconds</code></p><h1 id="检查-kube-config"><a href="#检查-kube-config" class="headerlink" title="检查.kube&#x2F;config"></a>检查.kube&#x2F;config</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@rke2-1:~/.kube# cat config </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: xxx</span><br><span class="line">    server: https://127.0.0.1:6443</span><br><span class="line">  name: default</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: default</span><br><span class="line">    user: default</span><br><span class="line">  name: default</span><br><span class="line">current-context: default</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: default</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: xxx</span><br><span class="line">    client-key-data: xxx</span><br></pre></td></tr></table></figure><p>在除了第一个server节点上运行kubectl都很卡，检查kubectl的配置文件，发现请求的server是127.0.0.1</p><p>于是修改为负载均衡ip或者域名即可解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load_balancer_addr=rancher2.ent.top</span><br><span class="line">sed -i.bak &quot;s/127.0.0.1:6443/$&#123;load_balancer_addr&#125;:6443/&quot; /etc/rancher/rke2/rke2.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
