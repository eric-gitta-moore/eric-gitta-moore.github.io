<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows 重新映射 CapsLock 大写锁定到 Ctrl</title>
      <link href="/2023/windows-remaps-capslock-to-ctrl/"/>
      <url>/2023/windows-remaps-capslock-to-ctrl/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-重新映射-CapsLock-大写锁定到-Ctrl"><a href="#Windows-重新映射-CapsLock-大写锁定到-Ctrl" class="headerlink" title="Windows 重新映射 CapsLock 大写锁定到 Ctrl"></a>Windows 重新映射 CapsLock 大写锁定到 Ctrl</h1><p>本要点中的这些方法适用于我的美国键盘布局。我不确定其他布局。如果出现问题，请恢复您的更改；删除您创建的注册表项（并重新启动）。</p><p>强烈推荐 方法5 <code>ctrl2cap</code>，因为不会影响 <code>FastGestures</code> 的触控板三指滑动</p><h2 id="方法1-通过-regedit-手动修改"><a href="#方法1-通过-regedit-手动修改" class="headerlink" title="方法1.通过 regedit 手动修改"></a>方法1.通过 regedit 手动修改</h2><p>在 <code>regedit</code> 中导航到 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</code> 并在名为 <code>Scancode Map</code> 中创建一个新的二进制值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00 00 00 00 00 02 00 00 00 1d 00 3a 00 00 00 00 00</span><br></pre></td></tr></table></figure><p>保存。重启。完毕。</p><blockquote><p>参考：</p><ul><li><p><a href="https://renenyffenegger.ch/notes/Windows/registry/tree/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Keyboard-Layout/index">Registry: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout (renenyffenegger.ch)</a></p></li><li><p><a href="https://superuser.com/a/1264295">https://superuser.com/a/1264295</a></p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">; 这一串十六进制数据分为五组，每组四个字节:</span><br><span class="line">;   00,00,00,00,\    header 版本 (固定值 00000000)</span><br><span class="line">;   00,00,00,00,\    header flags (固定值 00000000)</span><br><span class="line">;   04,00,00,00,\    # 该文本描述了一组条目（在此情况下是3个），以及一个空终止符行。</span><br><span class="line">;                    每个条目都由一个2字节的配对组成：要发送的键码和要发送的键盘按键。</span><br><span class="line">;                    每个条目按照“最不重要字节，最重要字节”的顺序排列，例如 0x1234 变为 34,12</span><br><span class="line">;   1d,00,3a,00,\    发送 LEFT CTRL (0x001d) code 当用户按下 CAPS LOCK key (0x003a) </span><br><span class="line">;   38,00,1d,00,\    发送 LEFT ALT (0x0038) code 当用户按下 LEFT CTRL key (0x001d) </span><br><span class="line">;   3a,00,38,00,\    发送 CAPS LOCK (0x003a) code 当用户按下 LEFT ALT key (0x0038) </span><br><span class="line">;   00,00,00,00      NULL 终止符</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;=hex:00,00,00,00,\</span><br><span class="line">                   00,00,00,00,\</span><br><span class="line">                   04,00,00,00,\</span><br><span class="line">                   1d,00,3a,00,\</span><br><span class="line">                   38,00,1d,00,\</span><br><span class="line">                   3a,00,38,00,\</span><br><span class="line">                   00,00,00,00</span><br></pre></td></tr></table></figure><h2 id="方法-2-创建您自己的注册表项文件"><a href="#方法-2-创建您自己的注册表项文件" class="headerlink" title="方法 2. 创建您自己的注册表项文件"></a>方法 2. 创建您自己的注册表项文件</h2><p>创建一个新的 <code>.reg</code> 文件并将其命名为有意义的名称，例如 <code>capstoctrl.reg</code> 。编辑文件并粘贴以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00</span><br></pre></td></tr></table></figure><p>保存。运行该文件。重启。完毕。</p><h2 id="方法-3-通过-PowerShell（以管理员身份）"><a href="#方法-3-通过-PowerShell（以管理员身份）" class="headerlink" title="方法 3. 通过 PowerShell（以管理员身份）"></a>方法 3. 通过 PowerShell（以管理员身份）</h2><p>以管理员身份打开 PowerShell (Win + X)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$hexified = &quot;00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00&quot;.Split(&#x27;,&#x27;) | % &#123; &quot;0x$_&quot;&#125;;</span><br><span class="line"></span><br><span class="line">$kbLayout = &#x27;HKLM:\System\CurrentControlSet\Control\Keyboard Layout&#x27;;</span><br><span class="line"></span><br><span class="line">New-ItemProperty -Path $kbLayout -Name &quot;Scancode Map&quot; -PropertyType Binary -Value ([byte[]]$hexified);</span><br></pre></td></tr></table></figure><p>保存。运行该文件。重启。完毕。</p><h2 id="方法-4-Microsoft-PowerToys"><a href="#方法-4-Microsoft-PowerToys" class="headerlink" title="方法 4. Microsoft PowerToys"></a>方法 4. Microsoft PowerToys</h2><p>尝试一下 PowerToys 不仅可以重新映射大写锁定键，还可以重新映射其他键。 Microsoft PowerToys：自定义 Windows 10 的实用程序。</p><p>Microsoft PowerToys：键盘管理器使您能够重新定义键盘上的按键。</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936313430601693631342489.png" alt="16936313430601693631342489.png"></p><blockquote><p>以上方法都有问题，如果你还使用其他依赖 <code>ctrl</code> 的软件可能就会出问题。</p><p>这些软件如果需要监听原始按键，是依旧可以监听到 <code>caps</code> 按下。这个时候在 sysinternals 工具箱有一个叫 <code>ctrl2cap</code> 的工具</p></blockquote><h2 id="方法5-Ctrl2Cap-驱动级修改"><a href="#方法5-Ctrl2Cap-驱动级修改" class="headerlink" title="方法5. Ctrl2Cap 驱动级修改"></a>方法5. Ctrl2Cap 驱动级修改</h2><blockquote><p>出处：<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/ctrl2cap">Ctrl2cap - Sysinternals | Microsoft Learn</a></p></blockquote><p>Ctrl2cap 是一个内核模式设备驱动程序，用于筛选系统的键盘类驱动程序，以便将 caps-lock 字符转换为 control 字符。 像我这样从 UNIX 迁移到 NT 的人习惯于将 control 键置于标准电脑键盘上 caps-lock 键的位置，因此这样的实用工具对于我们的编辑工作至关重要。</p><p><strong>安装</strong></p><ul><li>打开管理员 cmd，或者 管理员 powershell</li><li>从解压缩 Ctrl2cap 文件的目录中运行命令 <code>Ctrl2cap.exe /install</code> 以安装 Ctrl2cap。 若要卸载，<code>ctrl2cap /uninstall</code></li></ul><p><strong>Ctrl2cap 的工作原理</strong></p><p>在 NT 4 上，Ctrlcap 实际上相当简单。 它只是将自身附加到键盘类驱动程序，以便捕获键盘读取请求。 对于每个请求，它都会发布一个 I&#x2F;O 完成回调，此时它会查看返回的扫描代码。 如果它恰好是 caps-lock，则 ctrl2cap 将其更改为left-control。</p><p>在 Win2K 上，Ctrl2cap 是一个 WDM 筛选器驱动程序，它在键盘类设备之上的键盘类设备堆栈中分层。 这与 Win2K DDK 的 kbfiltr 示例形成对比，后者将自己分层在 i8042 端口设备和键盘类设备之间。 出于以下几个原因，我选择在键盘类设备上分层：</p><ul><li>这意味着 Ctrl2cap IRP_MJ_READ 拦截和操作代码在 NT 4 和 Win2K 版本之间共享。</li><li>我不需要提供 INF 文件，也不需要让用户通过设备管理器来安装 Ctrl2cap - 我只需修改相应的注册表值（键盘类设备的 HKLM\System\CurrentControlSet\Control\Class UpperFilters 值）。</li></ul><p>我的方法的缺点是（这是一个优点还是缺点，取决于你的观点）：</p><ul><li>由于我没有通过设备管理器使用 INF 文件进行安装，因此不会警告用户 Ctrl2cap 驱动程序文件未由 Microsoft 进行数字签名。</li></ul><p>在这种情况下，我觉得优点大于缺点。 但是，在为 Ctrl2cap 上的 Win2K 键盘筛选器建模之前，我强烈建议你学习 Win2K DDK 中的 kbfiltr 示例。 Kbfiltr 在键输入序列中的拦截点使 kbfiltr 可以轻松地将击键注入输入流。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/ctrl2cap">Ctrl2cap - Sysinternals | Microsoft Learn</a></li><li><a href="https://superuser.com/a/1389340">https://superuser.com/a/1389340</a></li><li><a href="https://gist.github.com/joshschmelzle/5e88dabc71014d7427ff01bca3fed33d">Remap Caps Lock to Control on Windows 10 (github.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu 中非 root 的普通用户怎么直接执行 Docker 命令</title>
      <link href="/2023/how-can-non-root-ordinary-users-directly-execute-docker-commands-in-wsl-ubuntu/"/>
      <url>/2023/how-can-non-root-ordinary-users-directly-execute-docker-commands-in-wsl-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>docker需要root权限，如果希望非root用户直接使用docker命令，而不是使用sudo，可以选择将该用户加入到docker用户组。</p><p><code>sudo groupadd docker</code>：添加到groupadd用户组（已经有docker用户组，所以可以不用再新增docker用户组）</p><p><code>sudo gpasswd -a $USER docker</code>：添加当前用户到docker组</p><p><code>newgrp docker</code>：更新docker用户组</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在 WSL2 中使用 NVIDIA Docker 进行全栈开发和深度学习 TensorFlow pytorch GPU 加速</title>
      <link href="/2023/full-stack-development-and-deep-learning-tensorflow-pytorch-gpu-acceleration-using-nvidia-docker-in-wsl2/"/>
      <url>/2023/full-stack-development-and-deep-learning-tensorflow-pytorch-gpu-acceleration-using-nvidia-docker-in-wsl2/</url>
      
        <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><h3 id="0-1-起源"><a href="#0-1-起源" class="headerlink" title="0.1 起源"></a>0.1 起源</h3><ul><li>生产环境都是在 k8d pod 中运行，直接在容器中开发不好嘛？</li><li>每次换电脑，都要配配配，呸呸呸</li><li>新电脑只安装日常用的软件不好嘛，环境变量配配配，各种日常软件和开发软件到处拉💩</li><li>虚拟机呗，怎么调用 GPU 是个问题，hyper-v 好像是可以魔改配置实现，又得改改改。改好了本地能跑了，生产给你报错报错错错错</li><li>到处拉💩，文件弄乱了怎么办，容器直接销毁重建就完事，分分钟解决。电脑重装再配环境也遭不住</li></ul><h3 id="0-2-容器化开发之后"><a href="#0-2-容器化开发之后" class="headerlink" title="0.2. 容器化开发之后"></a>0.2. 容器化开发之后</h3><ul><li>宿主机电脑随便换，随便重装。重装之后我只要 <code>上网</code> + <code>wsl --install</code> + <code>get docker</code> + <code>docker compose up -d</code> 就完事了</li><li>换 macOS？没事，<code>docker compsoe up -d</code></li><li>换 Windows？没事，<code>docker compose up -d</code></li><li>没电脑？没事，搞台远程机子 <code>ssh</code> +  <code>docker compose up -d</code></li><li>电脑炸了？没事，所有 git 修改都在远端有一份。开发环境换台机子 <code>docker compose up -d</code> 继续</li></ul><h3 id="0-3-不足"><a href="#0-3-不足" class="headerlink" title="0.3 不足"></a>0.3 不足</h3><ul><li>如果是做 k8s 开发的，估计不行，起本地集群建议用 vagrant。本质上一个容器根本无法解决这个问题</li><li>如果没有机器不支持 <code>systemd</code> 没法搞，比如公司只给提供开发容器环境（只能操作给你的容器），这个情况下目前正在解决，使用 ansible 重写 Dockerfile 里面的脚本，摆脱容器限制。主要区别就是环境安装过程在本地还是在远端</li></ul><h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1. 前置条件"></a>1. 前置条件</h2><h3 id="1-1-安装系统"><a href="#1-1-安装系统" class="headerlink" title="1.1. 安装系统"></a>1.1. 安装系统</h3><p>Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11</p><p><strong>跳过</strong></p><h3 id="1-2-处理好网络环境"><a href="#1-2-处理好网络环境" class="headerlink" title="1.2. 处理好网络环境"></a>1.2. 处理好网络环境</h3><p>安装过程中需要访问国际网络，自行处理好。建议开启 tun 模式</p><h2 id="2-准备-WSL"><a href="#2-准备-WSL" class="headerlink" title="2. 准备 WSL"></a>2. 准备 WSL</h2><h3 id="2-1-安装-WSL"><a href="#2-1-安装-WSL" class="headerlink" title="2.1. 安装 WSL"></a>2.1. 安装 WSL</h3><p>在管理员模式下打开 PowerShell 或 Windows 命令提示符</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>安装完成，重启电脑</p><h3 id="2-2-首次打开-WSL"><a href="#2-2-首次打开-WSL" class="headerlink" title="2.2. 首次打开 WSL"></a>2.2. 首次打开 WSL</h3><p>重启完成后，打开 powershell，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><p>此时应该会提示为 Linux 发行版创建“用户名”和“密码”</p><blockquote><p>如果这里提示没有安装 Linux 发行版，那么这里可以再次执行 <code>wsl --install</code>，会自动安装 Ubuntu 22.04 LTS</p></blockquote><h3 id="2-3-设置-root-密码"><a href="#2-3-设置-root-密码" class="headerlink" title="2.3. 设置 root 密码"></a>2.3. 设置 root 密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h3 id="2-4-换源"><a href="#2-4-换源" class="headerlink" title="2.4. 换源"></a>2.4. 换源</h3><p>切换到 root 用户，执行下面命令换源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&#x27;EOF&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># # deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirror.nju.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># # deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>出处：南京大学镜像站 -&gt; <a href="https://mirror.nju.edu.cn/mirrorz-help/ubuntu/?mirror=NJU">https://mirror.nju.edu.cn/mirrorz-help/ubuntu/?mirror=NJU</a></p></blockquote><h3 id="2-5-（可选）迁移-WSL-磁盘目录"><a href="#2-5-（可选）迁移-WSL-磁盘目录" class="headerlink" title="2.5.（可选）迁移 WSL 磁盘目录"></a>2.5.（可选）迁移 WSL 磁盘目录</h3><p>这里以迁移到 <code>D:\hyper-v\ubu1\ubu1.vhdx</code> 为例</p><h3 id="2-6-设置默认用户"><a href="#2-6-设置默认用户" class="headerlink" title="2.6. 设置默认用户"></a>2.6. 设置默认用户</h3><p>把 <code>你的用户名</code> 替换成你设置的用户名，然后在 WSL 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;[user]\ndefault=你的用户名&quot;</span> &gt;&gt; /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>比如我的用户名是 <code>linux</code>，那么我执行的命令就是 <code>sudo echo &quot;[user]\ndefault=linux&quot; &gt;&gt; /etc/wsl.conf</code></p><h3 id="2-7-导出磁盘镜像"><a href="#2-7-导出磁盘镜像" class="headerlink" title="2.7. 导出磁盘镜像"></a>2.7. 导出磁盘镜像</h3><p>在 Windows poweshell 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu d:\hyper-v\ubu1\ubu1.vhdx --vhd</span><br></pre></td></tr></table></figure><h3 id="2-8-删除原系统"><a href="#2-8-删除原系统" class="headerlink" title="2.8. 删除原系统"></a>2.8. 删除原系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h3 id="2-9-导入新系统"><a href="#2-9-导入新系统" class="headerlink" title="2.9. 导入新系统"></a>2.9. 导入新系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import-in-place ubu1 d:\hyper-v\ubu1\ubu1.vhdx</span><br></pre></td></tr></table></figure><h2 id="3-配置-NVIDIA-Docker"><a href="#3-配置-NVIDIA-Docker" class="headerlink" title="3. 配置 NVIDIA Docker"></a>3. 配置 NVIDIA Docker</h2><h3 id="3-1-安装-Docker"><a href="#3-1-安装-Docker" class="headerlink" title="3.1. 安装 Docker"></a>3.1. 安装 Docker</h3><blockquote><p>参考：docker 官网 和 南京大学镜像 -&gt; <a href="https://mirror.nju.edu.cn/mirrorz-help/docker-ce/?mirror=NJU">https://mirror.nju.edu.cn/mirrorz-help/docker-ce/?mirror=NJU</a></p></blockquote><p>在 powershell 中输入 <code>wsl</code>，进入 WSL 中，执行</p><p>首先安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br></pre></td></tr></table></figure><p>信任 Docker 的 GPG 公钥并添加仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirror.nju.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>最后安装 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="3-2-配置普通用户直接使用-Docker-命令"><a href="#3-2-配置普通用户直接使用-Docker-命令" class="headerlink" title="3.2. 配置普通用户直接使用 Docker 命令"></a>3.2. 配置普通用户直接使用 Docker 命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="3-3-安装-NVIDIA-支持"><a href="#3-3-安装-NVIDIA-支持" class="headerlink" title="3.3 安装 NVIDIA 支持"></a>3.3 安装 NVIDIA 支持</h3><blockquote><p>参考：微软 WSL 官方文档：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute">https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute</a></p></blockquote><p>通过运行以下命令为 NVIDIA 容器工具包设置稳定存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> $ID<span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-docker-keyring.gpg</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | sed <span class="string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-docker-keyring.gpg] https://#g&#x27;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-docker.list</span><br></pre></td></tr></table></figure><p>安装 NVIDIA 运行时包和依赖项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br></pre></td></tr></table></figure><h3 id="3-4-Docker-换源"><a href="#3-4-Docker-换源" class="headerlink" title="3.4 Docker 换源"></a>3.4 Docker 换源</h3><blockquote><p>参考：南京大学镜像</p></blockquote><p>修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>正常走到这一步应该是这样的</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934842593104adf16cae3f4c17cb676b650e7ab189a.png" alt="16934842593104adf16cae3f4c17cb676b650e7ab189a.png"></p><br/><p>添加一行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">,</span><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://docker.nju.edu.cn/&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348443613133713cbe8c88e63ec50c28abeb2a443e.png" alt="169348443613133713cbe8c88e63ec50c28abeb2a443e.png"></p><br/><p>按下 <code>ctrl+o</code> 再按下 <code>回车</code> 保存文件</p><p>再按下 <code>ctrl+x</code> 退出编辑器</p><p>检查一下结果，<code>cat /etc/docker/daemon.json</code></p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484492129119f80574646149e30461fa3f60246fc.png" alt="1693484492129119f80574646149e30461fa3f60246fc.png"></p><br/><p>重启 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="4-拉取-运行-Docker-镜像"><a href="#4-拉取-运行-Docker-镜像" class="headerlink" title="4. 拉取 &amp; 运行 Docker 镜像"></a>4. 拉取 &amp; 运行 Docker 镜像</h2><blockquote><p>这个全栈开发镜像是我自己构建的<br>Dockfile 在 GitHub 仓库这里 <a href="https://github.com/james-curtis/code-os-debian">https://github.com/james-curtis/code-os-debian</a><br>包含了</p><ul><li>zsh</li><li>ohmyzsh</li><li>powerlevel10k</li><li>中文语言包，gui 下微软雅黑字体支持</li><li>nodejs、nvm</li><li>openssh</li><li>c++</li><li>wslg 透传到 Windows 母机支持</li><li>Python、conda、pdm<br> temurin 8、11、17 jdk，jenv<br> docker cli<br> TensorFlow<br> pytorch<br> cuda 11.8、cudatoolkit</li></ul></blockquote><h3 id="4-1-拉取镜像"><a href="#4-1-拉取镜像" class="headerlink" title="4.1. 拉取镜像"></a>4.1. 拉取镜像</h3><p>由于镜像较大，建议单独拉取</p><ul><li>GPU 支持镜像（9.94 GB）：<code>jamescurtisfoxmail/code-os:latest-gpu</code></li><li>仅 CPU 支持镜像（2.77 GB）：<code>jamescurtisfoxmail/code-os:latest</code></li></ul><p>这里以 GPU 支持镜像为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jamescurtisfoxmail/code-os:latest-gpu</span><br></pre></td></tr></table></figure><h3 id="4-2-下载-compose-配置"><a href="#4-2-下载-compose-配置" class="headerlink" title="4.2. 下载 compose 配置"></a>4.2. 下载 compose 配置</h3><p>下载 Docker compose 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/james-curtis/code-os-debian.git</span><br></pre></td></tr></table></figure><h3 id="4-3-启动-Docker-compose"><a href="#4-3-启动-Docker-compose" class="headerlink" title="4.3. 启动 Docker compose"></a>4.3. 启动 Docker compose</h3><p>启动 docker compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code-os-debian/docker/wsl/</span><br><span class="line">bash run-gpu.sh</span><br></pre></td></tr></table></figure><p>可以看到已经启动成功了<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484526128a07ecfed1340e7d02b919f23da9378c3.png" alt="1693484526128a07ecfed1340e7d02b919f23da9378c3.png"></p><h2 id="5-检验成果"><a href="#5-检验成果" class="headerlink" title="5. 检验成果"></a>5. 检验成果</h2><p>先进入 Docker 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .gpu-envrc</span><br><span class="line">docker compose <span class="built_in">exec</span> os zsh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484539128fb39edd4cc37214c59b3cfd33a419119.png" alt="1693484539128fb39edd4cc37214c59b3cfd33a419119.png"></p><blockquote><p>如果字体乱码，应该是没有配置 powerlevel10k 的 <code>MesloLGS NF</code> 字体支持。</p><p>我使用的终端是 <code>tabby</code> 全平台支持    </p><p> <img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348454912865a864d5c148fa2d05c1ef3a0f4cd041.png" alt="169348454912865a864d5c148fa2d05c1ef3a0f4cd041.png"></p><p>在项目中有这几个字体，复制到 <code>c:\windows\fonts</code> 中即可</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484558129f5fa68a6adf756a7251eddb9cf098e08.png" alt="1693484558129f5fa68a6adf756a7251eddb9cf098e08.png"></p></blockquote><h3 id="5-1-检测-wslg-支持"><a href="#5-1-检测-wslg-支持" class="headerlink" title="5.1. 检测 wslg 支持"></a>5.1. 检测 wslg 支持</h3><p><code>xeyes</code> 会显示一个跟随鼠标的小眼睛</p><p><code>xclock</code> 是显示一个时钟</p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934845681289dc2fb94f291f99e9c92fb8286d1299e.png" alt="16934845681289dc2fb94f291f99e9c92fb8286d1299e.png"></p><h3 id="5-2-检测-NVIDIA-支持"><a href="#5-2-检测-NVIDIA-支持" class="headerlink" title="5.2. 检测 NVIDIA 支持"></a>5.2. 检测 NVIDIA 支持</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934845861283b76e4afea48293b2be2659a6259389e.png" alt="16934845861283b76e4afea48293b2be2659a6259389e.png"><br>我这里显示出了母机的 3060，说明 Docker 已经检测到这张显卡</p><h3 id="5-3-检测-TensorFlow支持"><a href="#5-3-检测-TensorFlow支持" class="headerlink" title="5.3. 检测 TensorFlow支持"></a>5.3. 检测 TensorFlow支持</h3><h4 id="5-3-1-TensorFlow-CPU"><a href="#5-3-1-TensorFlow-CPU" class="headerlink" title="5.3.1 TensorFlow CPU"></a>5.3.1 TensorFlow CPU</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484594155ce96a3ea90d8dd75ead62cb469ca6561.png" alt="1693484594155ce96a3ea90d8dd75ead62cb469ca6561.png"></p><p>打印出了张量</p><h4 id="5-3-2-TensorFlow-GPU"><a href="#5-3-2-TensorFlow-GPU" class="headerlink" title="5.3.2 TensorFlow GPU"></a>5.3.2 TensorFlow GPU</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.config.list_physical_devices(&#x27;GPU&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484602126dce0e8a22b6a116b0332392835e9010e.png" alt="1693484602126dce0e8a22b6a116b0332392835e9010e.png"></p><p>可以看到 TensorFlow 也检测到了显卡</p><h4 id="5-3-3-安装-kaggle-cli"><a href="#5-3-3-安装-kaggle-cli" class="headerlink" title="5.3.3 安装 kaggle cli"></a>5.3.3 安装 kaggle cli</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kaggle</span><br></pre></td></tr></table></figure><p>登录 kaggle 下载登录凭据，下载到 <code>~/.kaggle/kaggle.json</code></p><blockquote><p>官方教程 <a href="https://github.com/Kaggle/kaggle-api#api-credentials">https://github.com/Kaggle/kaggle-api#api-credentials</a></p></blockquote><p>设置权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 ~/.kaggle/kaggle.json</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484611126002ed3169310ad3a2442ea36491ac828.png" alt="1693484611126002ed3169310ad3a2442ea36491ac828.png"></p><h4 id="5-3-4-检测-TensorFlow-GPU-负载支持"><a href="#5-3-4-检测-TensorFlow-GPU-负载支持" class="headerlink" title="5.3.4 检测 TensorFlow GPU 负载支持"></a>5.3.4 检测 TensorFlow GPU 负载支持</h4><p>这里我们使用 kaggle cli 下载比赛中别人提交的代码进行测试，<a href="https://www.kaggle.com/code/hassanamin/tensorflow-mnist-gpu-tutorial">https://www.kaggle.com/code/hassanamin/tensorflow-mnist-gpu-tutorial</a></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846191270cd4adf205ebd8790e2b4bde76166a2b.png" alt="16934846191270cd4adf205ebd8790e2b4bde76166a2b.png"><br>复制下载命令</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484626126a7990a1e7044a3bb5a2054ec07eb7c8a.png" alt="1693484626126a7990a1e7044a3bb5a2054ec07eb7c8a.png"></p><p><strong>启动 openssh-server</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>输入密码 <code>linux</code> </p><blockquote><p>默认用户和密码都是 <code>linux</code></p><p><code>root</code> 用户名也是 <code>linux</code></p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846331264737dece647d08f3fd827674cb12bd7b.png" alt="16934846331264737dece647d08f3fd827674cb12bd7b.png"></p><p><strong>打开 vscode 进行远程连接</strong><br>需要先下载远程开发插件 <code>ms-vscode-remote.vscode-remote-extensionpack</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846411276154d21eb0a904f597d3fcb891ce5345.png" alt="16934846411276154d21eb0a904f597d3fcb891ce5345.png"></p><p>点击左下角的蓝标，会弹出命令列表，选择 <code>Connect to host</code></p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484662126f34f5829cb9c8ae47ed3eba65b933212.png" alt="1693484662126f34f5829cb9c8ae47ed3eba65b933212.png"></p><br/><p>直接连接 <code>localhost</code> 即可</p><br/><blockquote><p>为什么可以直接通过 <code>localhost</code> 连接有两个原因</p><ol><li>微软支持宿主机直接访问 WSL 的监听端口</li><li>docker compose 中设置的 <code>network</code> 类型是 <code>host</code>，也就是和 WSL 公用一个网络</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484685126844afa00df2604630c9f9dc7df47533a.png" alt="1693484685126844afa00df2604630c9f9dc7df47533a.png"></p><p>点击右侧的 <code>Connect</code> </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846901241578876302c28e81b0e1922330432b6f.png" alt="16934846901241578876302c28e81b0e1922330432b6f.png"><br>会提示选择平台和输入密码</p><p>完成之后即可进行远程开发</p><p><strong>进入刚刚 kaggle 的项目</strong></p><p>这里由于的刚刚我下载的目录是 <code>/tmp/kaggle/tf</code> 所以这里我需要打开这个目录</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484697124b68c65ea075ddb3ca0f4bae8f94dfaa2.png" alt="1693484697124b68c65ea075ddb3ca0f4bae8f94dfaa2.png"><br><strong>安装插件</strong><br>需要安装的插件有</p><ul><li>donjayamanne.python-extension-pack</li><li>donjayamanne.python-extension-pack</li></ul><p>安装完成之后需要加载窗口</p><p><strong>选择运行环境</strong><br>选择 conda Python3.9 作为运行环境<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847051258ce5bc169a1945be5f4a05805a73f026.png" alt="16934847051258ce5bc169a1945be5f4a05805a73f026.png"><br>逐个单元格运行试试效果</p><p>可以看到检测到 GPU 了<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484713124268cedbf858fe22cf23a9d8a0a0b15c6.png" alt="1693484713124268cedbf858fe22cf23a9d8a0a0b15c6.png"><br>可以看到成功调用宿主机显卡<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847201250b779cecd0e73850fd2689ddf9d169cc.png" alt="16934847201250b779cecd0e73850fd2689ddf9d169cc.png"><br>不过似乎没有使得显卡满载</p><h3 id="5-4-检测-pytorch-cuda-支持"><a href="#5-4-检测-pytorch-cuda-支持" class="headerlink" title="5.4. 检测 pytorch cuda 支持"></a>5.4. 检测 pytorch cuda 支持</h3><p>在 WSL 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import torch;print(torch.cuda.is_available());&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348472712535ea23e934d88048e2c6c8dab35c3aea.png" alt="169348472712535ea23e934d88048e2c6c8dab35c3aea.png"></p><blockquote><p>这里我还没有换 vscode 的终端字体，所以乱码了，忽略即可</p></blockquote><h4 id="5-4-1-检测-pytorch-GPU-负载支持"><a href="#5-4-1-检测-pytorch-GPU-负载支持" class="headerlink" title="5.4.1 检测 pytorch GPU 负载支持"></a>5.4.1 检测 pytorch GPU 负载支持</h4><p>对于 pytorch，这里使用 <a href="https://www.kaggle.com/code/lyhue1991/pytorch-gpu-examples%EF%BC%8C%E4%BD%9C%E4%B8%BA%E6%B5%8B%E8%AF%95">https://www.kaggle.com/code/lyhue1991/pytorch-gpu-examples，作为测试</a> demo</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484734124b153e92b893a5c208c7eb054b3154899.png" alt="1693484734124b153e92b893a5c208c7eb054b3154899.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484743125e0d3a43375a635fe2a488d29b8a0c0ea.png" alt="1693484743125e0d3a43375a635fe2a488d29b8a0c0ea.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348475112489327abd58292ac9fc75036ecd4b132e.png" alt="169348475112489327abd58292ac9fc75036ecd4b132e.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348476212373dcb403f84c118c1e16e48e6bf352ad.png" alt="169348476212373dcb403f84c118c1e16e48e6bf352ad.png"><br>可以看到成功调度 GPU</p><h3 id="6-检查-nodejs"><a href="#6-检查-nodejs" class="headerlink" title="6. 检查 nodejs"></a>6. 检查 nodejs</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847731247a5f0ca36fe146f3fa6985adb40d9a4c.png" alt="16934847731247a5f0ca36fe146f3fa6985adb40d9a4c.png"></p><h3 id="7-检查-java"><a href="#7-检查-java" class="headerlink" title="7. 检查 java"></a>7. 检查 java</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line">jenv versions</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484779123aaba208a8173522f6b82e93ac2a64cb9.png" alt="1693484779123aaba208a8173522f6b82e93ac2a64cb9.png"></p><h3 id="8-检查-c"><a href="#8-检查-c" class="headerlink" title="8. 检查 c++"></a>8. 检查 c++</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -v</span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348478612341eb734dbd75537dc43fba98abb4c225.png" alt="169348478612341eb734dbd75537dc43fba98abb4c225.png"></p><h3 id="9-容器卷"><a href="#9-容器卷" class="headerlink" title="9. 容器卷"></a>9. 容器卷</h3><p>在 Dockerfile 中有写到</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =========== 配置 容器卷 =============</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [ <span class="string">&quot;/mnt/workspace&quot;</span>, <span class="string">&quot;/mnt/data&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>这两个目录都是持久化的，也就是 docker 容器销毁之后，只有这两个目录下的文件不会清理（重启不影响）</p><p>其中 <code>/mnt/workspace</code> 是映射到 WSL 中的，IO 性能比较差</p><p><code>/mnt/data</code> 是没有映射的容器卷，IO 性能较好，建议项目都放到该目录下</p><p>至于 <code>/home/linux</code> 用户目录下的文件可以自己创建并映射容器卷</p><h2 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6. 参考文档"></a>6. 参考文档</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></li><li><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/hello-world/"/>
      <url>/2023/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>debian 怎么修改 man help 为中文，wsl 怎么修改显示语言为中文</title>
      <link href="/2023/how-to-change-man-help-to-chinese-in-debian-how-to-change-the-display-language-of-wsl-to-chinese/"/>
      <url>/2023/how-to-change-man-help-to-chinese-in-debian-how-to-change-the-display-language-of-wsl-to-chinese/</url>
      
        <content type="html"><![CDATA[<p>在Debian 12系统中，要将系统语言和Man帮助手册设置为中文，需要执行以下步骤：</p><ol><li><p>安装中文语言包：<br>首先，更新软件包列表并安装中文语言包。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install locales</span><br></pre></td></tr></table></figure></li><li><p>配置本地化设置：<br>安装完成后，使用以下命令重新配置本地化设置，并选择中文语言包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>在选择界面中，选中<code>zh_CN.UTF-8</code>（中文简体）和其他你希望支持的语言设置。然后按空格键选中，使用方向键移动到”OK”并按下回车键。</p></li><li><p>设置系统默认语言：<br>在终端中编辑你的bash配置文件（如<code>.bashrc</code>或<code>.bash_profile</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文件末尾添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>按下 <code>Ctrl+X</code>，然后输入 <code>Y</code> 保存更改并退出编辑器。</p></li><li><p>使设置生效：<br>输入以下命令使配置文件的更改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>安装中文Man帮助手册：<br>安装中文Man帮助手册的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install manpages-zh</span><br></pre></td></tr></table></figure></li><li><p>查看中文Man帮助手册：<br>现在，你可以使用<code>man</code>命令查看中文的Man帮助手册了。例如，要查看<code>ls</code>命令的中文Man帮助手册，可以输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>确保系统和应用程序现在以中文显示，并正确解析和处理中文字符。</p></li></ol><hr><p>如果想默认是英文，在需要时候切换到中文的话，可以把设置环境变量的两条语句写到其他文件比如 <code>.zhcnrc</code> 在需要使用中文的时候，使用 <code>source ~/.zhcnrc</code> 命令即可切换</p><p>要判断是否切换成功，可以使用 <code>locales</code> 命令查看</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim怎么使用，vim使用教程，vimtutor怎么切换中文 汉化</title>
      <link href="/2023/how-to-use-vim-vim-usage-tutorial-how-to-switch-vimtutor-to-chinese-and-chinese/"/>
      <url>/2023/how-to-use-vim-vim-usage-tutorial-how-to-switch-vimtutor-to-chinese-and-chinese/</url>
      
        <content type="html"><![CDATA[<h1 id="vim怎么使用，vim使用教程，vimtutor怎么切换中文-汉化"><a href="#vim怎么使用，vim使用教程，vimtutor怎么切换中文-汉化" class="headerlink" title="vim怎么使用，vim使用教程，vimtutor怎么切换中文 汉化"></a>vim怎么使用，vim使用教程，vimtutor怎么切换中文 汉化</h1><h1 id="vim-使用"><a href="#vim-使用" class="headerlink" title="vim 使用"></a>vim 使用</h1><blockquote><p>在安装了 vim 的 unix 系统下可以使用 <code>vimtutor zh_cn</code> 开启下面的教程</p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">===============================================================================</span><br><span class="line">=      欢     迎     阅     读   《 V I M  教  程 》   ——      版本 1.7       =</span><br><span class="line">===============================================================================</span><br><span class="line"></span><br><span class="line">     Vim 是一个具有很多命令的功能非常强大的编辑器。限于篇幅，在本教程当中</span><br><span class="line">     就不详细介绍了。本教程的设计目标是讲述一些必要的基本命令，而掌握好这</span><br><span class="line">     些命令，您就能够很容易地将 Vim 当作一个通用编辑器来使用了。</span><br><span class="line"></span><br><span class="line">     完成本教程的内容大约需要25-30分钟，取决于您训练的时间。</span><br><span class="line"></span><br><span class="line">     注意：</span><br><span class="line">     每一节的命令操作将会更改本文。推荐您复制本文的一个副本，然后在副本上</span><br><span class="line">     进行训练(如果您是通过&quot;vimtutor&quot;来启动教程的，那么本文就已经是副本了)。</span><br><span class="line"></span><br><span class="line">     切记一点：本教程的设计思路是在使用中进行学习的。也就是说，您需要通过</span><br><span class="line">     执行命令来学习它们本身的正确用法。如果您只是阅读而不操作，那么您可能</span><br><span class="line">     会很快遗忘这些命令的！</span><br><span class="line"></span><br><span class="line">     好了，现在请确定您的Shift-Lock(大小写锁定键)还没有按下，然后按键盘上</span><br><span class="line">     的字母键 j 足够多次来移动光标，直到第一节的内容能够完全充满屏幕。</span><br></pre></td></tr></table></figure><h2 id="第一讲第一节：移动光标"><a href="#第一讲第一节：移动光标" class="headerlink" title="第一讲第一节：移动光标"></a>第一讲第一节：移动光标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">             ** 要移动光标，请依照说明分别按下 h、j、k、l 键。 **</span><br><span class="line"></span><br><span class="line">             ^</span><br><span class="line">             k              提示： h 的键位于左边，每次按下就会向左移动。</span><br><span class="line">       &lt; h       l &gt;               l 的键位于右边，每次按下就会向右移动。</span><br><span class="line">             j                     j 键看起来很象一支尖端方向朝下的箭头。</span><br><span class="line">             v</span><br><span class="line"></span><br><span class="line">  1. 请随意在屏幕内移动光标，直至您觉得舒服为止。</span><br><span class="line"></span><br><span class="line">  2. 按下下行键(j)，直到出现光标重复下行。</span><br><span class="line"></span><br><span class="line">---&gt; 现在您应该已经学会如何移动到下一讲吧。</span><br><span class="line"></span><br><span class="line">  3. 现在请使用下行键，将光标移动到第一讲第二节。</span><br><span class="line"></span><br><span class="line">提示：如果您不敢确定您所按下的字母，请按下&lt;ESC&gt;键回到正常(Normal)模式。</span><br><span class="line">      然后再次从键盘输入您想要的命令。</span><br><span class="line"></span><br><span class="line">提示：光标键应当也能正常工作的。但是使用hjkl键，在习惯之后您就能够更快</span><br><span class="line">      地在屏幕内四处移动光标。真的是这样！</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>hjkl</code>并不是特定单词的缩写。这些字符<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>仅仅是为了方便在Vim编辑器中表示上下左右方向而选定的按键。它们没有特定的含义或单词背后的缩写。</p><h2 id="第一讲第二节：VIM的进入和退出"><a href="#第一讲第二节：VIM的进入和退出" class="headerlink" title="第一讲第二节：VIM的进入和退出"></a>第一讲第二节：VIM的进入和退出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  !! 特别提示：敬请阅读本一节的完整内容，然后再执行以下所讲解的命令。</span><br><span class="line"></span><br><span class="line">  1. 按&lt;ESC&gt;键(这是为了确保您处在正常模式)。</span><br><span class="line"></span><br><span class="line">  2. 然后输入：                 :q! &lt;回车&gt;</span><br><span class="line">     这种方式的退出编辑器会丢弃您进入编辑器以来所做的改动。</span><br><span class="line"></span><br><span class="line">  3. 如果您看到了命令行提示符，请输入能够带您回到本教程的命令，那就是：</span><br><span class="line">     vimtutor &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">  4. 如果您自信已经牢牢记住了这些步骤的话，请从步骤1执行到步骤3退出，然</span><br><span class="line">     后再次进入编辑器。</span><br><span class="line"></span><br><span class="line">提示： :q! &lt;回车&gt; 会丢弃您所做的任何改动。几讲之后您将学会如何保存改动到文件。</span><br><span class="line"></span><br><span class="line">  5. 将光标下移到第一讲第三节。</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>q</code> 是 <code>quit</code>（退出）单词缩写</p><h2 id="第一讲第三节：文本编辑之删除"><a href="#第一讲第三节：文本编辑之删除" class="headerlink" title="第一讲第三节：文本编辑之删除"></a>第一讲第三节：文本编辑之删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   ** 在正常(Normal)模式下，可以按下 x 键来删除光标所在位置的字符。**</span><br><span class="line"></span><br><span class="line">  1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。</span><br><span class="line"></span><br><span class="line">  2. 为了修正输入错误，请将光标移至准备删除的字符的位置处。</span><br><span class="line"></span><br><span class="line">  3. 然后按下 x 键将错误字符删除掉。</span><br><span class="line"></span><br><span class="line">  4. 重复步骤2到步骤4，直到句子修正为止。</span><br><span class="line"></span><br><span class="line">---&gt; The ccow jumpedd ovverr thhe mooon.</span><br><span class="line"></span><br><span class="line">  5. 好了，该行已经修正了，下面是第一讲第四节。</span><br><span class="line"></span><br><span class="line">特别提示：在浏览本教程时，不要强行记忆。记住一点：在使用中学习。</span><br></pre></td></tr></table></figure><h2 id="第一讲第四节：文本编辑之插入"><a href="#第一讲第四节：文本编辑之插入" class="headerlink" title="第一讲第四节：文本编辑之插入"></a>第一讲第四节：文本编辑之插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">         ** 在正常模式下，可以按下 i 键来插入文本。**</span><br><span class="line"></span><br><span class="line">  1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。</span><br><span class="line"></span><br><span class="line">  2. 为了使得第一行内容雷同于第二行，请将光标移至文本第一个准备插入字符</span><br><span class="line">     的位置。</span><br><span class="line"></span><br><span class="line">  3. 然后按下 i 键，接着输入必要的文本字符。</span><br><span class="line"></span><br><span class="line">  4. 每个错误修正完毕后，请按下 &lt;ESC&gt; 键返回正常模式。</span><br><span class="line">     重复步骤2至步骤4以便修正句子。</span><br><span class="line"></span><br><span class="line">---&gt; There is text misng this .</span><br><span class="line">---&gt; There is some text missing from this line.</span><br><span class="line"></span><br><span class="line">  5. 如果您对文本插入操作已经很满意，请接着阅读下面的第一讲第五节。</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>i</code> 是 <code>insert</code>（插入）单词的缩写</p><p>I键（小写）：在当前光标所在字符的前面进入插入模式。</p><p>按下I键后，光标会保持在当前字符的位置，然后你可以开始输入新的文本。这对于在行的任何位置开始添加内容很有用。</p><h2 id="第一讲第五节：文本编辑之添加"><a href="#第一讲第五节：文本编辑之添加" class="headerlink" title="第一讲第五节：文本编辑之添加"></a>第一讲第五节：文本编辑之添加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                        ** 按 A 键以添加文本。 **</span><br><span class="line"></span><br><span class="line">  1. 移动光标到下面第一个标记有 ---&gt; 的一行。</span><br><span class="line">     光标放在那一行的哪个字符上并不重要。</span><br><span class="line"></span><br><span class="line">  2. 按 A 键输入必要的添加内容。</span><br><span class="line"></span><br><span class="line">  3. 文本添加完毕后，按 &lt;ESC&gt; 键回到正常模式。</span><br><span class="line"></span><br><span class="line">  4. 移动光标到下面第二个标记有 ---&gt; 的一行。重复步骤2和步骤3以改正这个句子。</span><br><span class="line"></span><br><span class="line">---&gt; There is some text missing from th</span><br><span class="line">     There is some text missing from this line.</span><br><span class="line">---&gt; There is also some text miss</span><br><span class="line">     There is also some text missing here.</span><br><span class="line"></span><br><span class="line">  5. 当您对添加文本操作感到满意时，请继续学习第一讲第六节。</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><code>a</code> 是 <code>append</code>（添加）单词的缩写</p><p>A键（小写）：在当前光标所在字符的后面进入插入模式。</p><p>按下A键后，光标会移动到当前行的末尾，然后你可以开始输入新的文本。这对于在行的末尾添加内容很方便。</p><h2 id="第一讲第六节：编辑文件"><a href="#第一讲第六节：编辑文件" class="headerlink" title="第一讲第六节：编辑文件"></a>第一讲第六节：编辑文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">                  ** 使用 :wq 以保存文件并退出。 **</span><br><span class="line"></span><br><span class="line">特别提示：在执行以下步骤之前，请先读完整个小节！</span><br><span class="line"></span><br><span class="line">1. 如您在第一讲第二节中所做的那样退出本教程： :q!</span><br><span class="line">   或者，如果您可以访问另一个终端，请在那里执行以下操作。</span><br><span class="line"></span><br><span class="line">2. 在 shell 的提示符下输入命令： vim tutor &lt;回车&gt;</span><br><span class="line">   &#x27;vim&#x27;是启动 Vim 编辑器的命令，&#x27;tutor&#x27;是您希望编辑的文件的名字。</span><br><span class="line">   请使用一个可以改动的文件。</span><br><span class="line"></span><br><span class="line">3. 使用您在前面的教程中学到的命令插入删除文本。</span><br><span class="line"></span><br><span class="line">4. 保存改动过的文件并退出 Vim，按这些键： :wq  &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">5. 如果您在步骤1中已经退出 vimtutor，请重启 vimtutor 移动到下面的小结一节。</span><br><span class="line"></span><br><span class="line">6. 阅读完以上步骤，弄懂它们的意义，然后在实践中进行练习。</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br><code>:wq</code> 中的 <code>w</code> 是 <code>write</code>（写入）的缩写</p><h2 id="第一讲小结"><a href="#第一讲小结" class="headerlink" title="第一讲小结"></a>第一讲小结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。</span><br><span class="line">         h (左移)       j (下行)       k (上行)     l (右移)</span><br><span class="line"></span><br><span class="line">  2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</span><br><span class="line"></span><br><span class="line">  3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt;   :q!   &lt;回车&gt; 放弃所有改动。</span><br><span class="line">                      或者输入 &lt;ESC&gt;   :wq   &lt;回车&gt; 保存改动。</span><br><span class="line"></span><br><span class="line">  4. 在正常模式下删除光标所在位置的字符，请按： x</span><br><span class="line"></span><br><span class="line">  5. 欲插入或添加文本，请输入：</span><br><span class="line"></span><br><span class="line">         i   输入欲插入文本   &lt;ESC&gt;             在光标前插入文本</span><br><span class="line">         A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本</span><br><span class="line"></span><br><span class="line">特别提示：按下 &lt;ESC&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整</span><br><span class="line">的命令。</span><br><span class="line"></span><br><span class="line">好了，第一讲到此结束。下面接下来继续第二讲的内容。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>替换linux的文泉驿正黑fonts-wqy-zenhei字体 替换linux默认中文字体</title>
      <link href="/2023/replace-the-linux-wenquanyi-zhenghei-fonts-wqy-zenhei-font-and-replace-the-linux-default-chinese-font/"/>
      <url>/2023/replace-the-linux-wenquanyi-zhenghei-fonts-wqy-zenhei-font-and-replace-the-linux-default-chinese-font/</url>
      
        <content type="html"><![CDATA[<p>WSL 怎么替换 linux 的文泉驿正黑 fonts-wqy-zenhei 字体<br>WSL 怎么替换 linux 默认中文字体</p><p>在 wsl 中默认是没有 gnome 界面或者 xface 的，但是我需要使用 wsl 开发 electron 或者使用 chrome 浏览器。这个时候系统就会调用默认的系统字体了。</p><p>我使用的是 debian12，如果默认没有安装其他字体的话，浏览器看中文页面就是方框乱码。这时候我们可以安装文泉驿正黑中文字体来解决这个问题。</p><p>但是这个字体也太 nm 丑了吧。就想把微软雅黑或者苹方放进来。百度谷歌教程都翻烂了，几乎没找到替换文泉驿正黑字体 或者在命令行下替换默认字体 或者修改文字优先级的教程。于是把 chat 老师也问烂了，终于找到了答案，那就是使用这个文件 <code>/etc/fonts/local.conf</code>，居然 debian 官网连这个文件的说明都没有，只有对 <code>fonts.conf</code> 的说明。不过 arch linux 官方对 <code>local.conf</code> 这个文件有说明，但是没有这个 xml 定义的说明。</p><h1 id="手动安装字体"><a href="#手动安装字体" class="headerlink" title="手动安装字体"></a>手动安装字体</h1><p>手动安装字体，所有ttf、ttc或者otf等格式的字体都可以用这种方式。</p><p>找到 <code>/usr/share/fonts</code> 目录，新建一个文件夹，比如说 <code>/usr/share/fonts/custom</code> 这样我知道这一块的字体是我自己添加的。</p><p>然后把微软雅黑或者苹方字体拷贝进去。苹方字体建议使用 <code>19.0d4e2</code> 这个版本的字体。</p><blockquote><p>19.0d4e2 版本的苹方可以直接被 Windows 识别，估计是华康在导出文件的时候忘了设置什么东西。</p></blockquote><h1 id="修改字体优先级"><a href="#修改字体优先级" class="headerlink" title="修改字体优先级"></a>修改字体优先级</h1><ol><li>打开终端，并使用文本编辑器（例如 nano 或 vim）创建一个新的 Fontconfig 配置文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/fonts/local.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>在新建的配置文件中添加以下内容，将微软雅黑字体的优先级设置为较高：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">fontconfig</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;urn:fontconfig:fonts.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Set preferable fonts for non-Latin<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>system-ui<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">family</span>&gt;</span>Microsoft YaHei UI<span class="tag">&lt;/<span class="name">family</span>&gt;</span><span class="comment">&lt;!-- han (zh-cn) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>问题来了，我怎么知道这个配置文件是这样写的。我也不知道，我只是复制了 <code>/etc/fonts/fonts.conf</code> 然后把 <code>prefer</code> 中的字段都删完，只留一个，然后全部都替换成 <code>Microsoft YaHei UI</code></p><p>保存退出</p><h1 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h1><p>在终端中执行以下命令以更新字体缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936350960641693635095476.png" alt="16936350960641693635095476.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023软件工程中各种图在现代企业级开发中的使用频率</title>
      <link href="/2023/2023-frequency-of-use-of-various-diagrams-in-software-engineering-in-modern-enterprise-level-development/"/>
      <url>/2023/2023-frequency-of-use-of-various-diagrams-in-software-engineering-in-modern-enterprise-level-development/</url>
      
        <content type="html"><![CDATA[<h1 id="2023软件工程中各种图在现代企业级开发中的使用频率"><a href="#2023软件工程中各种图在现代企业级开发中的使用频率" class="headerlink" title="2023软件工程中各种图在现代企业级开发中的使用频率"></a>2023软件工程中各种图在现代企业级开发中的使用频率</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936351800641693635179264.png" alt="16936351800641693635179264.png"></p><h2 id="系统流程图-✔"><a href="#系统流程图-✔" class="headerlink" title="系统流程图 ✔"></a>系统流程图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936351990621693635198471.png" alt="16936351990621693635198471.png"></p><h2 id="数据流图-×不常用"><a href="#数据流图-×不常用" class="headerlink" title="数据流图  ×不常用"></a>数据流图  ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352180661693635217853.png" alt="16936352180661693635217853.png"></p><h2 id="ER图-✔"><a href="#ER图-✔" class="headerlink" title="ER图 ✔"></a>ER图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352380641693635237871.png" alt="16936352380641693635237871.png"></p><h2 id="状态转换图-✔"><a href="#状态转换图-✔" class="headerlink" title="状态转换图 ✔"></a>状态转换图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352480751693635247278.png" alt="16936352480751693635247278.png"></p><h2 id="Warnier图-×不常用"><a href="#Warnier图-×不常用" class="headerlink" title="Warnier图 ×不常用"></a>Warnier图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352590741693635258629.png" alt="16936352590741693635258629.png"></p><h2 id="IPO图-×不常用"><a href="#IPO图-×不常用" class="headerlink" title="IPO图 ×不常用"></a>IPO图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352820601693635281639.png" alt="16936352820601693635281639.png"></p><h2 id="Petri网-×不常用"><a href="#Petri网-×不常用" class="headerlink" title="Petri网 ×不常用"></a>Petri网 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936352920661693635291966.png" alt="16936352920661693635291966.png"></p><h2 id="层次方框图-×不常用"><a href="#层次方框图-×不常用" class="headerlink" title="层次方框图 ×不常用"></a>层次方框图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353020611693635301590.png" alt="16936353020611693635301590.png"></p><h2 id="层次图-a-k-a-H图-✔"><a href="#层次图-a-k-a-H图-✔" class="headerlink" title="层次图 a.k.a. H图 ✔"></a>层次图 a.k.a. H图 ✔</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353250741693635324362.png" alt="16936353250741693635324362.png"></p><blockquote><p>1,层次图描绘软件的层次结构.层层次方框图描绘的是数据结构。</p><p>2,层次图的方框表示模块或子模块。层次方框图的方框表示数据结构整体或其子集。</p><p>3,层次图的连线表示调用关系，层次方框图表示组成关系。</p></blockquote><h2 id="结构图-×不常用"><a href="#结构图-×不常用" class="headerlink" title="结构图 ×不常用"></a>结构图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353450681693635344883.png" alt="16936353450681693635344883.png"></p><h2 id="HIPO图-×不常用"><a href="#HIPO图-×不常用" class="headerlink" title="HIPO图 ×不常用"></a>HIPO图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936353875351693635386586.png" alt="16936353875351693635386586.png"></p><blockquote><p>HIPO图是美国IBM公司发明的“层次图加输入&#x2F;处理&#x2F;输出图”的英文缩写。为了能使HIPO图具有可追踪性，在H图（层次图）里除了最顶层的方框之外，每个方框都加了编号。编号规则和第2.4节中介绍的数据流图的编号规则相同，例如，图5.3加了编号后得到图5,4。</p><p>和H图中每个方框相对应，应该有一张IPO图描绘这个方框代表的模块的处理过程。第3.7节已经详细介绍过IPO图，此处不再重复。但是，有一点应该着重指出，那就是HIPO图中的每张IPO图内都应该明显地标出它所描绘的模块在H图中的编号，以便追踪了解这个模块在软件结构中的位置。</p></blockquote><h2 id="盒图-a-k-a-N-S图-×不常用"><a href="#盒图-a-k-a-N-S图-×不常用" class="headerlink" title="盒图 a.k.a. N-S图 ×不常用"></a>盒图 a.k.a. N-S图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936354075351693635406755.png" alt="16936354075351693635406755.png"></p><h2 id="PAD图-×不常用"><a href="#PAD图-×不常用" class="headerlink" title="PAD图 ×不常用"></a>PAD图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936354215431693635421533.png" alt="16936354215431693635421533.png"></p><h2 id="Jackson图-×不常用"><a href="#Jackson图-×不常用" class="headerlink" title="Jackson图 ×不常用"></a>Jackson图 ×不常用</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936354365351693635436128.png" alt="16936354365351693635436128.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://juejin.cn/post/7129822677748940813#heading-8">https://juejin.cn/post/7129822677748940813#heading-8</a></li><li><a href="https://www.liuchuo.net/archives/1848">https://www.liuchuo.net/archives/1848</a></li><li><a href="https://www.kancloud.cn/netcon/t4/241479">https://www.kancloud.cn/netcon/t4/241479</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>educoder头歌强制显示右侧目录按钮，方便查看测试代码，便于怎么在本地自测头歌代码？</title>
      <link href="/2023/the-educoder-touge-is-forced-to-display-the-directory-button-on-the-right-which-is-convenient-for-viewing-the-test-code-and-how-to-test-the-touge-code-locally/"/>
      <url>/2023/the-educoder-touge-is-forced-to-display-the-directory-button-on-the-right-which-is-convenient-for-viewing-the-test-code-and-how-to-test-the-touge-code-locally/</url>
      
        <content type="html"><![CDATA[<h1 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936355635371693635562880.png" alt="16936355635371693635562880.png"></p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>F12打开控制台<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936355855361693635584793.png" alt="16936355855361693635584793.png"></p></li><li><p>ctrl+shift+f全局搜索 <code>_ref2.code_hidden</code><br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936355945351693635594504.png" alt="16936355945351693635594504.png"></p></li><li><p>在左侧找到 <code>覆盖</code> 按钮，<code>选择替代文件夹</code>，并允许权限<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356145391693635614527.png" alt="16936356145391693635614527.png"></p></li><li><p>在编辑框内右键，选择<code>保存以备替代</code><br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356255361693635625063.png" alt="16936356255361693635625063.png"></p></li><li><p>把 <code>code_hidden</code> 的值修改为 <code>false</code>，然后按下 <code>ctrl+s</code> 保存<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356355351693635634766.png" alt="16936356355351693635634766.png"></p></li><li><p>保持控制台不关闭，刷新页面，enjoying。接下来就可以直接根据测试代码在本地自测了</p></li></ol><h1 id="方法思路"><a href="#方法思路" class="headerlink" title="方法思路"></a>方法思路</h1><p>我是怎么找到这个方法的呢，且听我慢慢道来。</p><ol><li><p>首先的找到一个不显示文件夹按钮的页面和一个可以正常显示文件夹按钮的页面</p></li><li><p>打开控制台，定位到文件夹按钮这个元素<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356495351693635649038.png" alt="16936356495351693635649038.png"></p></li><li><p>发现有个明显的图标名字，这是一个很明显的特征，代码里面肯定会有写。于是全局搜索一下，看看这块代码附件的上下文怎么写的（只要看js就好）<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356645411693635664482.png" alt="16936356645411693635664482.png"></p></li><li><p>解码一下9528行的Unicode，结果是<code>显示目录</code>，说明这一块就是渲染代码<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356765401693635676223.png" alt="16936356765401693635676223.png"></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code_hidden ? <span class="literal">null</span> : <span class="comment">/*#__PURE__*/</span>(<span class="number">0</span>,jsx_runtime.<span class="property">jsx</span>)(<span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;\u663E\u793A\u76EE\u5F55&quot;</span>,</span><br><span class="line">          <span class="attr">onClick</span>: onShowDir,</span><br><span class="line">          <span class="attr">children</span>: <span class="comment">/*#__PURE__*/</span>(<span class="number">0</span>,jsx_runtime.<span class="property">jsx</span>)(<span class="string">&quot;i&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">className</span>: <span class="string">&quot;iconfont icon-wenjian &quot;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>从代码中可以看得出，这个按钮是否显示取决于 <code>code_hidden</code> 变量的值</p><ol start="5"><li>向上搜索 <code>code_hidden </code><br>发现变量是在这里定义的，只要把这里写死为<code>true</code>就好了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">function</span> <span class="title function_">action_bar</span>(<span class="params">_ref2</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> loading = _ref2.<span class="property">loading</span>,</span><br><span class="line">    lastedUpdateTime = _ref2.<span class="property">lastedUpdateTime</span>,</span><br><span class="line">    moveY = _ref2.<span class="property">moveY</span>,</span><br><span class="line">    code_hidden = _ref2.<span class="property">code_hidden</span>,</span><br><span class="line">    hide_code = _ref2.<span class="property">hide_code</span>,</span><br><span class="line">    gameStatus = _ref2.<span class="property">gameStatus</span>,</span><br><span class="line">    isEditPath = _ref2.<span class="property">isEditPath</span>,</span><br><span class="line">    isNotice = _ref2.<span class="property">isNotice</span>,</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936356935391693635693364.png" alt="16936356935391693635693364.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>rke2集群安装完成之后使用kubectl反应很慢</title>
      <link href="/2023/after-the-rke2-cluster-is-installed-kubectl-responds-very-slowly/"/>
      <url>/2023/after-the-rke2-cluster-is-installed-kubectl-responds-very-slowly/</url>
      
        <content type="html"><![CDATA[<p>从头开始检查</p><h1 id="检查kubectl请求"><a href="#检查kubectl请求" class="headerlink" title="检查kubectl请求"></a>检查kubectl请求</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@rke2-3:~# kubectl get nodes -v 9</span><br><span class="line">I0317 12:03:12.948874   50681 loader.go:372] Config loaded from file:  /root/.kube/config</span><br><span class="line">I0317 12:03:12.966771   50681 round_trippers.go:435] curl -v -XGET  -H &quot;User-Agent: kubectl/v1.22.17+rke2r1 (linux/amd64) kubernetes/a7736ea&quot; -H &quot;Accept: application/json, */*&quot; &#x27;https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s&#x27;</span><br><span class="line">I0317 12:03:17.976244   50681 round_trippers.go:454] GET https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s 503 Service Unavailable in 5009 milliseconds</span><br><span class="line">I0317 12:03:17.976302   50681 round_trippers.go:460] Response Headers:</span><br><span class="line">I0317 12:03:17.976310   50681 round_trippers.go:463]     Date: Fri, 17 Mar 2023 04:03:17 GMT</span><br><span class="line">I0317 12:03:17.976314   50681 round_trippers.go:463]     Audit-Id: 6161f664-ef9b-4c43-bc8a-7a9bc4aadc4d</span><br><span class="line">I0317 12:03:17.976318   50681 round_trippers.go:463]     Cache-Control: no-cache, private</span><br><span class="line">I0317 12:03:17.976322   50681 round_trippers.go:463]     Content-Type: text/plain; charset=utf-8</span><br><span class="line">I0317 12:03:17.976326   50681 round_trippers.go:463]     X-Content-Type-Options: nosniff</span><br><span class="line">I0317 12:03:17.976330   50681 round_trippers.go:463]     X-Kubernetes-Pf-Flowschema-Uid: 18ac6688-4bae-4287-bb86-d3e59b300a3b</span><br><span class="line">I0317 12:03:17.976334   50681 round_trippers.go:463]     X-Kubernetes-Pf-Prioritylevel-Uid: 8030cae1-7f3d-431a-90c4-09f0ba76b7aa</span><br><span class="line">I0317 12:03:17.976338   50681 round_trippers.go:463]     Content-Length: 68</span><br><span class="line">I0317 12:03:17.979957   50681 request.go:1197] Response Body: error trying to reach service: dial tcp 10.42.0.3:8443: i/o timeout</span><br><span class="line">I0317 12:03:17.983359   50681 request.go:1388] body was not decodable (unable to check for Status): yaml: mapping values are not allowed in this context</span><br><span class="line">I0317 12:03:17.983405   50681 cached_discovery.go:78] skipped caching discovery info due to the server is currently unable to handle the request</span><br><span class="line">I0317 12:03:17.984416   50681 round_trippers.go:435] curl -v -XGET  -H &quot;Accept: application/json, */*&quot; -H &quot;User-Agent: kubectl/v1.22.17+rke2r1 (linux/amd64) kubernetes/a7736ea&quot; &#x27;https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s&#x27;</span><br></pre></td></tr></table></figure><p>发现超时在这一个请求 <code>https://127.0.0.1:6443/apis/metrics.k8s.io/v1beta1?timeout=32s 503 Service Unavailable in 5009 milliseconds</code></p><h1 id="检查-kube-config"><a href="#检查-kube-config" class="headerlink" title="检查.kube&#x2F;config"></a>检查.kube&#x2F;config</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@rke2-1:~/.kube# cat config </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: xxx</span><br><span class="line">    server: https://127.0.0.1:6443</span><br><span class="line">  name: default</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: default</span><br><span class="line">    user: default</span><br><span class="line">  name: default</span><br><span class="line">current-context: default</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: default</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: xxx</span><br><span class="line">    client-key-data: xxx</span><br></pre></td></tr></table></figure><p>在除了第一个server节点上运行kubectl都很卡，检查kubectl的配置文件，发现请求的server是127.0.0.1</p><p>于是修改为负载均衡ip或者域名即可解决问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load_balancer_addr=rancher2.ent.top</span><br><span class="line">sed -i.bak &quot;s/127.0.0.1:6443/$&#123;load_balancer_addr&#125;:6443/&quot; /etc/rancher/rke2/rke2.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows server禁止返回ipv6的dns解析</title>
      <link href="/2023/windows-server-prohibits-returning-ipv6-dns-resolution/"/>
      <url>/2023/windows-server-prohibits-returning-ipv6-dns-resolution/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有什么方法可以防止事物在 DNS 服务器上注册它们的 AAAA 记录吗？我已经尝试通过在网络堆栈中取消选中它来关闭 Windows 计算机上的 IPv6，但它们仍然注册 AAAA 记录。问题是，我们的 Exchange 2007 服务器一直在注册 AAAA 记录，而我们的隧道没有为 IPv6 设置。因此，当隧道末端的客户端尝试连接时，它无法连接。我可以 ping 通 IPv6 地址，但我猜这可能是路由器在回复而不是服务器本身。如果我从 DNS 服务器中删除 IPv6 地址并尝试再次连接，它会起作用。</p><p>ipv6禁用方法出处 <a href="https://community.spiceworks.com/topic/257230-disable-aaaa-records-from-registering-in-server-2008-r2-dns">https://community.spiceworks.com/topic/257230-disable-aaaa-records-from-registering-in-server-2008-r2-dns</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>如果您想禁用 IPv6，关闭它的“正确”方法是通过注册表禁用它。就是这样：</p><p>打开注册表编辑器（运行命令 <code>regedit</code> ）<br>导航到以下键：  <code>HKEY_LOCAL_MACHINE &gt; System &gt; CurrentControlSet &gt; Services &gt; TCPIP6 &gt; Parameters</code><br>创建一个名为 <code>DisabledComponents</code> 的新 DWORD值（区分大小写）<br>修改 <code>DisabledComponents</code> 值并将其设置为 <code>0xffffffff</code>（十六进制 - 即 8个 F）。<br>重新启动 PC 以应用更改。</p><p>如果家里没有ipv6最好禁用，如果只是禁用AD域适配器的ipv6没有用的，dns解析也会返回ipv6，不过windows不会去尝试访问解析到的ipv6地址，但并不代表其他系统不会，例如Ubuntu22.04LTS即时没有ipv6默认路由，也有可能会去请求ipv6地址，这个时候表现出来的就是网络卡顿</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python requests 指定网卡出口，指定网卡发送请求流量</title>
      <link href="/2023/python-requests-specifies-the-network-card-export-and-specifies-the-network-card-to-send-request-traffic/"/>
      <url>/2023/python-requests-specifies-the-network-card-export-and-specifies-the-network-card-to-send-request-traffic/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests_toolbelt.adapters.socket_options <span class="keyword">import</span> SocketOptionsAdapter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># set interface here</span></span><br><span class="line">options = [(socket.SOL_SOCKET, socket.SO_BINDTODEVICE, <span class="string">b&quot;eth0&quot;</span>)]</span><br><span class="line"><span class="keyword">for</span> prefix <span class="keyword">in</span> (<span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;https://&#x27;</span>):</span><br><span class="line">    session.mount(prefix, SocketOptionsAdapter(socket_options=options))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(session.get(<span class="string">&quot;https://test.ipw.cn/&quot;</span>).text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936361955351693636194706.png" alt="16936361955351693636194706.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>interface wan is error (16) and tracking is not enabled，openwrt iStoreOS软路由mwan3负载均衡报错</title>
      <link href="/2023/interface-wan-is-error-16-and-tracking-is-not-enabled-openwrt-istoreos-soft-routing-mwan3-load-balancing-error/"/>
      <url>/2023/interface-wan-is-error-16-and-tracking-is-not-enabled-openwrt-istoreos-soft-routing-mwan3-load-balancing-error/</url>
      
        <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>进入 状态-负载均衡-详细信息</p><p>在Interface status下面显示，只有一个接口是在线状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Interface status:</span><br><span class="line"> interface wan is error (16) and tracking is not enabled</span><br><span class="line"> interface wan1 is error (16) and tracking is not enabled</span><br><span class="line"> interface wan2 is error (16) and tracking is not enabled</span><br><span class="line"> interface wan3 is error (16) and tracking is not enabled</span><br><span class="line"> interface wan4 is online 00h:00m:00s, uptime 01h:59m:08s and tracking is not enabled</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936366885391693636687849.png" alt="16936366885391693636687849.png"></p><h1 id="故障原因"><a href="#故障原因" class="headerlink" title="故障原因"></a>故障原因</h1><p>各个接口的跃点数不能一致，默认创建接口之后跃点数是0</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936367075351693636706779.png" alt="16936367075351693636706779.png"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在 网络-接口-WAN-高级设置-使用网关跃点数，这里手动把各个接口设置成不一样的即可 </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936367195391693636718808.png" alt="16936367195391693636718808.png"></p><h1 id="效果检验"><a href="#效果检验" class="headerlink" title="效果检验"></a>效果检验</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Interface status:</span><br><span class="line"> interface wan is online 00h:00m:00s, uptime 02h:02m:20s and tracking is not enabled</span><br><span class="line"> interface wan1 is online 00h:00m:00s, uptime 02h:01m:54s and tracking is not enabled</span><br><span class="line"> interface wan2 is online 00h:00m:00s, uptime 02h:01m:54s and tracking is not enabled</span><br><span class="line"> interface wan3 is online 00h:00m:00s, uptime 02h:01m:54s and tracking is not enabled</span><br><span class="line"> interface wan4 is online 00h:00m:00s, uptime 02h:01m:54s and tracking is not enabled</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936367395351693636738707.png" alt="16936367395351693636738707.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数学建模科普</title>
      <link href="/2023/mathematical-modeling-popular-science/"/>
      <url>/2023/mathematical-modeling-popular-science/</url>
      
        <content type="html"><![CDATA[<p><strong>转载</strong></p><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p>-<br>  MATLAB(物理建模)</p><ul><li>python(数据分析)</li><li>R</li><li>SPSS</li><li>Stata</li><li>Origin</li></ul><blockquote><p>Lingo软件替代方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Yalmip工具箱+OPTI工具箱+gurobi求解器</span><br><span class="line"></span><br><span class="line">Yalmip是基于matlab的求解规划问题的高级建模语言</span><br><span class="line">OPTI提供众多开源的规划求解器</span><br><span class="line">    包括非线性求解器ipopt等</span><br><span class="line">gurobi是当今世界上最优秀最快速的线性规划/二次规划求解器</span><br></pre></td></tr></table></figure><p>以上搭配拥有更人性化的编程语言+更便捷的建模过程+更快的求解速度</p><p>上面的这个组合是matlab平台的，python平台有gurobipy或者cvxpy等等</p></blockquote><h2 id="绘图软件："><a href="#绘图软件：" class="headerlink" title="绘图软件："></a>绘图软件：</h2><p>-<br>  excel（简单绘图）</p><ul><li>PPT（流程图）</li><li>visio（流程图、示意图等）</li><li>AxGlyph(物理示意图、受力分析图、流程图等)</li><li>Xmind（思维导图）</li></ul><h2 id="排版软件："><a href="#排版软件：" class="headerlink" title="排版软件："></a>排版软件：</h2><p>-<br>  word</p><ul><li>latex</li><li>typora+picgo（markdown语言，记笔记很方便，写好大纲再用latex写,picgo搭配gitee用来作图床）</li><li>typora：github上有LaTeX风格的主题，自动编号等，支持导出word、pdf，十分高效</li></ul><h2 id="LaTeX相关："><a href="#LaTeX相关：" class="headerlink" title="LaTeX相关："></a>LaTeX相关：</h2><p>-<br>  TeXLive（软件包）</p><ul><li>Texstudio（IDE）</li><li>excel2latex插件（导出latex表格）</li><li>XL toolbox（导出高清excel图片）</li></ul><h2 id="公式相关软件："><a href="#公式相关软件：" class="headerlink" title="公式相关软件："></a>公式相关软件：</h2><p>-<br>  Axmath（推荐）</p><ul><li>mathtype（不推荐）</li><li>mathpix（公式OCR识别）</li><li>Zetero+众多的插件（文献管理工具，配合插件等可以自动下载知网等文献并一键导出bib参考文献，也可以在Word里面进行参考文献的管理，微信公众号（青柠学术）有详细教程）</li></ul><h1 id="比赛名称"><a href="#比赛名称" class="headerlink" title="比赛名称"></a>比赛名称</h1><p>-<br>  美国大学生数学建模竞赛</p><ul><li>全国大学生数学建模竞赛</li><li>华为杯研究生数学建模</li><li>电工杯</li><li>华中赛</li><li>APMCM亚太地区数学建模</li><li>深圳杯</li><li>中青杯</li><li>华东杯</li><li>数维杯</li><li>东三省数学建模</li><li>认证杯</li></ul><h1 id="比赛论文"><a href="#比赛论文" class="headerlink" title="比赛论文"></a>比赛论文</h1><p>-<br>  数学建模美赛论文</p><ul><li>数学建模国赛论文</li><li>mathorcup历年论文</li><li>研究生数学建模历年论文</li><li>国赛评阅要点</li></ul><h2 id="分类依据："><a href="#分类依据：" class="headerlink" title="分类依据："></a>分类依据：</h2><p>1、按照模型分类</p><p>2、按照比赛分类</p><p><strong>具体内容：</strong>比赛题目+比赛论文</p><p><strong>历年比赛题目</strong>也很重要</p><p><strong>数学建模经验分享与总结</strong>也很重要</p><h1 id="算法及常用代码"><a href="#算法及常用代码" class="headerlink" title="算法及常用代码"></a>算法及常用代码</h1><p>-<br>  数学建模算法</p><ul><li>软件模型算法汇总</li><li>MATLAB算法</li><li>常用Matlab代码</li><li>智能算法</li></ul><h1 id="常用模型及算法："><a href="#常用模型及算法：" class="headerlink" title="常用模型及算法："></a>常用模型及算法：</h1><p>1.<br>   层次分析法       AHP</p><ol start="2"><li>插值算法        interpolation</li><li>迪杰斯特拉模型   Dijkstra</li><li>动态规划        dynamic programming</li><li>方差分析        variance analysis</li><li>弗洛伊德算法     Floyd algorithm</li><li>灰色预测        Grey Prediction</li><li>回归分析        regression analysis</li><li>聚类分析        Cluster analysis</li><li>决策树          decision tree</li><li>逻辑回归        logistic regression</li><li>模拟退火        simulated annealing</li><li>排队论          queuing theory</li><li>神经网络        neural networks</li><li>时间序列        ARMA</li><li>因子分析        factor analysis</li><li>优劣解距离法     Topsis</li><li>元胞自动机       cellular automata</li><li>支持向量机       Support Vector Machines</li><li>主成分分析       PCA</li></ol><h2 id="优化问题及规划模型："><a href="#优化问题及规划模型：" class="headerlink" title="优化问题及规划模型："></a>优化问题及规划模型：</h2><p>线性规划，半定规划、几何规划、非线性规划，整数规划，多目标规划（分层序列法），动态规划，存贮论、代理模型、相应面分析法、列生成算法</p><h2 id="预测模型："><a href="#预测模型：" class="headerlink" title="预测模型："></a>预测模型：</h2><p>微分方程，小波分析，回归分析，灰色预测，马尔可夫预测，时间序列分析(AR MA ARMA ARIMA,LSTM神经网络)，混沌模型时间序列预测，支持向量机，神经网络预测（与机器学习部分很多重合）</p><h2 id="动态模型："><a href="#动态模型：" class="headerlink" title="动态模型："></a>动态模型：</h2><p>微分方程模型（ODE、SDE、DDE、DAE、PDE），差分方程模型，元胞自动机，排队论，蒙特卡罗随机模拟</p><h2 id="图论模型："><a href="#图论模型：" class="headerlink" title="图论模型："></a>图论模型：</h2><p>最短路径，最小生成树，最小费用最大流，指派问题，旅行商问题，VRPTW路径规划，网络流，路径规划算法（Dijkstra，Floyd，A<em>，D</em>，RRT<em>，LPA</em>，D*lite）</p><h2 id="评价模型："><a href="#评价模型：" class="headerlink" title="评价模型："></a>评价模型：</h2><p>层次分析法，熵权法，最优赋权法，主成分分析法，主成分回归评价，因子分析，模糊综合评价，TOPSIS法，数据包络分析，秩和比法，灰色综合评价法，<br>最小二乘主客观一致赋权评价模型，BP神经网络综合评价法</p><h2 id="统计分析模型："><a href="#统计分析模型：" class="headerlink" title="统计分析模型："></a>统计分析模型：</h2><p>分布检验，均值T检验，方差分析，协方差分析，相关分析，卡方检验，秩和检验，回归分析，Logistic回归，聚类分析，判别分析，关联分析（Apriori算法）</p><h2 id="现代智能算法："><a href="#现代智能算法：" class="headerlink" title="现代智能算法："></a>现代智能算法：</h2><p>（求极值，多目标规划，TSP，车间调度等）模拟退火，遗传算法，粒子群算法，禁忌搜索、免疫算法，鱼群算法，神经网络，蚁群算法</p><h2 id="机器学习："><a href="#机器学习：" class="headerlink" title="机器学习："></a>机器学习：</h2><h3 id="分类问题："><a href="#分类问题：" class="headerlink" title="分类问题："></a>分类问题：</h3><p>KNN，逻辑回归，决策树，随机森林， ADABOOST、GBDT\XGBoost\LightGBM，支持向量机，朴素贝叶斯，神经网络</p><h3 id="回归问题："><a href="#回归问题：" class="headerlink" title="回归问题："></a>回归问题：</h3><p>线性回归， LASSO回归，岭回归，决策树回归，集成学习中回归方法，支持向量回归，高斯混合模型，神经网络</p><h3 id="聚类问题："><a href="#聚类问题：" class="headerlink" title="聚类问题："></a>聚类问题：</h3><p>K均值聚类， DBSCAN聚类，EM算法</p><h3 id="其他算法："><a href="#其他算法：" class="headerlink" title="其他算法："></a>其他算法：</h3><p>图像处理（计算机视觉）、深度学习、分治法，贪心法。<br>二分法，直接搜索法，变范围搜索，单因素优选法0.618法(黄金分隔法)，拉格朗日乘子法，信赖域算法，欧拉法\改进欧拉法，牛顿-拉弗森算法(牛顿迭代法)、拟牛顿法、梯度下降法</p><p><strong>备注：优先使用传统算法、避免群智能机器学习深度学习</strong></p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>-<br>  LaTeX模板</p><ul><li>国赛LaTeX模板</li><li>美赛LaTeX模板</li><li>数学建模书籍</li><li>数学建模word模板</li></ul>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RKE2部署高可用Rancher v2.7.1</title>
      <link href="/2023/rke2-deploys-highly-available-rancher-v2-7-1/"/>
      <url>/2023/rke2-deploys-highly-available-rancher-v2-7-1/</url>
      
        <content type="html"><![CDATA[<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>注意修改主机名，不要有冲突</li></ul><h2 id="配置负载均衡器和健康检查"><a href="#配置负载均衡器和健康检查" class="headerlink" title="配置负载均衡器和健康检查"></a>配置负载均衡器和健康检查</h2><p>我这里使用的是VMware NSX-T负载均衡</p><blockquote><p>这里有个坑，80端口的响应代码，需要把307,308,303标记为健康的状态码</p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936369265351693636925856.png" alt="16936369265351693636925856.png"></p><h2 id="第一个server节点安装"><a href="#第一个server节点安装" class="headerlink" title="第一个server节点安装"></a>第一个server节点安装</h2><blockquote><p>官方文档的描述感觉对于新手来说太不友好了，建议以下链接都看一下。Rancher新老文档都建议看一下，不然刚刚入门很蒙。</p><p>RKE2快速开始：<a href="https://docs.rke2.io/zh/install/quickstart">https://docs.rke2.io/zh/install/quickstart</a></p><p>RKE2高可用：<a href="https://docs.rke2.io/zh/install/ha">https://docs.rke2.io/zh/install/ha</a></p><p>RKE2离线安装：<a href="https://docs.rke2.io/zh/install/airgap">https://docs.rke2.io/zh/install/airgap</a></p><p>RKE2卸载：<a href="https://docs.rke2.io/zh/install/linux_uninstall">https://docs.rke2.io/zh/install/linux_uninstall</a></p><p>Rancher Helm CLI快速入门：<a href="https://ranchermanager.docs.rancher.com/zh/getting-started/quick-start-guides/deploy-rancher-manager/helm-cli">https://ranchermanager.docs.rancher.com/zh/getting-started/quick-start-guides/deploy-rancher-manager/helm-cli</a></p><p>Rancher 离线Helm安装：<a href="https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/other-installation-methods/air-gapped-helm-cli-install/install-rancher-ha">https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/other-installation-methods/air-gapped-helm-cli-install/install-rancher-ha</a></p><p>老版Rancher文档 离线安装：<a href="https://docs.rancher.cn/docs/rancher2/installation/other-installation-methods/air-gap/install-rancher/_index">https://docs.rancher.cn/docs/rancher2/installation/other-installation-methods/air-gap/install-rancher/_index</a></p><p>老版Rancher文档 如何在国内使用 Rancher：<a href="https://docs.rancher.cn/docs/rancher2/best-practices/use-in-china/_index/">https://docs.rancher.cn/docs/rancher2/best-practices/use-in-china/_index/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">/usr/local/bin/rke2-uninstall.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件，load_balancer_addr 负载均衡ip或者第一台serverip</span></span><br><span class="line">load_balancer_addr=172.16.10.241</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/rancher/rke2 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">tls-san:</span></span><br><span class="line"><span class="string">  - <span class="variable">$&#123;load_balancer_addr&#125;</span></span></span><br><span class="line"><span class="string">system-default-registry: \&quot;docker.nju.edu.cn\&quot;</span></span><br><span class="line"><span class="string">&quot;</span> &gt; /etc/rancher/rke2/config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置</span></span><br><span class="line"><span class="built_in">cat</span> /etc/rancher/rke2/config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本安装</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/rke2/install.sh | INSTALL_RKE2_MIRROR=cn INSTALL_RKE2_VERSION=v1.22.17+rke2r1 sh -</span><br><span class="line"><span class="comment"># 安装最新stable版本</span></span><br><span class="line"><span class="comment"># curl -sfL https://rancher-mirror.rancher.cn/rke2/install.sh | INSTALL_RKE2_MIRROR=cn sh -</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rke2-server.service &amp;&amp; systemctl start rke2-server.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># journalctl -u rke2-server -f</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实用程序注册到PATH"><a href="#实用程序注册到PATH" class="headerlink" title="实用程序注册到PATH"></a>实用程序注册到PATH</h2><blockquote><p>kubeconfig默认的server地址是127.0.0.1</p><p>在最小集群安装完成之后需要修改为负载均衡地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/var/lib/rancher/rke2/bin;&#x27;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.kube &amp;&amp; <span class="built_in">rm</span> -f ~/.kube/config &amp;&amp; <span class="built_in">ln</span> -s /etc/rancher/rke2/rke2.yaml ~/.kube/config</span><br></pre></td></tr></table></figure><h3 id="等待所有pod运行"><a href="#等待所有pod运行" class="headerlink" title="等待所有pod运行"></a>等待所有pod运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@rke1:~# watch -n 1 kubectl get pods -A</span><br><span class="line"></span><br><span class="line">Every 1.0s: kubectl get pods -A                                                                                                                                                                             rke1: Thu Mar 16 21:22:08 2023</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                                   READY   STATUS      RESTARTS   AGE</span><br><span class="line">kube-system   cloud-controller-manager-rke1                          1/1     Running     0          33m</span><br><span class="line">kube-system   etcd-rke1                                              1/1     Running     0          33m</span><br><span class="line">kube-system   helm-install-rke2-canal-mscjh                          0/1     Completed   0          34m</span><br><span class="line">kube-system   helm-install-rke2-coredns-qrmgn                        0/1     Completed   0          34m</span><br><span class="line">kube-system   helm-install-rke2-ingress-nginx-ddt95                  0/1     Completed   0          34m</span><br><span class="line">kube-system   helm-install-rke2-metrics-server-6cm27                 0/1     Completed   0          34m</span><br><span class="line">kube-system   kube-apiserver-rke1                                    1/1     Running     0          33m</span><br><span class="line">kube-system   kube-controller-manager-rke1                           1/1     Running     0          33m</span><br><span class="line">kube-system   kube-proxy-rke1                                        1/1     Running     0          33m</span><br><span class="line">kube-system   kube-scheduler-rke1                                    1/1     Running     0          33m</span><br><span class="line">kube-system   rke2-canal-f56nc                                       2/2     Running     0          32m</span><br><span class="line">kube-system   rke2-coredns-rke2-coredns-69844654d9-lsvw6             1/1     Running     0          32m</span><br><span class="line">kube-system   rke2-coredns-rke2-coredns-autoscaler-95d984597-p9r6k   1/1     Running     0          32m</span><br><span class="line">kube-system   rke2-ingress-nginx-controller-4ddx9                    1/1     Running     0          29m</span><br><span class="line">kube-system   rke2-metrics-server-765b64878b-jtq2v                   1/1     Running     0          30m</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注册令牌，接下来要用"><a href="#注册令牌，接下来要用" class="headerlink" title="注册令牌，接下来要用"></a>注册令牌，接下来要用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/rancher/rke2/server/node-token</span><br></pre></td></tr></table></figure><h2 id="其他server节点安装"><a href="#其他server节点安装" class="headerlink" title="其他server节点安装"></a>其他server节点安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件，load_balancer_addr 负载均衡ip或者第一台serverip</span></span><br><span class="line">load_balancer_addr=172.16.10.241 node_token=xxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/rancher/rke2 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">server: https://<span class="variable">$&#123;load_balancer_addr&#125;</span>:9345</span></span><br><span class="line"><span class="string">token: <span class="variable">$&#123;node_token&#125;</span></span></span><br><span class="line"><span class="string">tls-san:</span></span><br><span class="line"><span class="string">  - <span class="variable">$&#123;load_balancer_addr&#125;</span></span></span><br><span class="line"><span class="string">system-default-registry: \&quot;docker.nju.edu.cn\&quot;</span></span><br><span class="line"><span class="string">&quot;</span> &gt; /etc/rancher/rke2/config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置</span></span><br><span class="line"><span class="built_in">cat</span> /etc/rancher/rke2/config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/rke2/install.sh | INSTALL_RKE2_MIRROR=cn INSTALL_RKE2_VERSION=v1.22.17+rke2r1 sh -</span><br><span class="line">systemctl <span class="built_in">enable</span> rke2-server.service &amp;&amp; systemctl start rke2-server.service</span><br></pre></td></tr></table></figure><h2 id="实用程序注册到PATH-1"><a href="#实用程序注册到PATH-1" class="headerlink" title="实用程序注册到PATH"></a>实用程序注册到PATH</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/var/lib/rancher/rke2/bin;&#x27;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.kube &amp;&amp; <span class="built_in">rm</span> -f ~/.kube/config &amp;&amp; <span class="built_in">ln</span> -s /etc/rancher/rke2/rke2.yaml ~/.kube/config</span><br></pre></td></tr></table></figure><p>这里使用kubectl可能会反应很慢，需要修改kubeconfig中server的地址为负载均衡地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load_balancer_addr=rancher2.ent.top</span><br><span class="line">sed -i.bak &quot;s/127.0.0.1:6443/$&#123;load_balancer_addr&#125;:6443/&quot; /etc/rancher/rke2/rke2.yaml</span><br></pre></td></tr></table></figure><h2 id="安装helm"><a href="#安装helm" class="headerlink" title="安装helm"></a>安装helm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 helm 并上传 https://github.com/helm/helm/releases</span></span><br><span class="line"><span class="built_in">rm</span> -rf linux-amd64/helm &amp;&amp; tar -zxvf helm-v3.10.3-linux-amd64.tar.gz &amp;&amp; <span class="built_in">mv</span> linux-amd64/helm /usr/local/bin/helm &amp;&amp; helm version</span><br></pre></td></tr></table></figure><h2 id="安装Cert-Manager"><a href="#安装Cert-Manager" class="headerlink" title="安装Cert-Manager"></a>安装Cert-Manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以下载过来然后在 kubectl apply -f cert-manager.crds.yaml</span></span><br><span class="line">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml</span><br><span class="line"></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io &amp;&amp; helm repo update</span><br><span class="line"></span><br><span class="line">helm install cert-manager jetstack/cert-manager \</span><br><span class="line">--<span class="built_in">set</span> image.repository=quay.nju.edu.cn/jetstack/cert-manager-controller \</span><br><span class="line">--<span class="built_in">set</span> webhook.image.repository=quay.nju.edu.cn/jetstack/cert-manager-webhook \</span><br><span class="line">--<span class="built_in">set</span> cainjector.image.repository=quay.nju.edu.cn/jetstack/cert-manager-cainjector \</span><br><span class="line">--<span class="built_in">set</span> startupapicheck.image.repository=quay.nju.edu.cn/jetstack/cert-manager-ctl \</span><br><span class="line">--namespace cert-manager \</span><br><span class="line">--create-namespace \</span><br><span class="line">--version v1.7.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装Rancher"><a href="#安装Rancher" class="headerlink" title="安装Rancher"></a>安装Rancher</h2><blockquote><p>这里也有个坑，不能安装离线安装文档中加<br> <code>--set certmanager.version=&lt;CERTMANAGER_VERSION&gt;</code> 参数，会报错如下<br><code>unable to build kubernetes objects from release manifest: resource mapping not found for name: &quot;rancher&quot; namespace: &quot;&quot; </code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">helm repo add rancher-latest https://rancher-mirror.rancher.cn/server-charts/latest</span><br><span class="line"></span><br><span class="line">kubectl create namespace cattle-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># rancher域名，要么解析dns，要么加入自己电脑hosts</span></span><br><span class="line">rancher_domain=rancher01.ent.top</span><br><span class="line">helm install rancher rancher-latest/rancher \</span><br><span class="line">--namespace cattle-system \</span><br><span class="line">--<span class="built_in">set</span> hostname=<span class="variable">$&#123;rancher_domain&#125;</span> \</span><br><span class="line">--<span class="built_in">set</span> rancherImage=docker.nju.edu.cn/rancher/rancher \</span><br><span class="line">--<span class="built_in">set</span> systemDefaultRegistry=docker.nju.edu.cn</span><br></pre></td></tr></table></figure><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>密码看提示<br><code>$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=&#39;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#39;)</code><br>或者直接用链接（其实就是跳过输入上面随机密码的阶段，直接到下一步设置admin密码）<br><code>echo https://rancher01.ent.top/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=&#39;&#123;&#123;.data.bootstrapPassword|base64decode&#125;&#125;&#39;)</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936369605351693636960184.png" alt="16936369605351693636960184.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936369695351693636969075.png" alt="16936369695351693636969075.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936369815351693636980799.png" alt="16936369815351693636980799.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VMware NSX-T网络不稳定，ssh自动断开，iperf3测速没有速度</title>
      <link href="/2023/the-vmware-nsx-t-network-is-unstable-ssh-automatically-disconnects-and-the-iperf3-speed-test-has-no-speed/"/>
      <url>/2023/the-vmware-nsx-t-network-is-unstable-ssh-automatically-disconnects-and-the-iperf3-speed-test-has-no-speed/</url>
      
        <content type="html"><![CDATA[<h1 id="问题现象："><a href="#问题现象：" class="headerlink" title="问题现象："></a>问题现象：</h1><p>笔记本直连交换机，对服务器进行iperf3测试，结果发现带宽只有50Kbits&#x2F;S，只有第一次能发出流量，后面直接就是0bits&#x2F;S</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936371165341693637116260.png" alt="16936371165341693637116260.png"></p><h1 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h1><p>nsx的overlay和vlan传输区域接口都是使用的1700MTU</p><p>如果流量要跑在大二层，都是使用1700MTU进行传输，但是我的上行链路VDS交换机只有1500MTU</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936371285401693637127647.png" alt="16936371285401693637127647.png"></p><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>将主机的NSX交换机MTU修改为1700</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936371395401693637139013.png" alt="16936371395401693637139013.png"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>修改物理交换机MTU</p><blockquote><p>我这里使用的嵌套环境，所以直接改母鸡的esxi标准交换机</p><p>因为我的主板是螃蟹网卡，所以只能用6.7的vmkernel螃蟹网卡驱动，在esxi7及以上都砍掉了vmkernel驱动，只用用native模式驱动网卡，所以才迟迟没有人写出esxi7的螃蟹网卡驱动 </p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936371515391693637151261.png" alt="16936371515391693637151261.png"></p><h1 id="修复验证"><a href="#修复验证" class="headerlink" title="修复验证"></a>修复验证</h1><p>可以看到已经恢复到了正常带宽，而且ssh也不掉了，sftp传输也不会卡在那儿半天不动 </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936371825391693637182343.png" alt="16936371825391693637182343.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Yoga安装部署，手把手使用kolla-ansible部署OpenStack</title>
      <link href="/2023/openstack-yoga-installation-and-deployment-step-by-step-deployment-of-openstack-using-kolla-ansible/"/>
      <url>/2023/openstack-yoga-installation-and-deployment-step-by-step-deployment-of-openstack-using-kolla-ansible/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基本上是按照官网文档快速入门进行安装，不过还有很多地方需要换源。重点在换源这块。如果说你的网关有魔法，那就不用看这篇文章了，直接复制官网命令安装。</p></blockquote><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>部署OpenStack官方提供的Simple Configuration示例配置中的Web Application和Container Optimized两个组件配置清单。</p><p>其中包括</p><ul><li>Web Application：Cinder（块存储）、Glance（镜像服务）、Keystone（身份认证）、Horizon（仪表盘）、Neutron（网络服务）、Nova（计算服务）、Trove（数据库服务）、Swift（对象存储）、Ceilometer（数据收集）、Heat（编排服务）</li><li>Container Optimized（增量）：Kuryr（容器网络集成）、Barbican（密钥服务）、Designate（DNS服务）、Manila（文件存储）、Octavia（负载均衡器）、Placement（资源监控）</li></ul><p>更多OpenStack landscape景观图可以参考官方或者 <a href="https://blog.csdn.net/qq_35485875/article/details/128894934">OPENSTACK LANDSCAPE云原生景观 | OpenStack地图_JamesCurtis的博客-CSDN博客</a></p><h1 id="支持的操作系统"><a href="#支持的操作系统" class="headerlink" title="支持的操作系统"></a>支持的操作系统</h1><p>注意：不再支持 CentOS 7 作为主机操作系统。Train 版本同时支持 CentOS 7 和 8，并提供了迁移路径。有关迁移到 CentOS 8 的信息，请参阅Kolla Ansible Train 文档。</p><p>yoga版本支持以下操作系统：</p><ul><li>CentOS Stream 8</li><li>Debian Bullseye (11)</li><li>openEuler 20.03 LTS SP2</li><li>RHEL 8 (deprecated)</li><li>Rocky Linux 8</li><li>Ubuntu Focal (20.04)</li></ul><p>我这里使用的是Ubuntu 22.04 LTS（mini安装）</p><p>下面开始安装</p><h1 id="1-安装系统依赖"><a href="#1-安装系统依赖" class="headerlink" title="1. 安装系统依赖"></a>1. 安装系统依赖</h1><h2 id="1-1-更新软件包索引"><a href="#1-1-更新软件包索引" class="headerlink" title="1.1. 更新软件包索引"></a>1.1. 更新软件包索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h2 id="1-2-安装python依赖"><a href="#1-2-安装python依赖" class="headerlink" title="1.2. 安装python依赖"></a>1.2. 安装python依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git python3-dev libffi-dev gcc libssl-dev</span><br></pre></td></tr></table></figure><h1 id="2-安装python-venv虚拟环境依赖"><a href="#2-安装python-venv虚拟环境依赖" class="headerlink" title="2. 安装python-venv虚拟环境依赖"></a>2. 安装python-venv虚拟环境依赖</h1><h2 id="2-1-安装python3-venv"><a href="#2-1-安装python3-venv" class="headerlink" title="2.1 安装python3-venv"></a>2.1 安装python3-venv</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-venv</span><br></pre></td></tr></table></figure><h2 id="2-2-创建虚拟环境并激活它"><a href="#2-2-创建虚拟环境并激活它" class="headerlink" title="2.2 创建虚拟环境并激活它"></a>2.2 创建虚拟环境并激活它</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /path &amp;&amp; mkdir /path/to # 也可以自定路径</span><br><span class="line">python3 -m venv /path/to/venv</span><br><span class="line">source /path/to/venv/bin/activate</span><br></pre></td></tr></table></figure><h2 id="2-3-确保安装了最新版本的pip"><a href="#2-3-确保安装了最新版本的pip" class="headerlink" title="2.3 确保安装了最新版本的pip"></a>2.3 确保安装了最新版本的pip</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span><br></pre></td></tr></table></figure><h2 id="2-4-pypi换源"><a href="#2-4-pypi换源" class="headerlink" title="2.4 pypi换源"></a>2.4 pypi换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="2-5-安装Ansible"><a href="#2-5-安装Ansible" class="headerlink" title="2.5 安装Ansible"></a>2.5 安装Ansible</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install &#x27;ansible&gt;=4,&lt;6&#x27;</span><br></pre></td></tr></table></figure><h1 id="3-安装Kolla-Ansible"><a href="#3-安装Kolla-Ansible" class="headerlink" title="3. 安装Kolla-Ansible"></a>3. 安装Kolla-Ansible</h1><h2 id="3-1-kolla"><a href="#3-1-kolla" class="headerlink" title="3.1 kolla"></a>3.1 kolla</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># pip install git+https://opendev.org/openstack/kolla-ansible@stable/yoga</span><br><span class="line"># 上面是原版命令，建议使用jihulab.com克隆一份</span><br><span class="line">pip install git+https://jihulab.com/james-curtis/kolla-ansible@stable/yoga</span><br></pre></td></tr></table></figure><h2 id="3-2-创建文件夹-etc-kolla"><a href="#3-2-创建文件夹-etc-kolla" class="headerlink" title="3.2 创建文件夹&#x2F;etc&#x2F;kolla"></a>3.2 创建文件夹&#x2F;etc&#x2F;kolla</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/kolla</span><br><span class="line">sudo chown $USER:$USER /etc/kolla</span><br></pre></td></tr></table></figure><h2 id="3-3-复制-globals-yml-和-passwords-yml-到-etc-kolla"><a href="#3-3-复制-globals-yml-和-passwords-yml-到-etc-kolla" class="headerlink" title="3.3 复制 globals.yml 和 passwords.yml 到 &#x2F;etc&#x2F;kolla"></a>3.3 复制 globals.yml 和 passwords.yml 到 &#x2F;etc&#x2F;kolla</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果你使用了自定义路径，记得替换/path/to</span><br><span class="line">cp -r /path/to/venv/share/kolla-ansible/etc_examples/kolla/* /etc/kolla</span><br></pre></td></tr></table></figure><h2 id="3-4-复制清单文件"><a href="#3-4-复制清单文件" class="headerlink" title="3.4 复制清单文件"></a>3.4 复制清单文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /path/to/venv/share/kolla-ansible/ansible/inventory/* .</span><br></pre></td></tr></table></figure><h1 id="4-安装Ansible-Galaxy依赖"><a href="#4-安装Ansible-Galaxy依赖" class="headerlink" title="4. 安装Ansible Galaxy依赖"></a>4. 安装Ansible Galaxy依赖</h1><h2 id="4-1-换源"><a href="#4-1-换源" class="headerlink" title="4.1 换源"></a>4.1 换源</h2><p>找到 &#x2F;path&#x2F;to&#x2F;venv&#x2F;share&#x2F;kolla-ansible&#x2F;requirements.yml </p><p>内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">collections:</span><br><span class="line">  - name: https://opendev.org/openstack/ansible-collection-kolla</span><br><span class="line">    type: git</span><br><span class="line">    version: stable/yoga</span><br></pre></td></tr></table></figure><p>修改这个git仓库地址，如果镜像拉不下，建议去拉github的OpenStack镜像</p><p>修改成如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">collections:</span><br><span class="line">  - name: https://jihulab.com/james-curtis/ansible-collection-kolla</span><br><span class="line">    type: git</span><br><span class="line">    version: stable/yoga</span><br></pre></td></tr></table></figure><h2 id="4-2-安装Kolla-Ansible-Collections依赖"><a href="#4-2-安装Kolla-Ansible-Collections依赖" class="headerlink" title="4.2 安装Kolla-Ansible-Collections依赖"></a>4.2 安装Kolla-Ansible-Collections依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible install-deps</span><br></pre></td></tr></table></figure><h2 id="4-3-docker换源-指定docker版本到20-10"><a href="#4-3-docker换源-指定docker版本到20-10" class="headerlink" title="4.3 docker换源 &amp;&amp; 指定docker版本到20.10.*"></a>4.3 docker换源 &amp;&amp; 指定docker版本到20.10.*</h2><blockquote><p>这里不换源是可以的。但是截止docker 23.0.0发布时间之后再来使用kolla-ansible，首次安装没问题，后续如果要添加删除组件的话就会报错。原因是docker删除了容器的 <code>KernelMemory</code> 属性，但是kolla需要读取，导致数组下标不存在报错</p><p>请参阅：<a href="https://blog.csdn.net/qq_35485875/article/details/128877591">Kolla-Ansible deploy部署报错 KeyError: \‘KernelMemory_JamesCurtis的博客-CSDN博客</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i.bak &#x27;s/https:\/\/download\.docker\.com/https:\/\/mirrors\.tuna\.tsinghua\.edu\.cn\/docker-ce/g&#x27;   /root/.ansible/collections/ansible_collections/openstack/kolla/roles/baremetal/defaults/main.yml</span><br><span class="line">sed  -i.bak  &#x27;s/_package: &quot;docker-ce&quot;/_package: &quot;docker-ce=5:20.10*&quot;/g&#x27;   /root/.ansible/collections/ansible_collections/openstack/kolla/roles/baremetal/defaults/main.yml</span><br></pre></td></tr></table></figure><h2 id="4-4-配置Ansible"><a href="#4-4-配置Ansible" class="headerlink" title="4.4 配置Ansible"></a>4.4 配置Ansible</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/ansible </span><br><span class="line">echo &quot;[defaults]</span><br><span class="line">host_key_checking=False</span><br><span class="line">pipelining=True</span><br><span class="line">forks=100&quot; &gt; /etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><h1 id="5-准备初始化配置"><a href="#5-准备初始化配置" class="headerlink" title="5. 准备初始化配置"></a>5. 准备初始化配置</h1><p>如果单机部署，你也可以跳过此步骤，然后使用 all-in-one 清单，后续如果再增加机器可以切换回到 multinode 清单，只需要注意修改好机器主机名就行。</p><blockquote><p>对于all-in-one虚拟环境中的场景，将以下内容添加到all-in-one清单的最开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost ansible_python_interpreter=python</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-1-修改配置文件"><a href="#5-1-修改配置文件" class="headerlink" title="5.1 修改配置文件"></a>5.1 修改配置文件</h2><blockquote><p>我这里使用3+1机器演示，</p><p>1 x 部署机：10.10.1.80&#x2F;24</p><p>节点01：10.10.1.81&#x2F;24 control01</p><p>节点02：10.10.1.82&#x2F;24 control02</p><p>节点03：10.10.1.83&#x2F;24 control03</p></blockquote><p>这里仅仅展示 [baremetal:children] 节点之前的配置文件，切勿照搬！！！ </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># These initial groups are the only groups required to be modified. The</span><br><span class="line"># additional groups are for more control of the environment.</span><br><span class="line">[control]</span><br><span class="line"># These hostname must be resolvable from your deployment host</span><br><span class="line">control01  hostname=control01 ansible_user=root ansible_password=1</span><br><span class="line">control02  hostname=control02 ansible_user=root ansible_password=1</span><br><span class="line">control03  hostname=control03 ansible_user=root ansible_password=1</span><br><span class="line"> </span><br><span class="line"># The above can also be specified as follows:</span><br><span class="line"># control[01:03]     ansible_user=kolla</span><br><span class="line"> </span><br><span class="line"># The network nodes are where your l3-agent and loadbalancers will run</span><br><span class="line"># This can be the same as a host in the control group</span><br><span class="line"># [network]</span><br><span class="line"># network01</span><br><span class="line"># network02</span><br><span class="line"> </span><br><span class="line"># when you specify group_name:children, it will use contents of group specified.</span><br><span class="line">[network:children]</span><br><span class="line">control</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># [compute]</span><br><span class="line"># compute01</span><br><span class="line">[compute:children]</span><br><span class="line">control</span><br><span class="line"> </span><br><span class="line">[monitoring:children]</span><br><span class="line">control</span><br><span class="line"># [monitoring]</span><br><span class="line"># control01   ansible_user=root ansible_password=1 ansible_become=true</span><br><span class="line"># monitoring01</span><br><span class="line"> </span><br><span class="line"># When compute nodes and control nodes use different interfaces,</span><br><span class="line"># you need to comment out &quot;api_interface&quot; and other interfaces from the globals.yml</span><br><span class="line"># and specify like below:</span><br><span class="line">#compute01 neutron_external_interface=eth0 api_interface=em1 storage_interface=em1 tunnel_interface=em1</span><br><span class="line"> </span><br><span class="line"># [storage]</span><br><span class="line"># storage01</span><br><span class="line">[storage:children]</span><br><span class="line">control</span><br><span class="line"> </span><br><span class="line">[deployment]</span><br><span class="line">deploy       ansible_connection=local</span><br><span class="line"> </span><br><span class="line"># 下接[baremetal:children]</span><br></pre></td></tr></table></figure><h2 id="5-2-修改hosts"><a href="#5-2-修改hosts" class="headerlink" title="5.2 修改hosts"></a>5.2 修改hosts</h2><p>如果使用 all-in-one 清单，这一步也可以跳过</p><p>编辑&#x2F;etc&#x2F;hosts文件，注意替换成自己的机器的内网ip</p><blockquote><p>只需要修改部署机。后续使用bootstrap-server命令之后会同步到所有节点</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这里是deploy机器上的文件</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">10.10.1.80 deploy</span><br><span class="line">10.10.1.81 control01</span><br><span class="line">10.10.1.82 control02</span><br><span class="line">10.10.1.83 control03</span><br></pre></td></tr></table></figure><h2 id="5-3-安装-sshpass"><a href="#5-3-安装-sshpass" class="headerlink" title="5.3 安装 sshpass"></a>5.3 安装 sshpass</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install sshpass -y</span><br></pre></td></tr></table></figure><h2 id="5-4-配置ssh密钥对"><a href="#5-4-配置ssh密钥对" class="headerlink" title="5.4 配置ssh密钥对"></a>5.4 配置ssh密钥对</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>一路回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id 10.10.1.81</span><br><span class="line"># 注意替换自己的内网ip</span><br></pre></td></tr></table></figure><p>输入yes同意指纹，然后输入密码。就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 看下如下提示就是成功了</span><br><span class="line">root@10.10.1.81&#x27;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &#x27;10.10.1.81&#x27;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><h2 id="5-5-检查清单配置是否正确"><a href="#5-5-检查清单配置是否正确" class="headerlink" title="5.5 检查清单配置是否正确"></a>5.5 检查清单配置是否正确</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i multinode all -m ping</span><br></pre></td></tr></table></figure><p>返回下面结果就是成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ubuntu:~# ansible -i multinode all -m ping</span><br><span class="line">[WARNING]: Invalid characters were found in group names but not replaced, use -vvvv to see details</span><br><span class="line">localhost | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line">control01 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-生成密码"><a href="#6-生成密码" class="headerlink" title="6. 生成密码"></a>6. 生成密码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-genpwd</span><br></pre></td></tr></table></figure><h1 id="7-配置globals-yml"><a href="#7-配置globals-yml" class="headerlink" title="7. 配置globals.yml"></a>7. 配置globals.yml</h1><p>先安装一下vim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim -y</span><br></pre></td></tr></table></figure><p>编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/kolla/globals.yml</span><br></pre></td></tr></table></figure><p> 先不要进入编辑模式，输入下面，显示行号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set number</span><br></pre></td></tr></table></figure><h2 id="7-1-修改基础镜像发行版"><a href="#7-1-修改基础镜像发行版" class="headerlink" title="7.1 修改基础镜像发行版"></a>7.1 修改基础镜像发行版</h2><p>默认是centos，要修改为debian。默认的centos有一些镜像不存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i.bak &#x27;s/#kolla_base_distro: &quot;centos&quot;/kolla_base_distro: &quot;debian&quot;/&#x27; /etc/kolla/globals.yml</span><br></pre></td></tr></table></figure><h2 id="7-2-编辑网络接口"><a href="#7-2-编辑网络接口" class="headerlink" title="7.2 编辑网络接口"></a>7.2 编辑网络接口</h2><p>这里，vim的基本使用不在赘述</p><p><strong>搜索第一个网口接口</strong>，并修改为对应配置（可以通过 ip a 查看接口名字）</p><blockquote><p> 设置的第一个接口是“ Network_interface”。这是多个管理类型网络的默认接口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network_interface: &quot;eth0&quot;</span><br></pre></td></tr></table></figure><p><strong>搜索并设置第二个接口</strong></p><blockquote><p>所需的第二个接口专用于Neutron外部（或公共）网络，可以是vlan或flat，这取决于网络的创建方式。此接口应处于活动状态，没有IP地址。否则，实例将无法访问外部网络。</p></blockquote><p> 这里说人话，就是第二个接口需要给他一个空闲的网口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neutron_external_interface: &quot;eth1&quot;</span><br></pre></td></tr></table></figure><p><strong>搜索并设置浮动ip</strong></p><blockquote><p>接下来，我们需要为管理流量提供浮动IP。该IP将由keepalive管理，以提供高可用性，并且应设置为在连接到我们网络接口的管理网络中不使用的地址。</p></blockquote><p>这里说人话就是，浮动ip不要和network_interface中的地址冲突（一般是DHCP），比如说network_interface所在DHCP范围是10.1.1.100-10.1.1.200。那么浮动ip就不建议在这个范围内,而应该选择如10.1.1.201</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla_internal_vip_address: &quot;10.1.0.250&quot;</span><br></pre></td></tr></table></figure><p>编辑完成，按下Esc，再输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>保存退出</p><h1 id="8-部署"><a href="#8-部署" class="headerlink" title="8. 部署"></a>8. 部署</h1><h2 id="8-1-docker-quay-io换源"><a href="#8-1-docker-quay-io换源" class="headerlink" title="8.1 docker quay.io换源"></a>8.1 docker quay.io换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i.bak &#x27;s/#docker_registry:/docker_registry: quay.nju.edu.cn/g&#x27; /etc/kolla/globals.yml</span><br></pre></td></tr></table></figure><h2 id="8-2-引导服务器"><a href="#8-2-引导服务器" class="headerlink" title="8.2 引导服务器"></a>8.2 引导服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode bootstrap-servers</span><br></pre></td></tr></table></figure><p>完成后检查docker版本，确定在20.10.xx。不然后面所有使用kolla-ansible的改动都会报错KernelMemory</p><p>确保Server: Docker Engine版本在20.10.xx就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ubuntu:~# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           23.0.0</span><br><span class="line"> API version:       1.41 (downgraded from 1.42)</span><br><span class="line"> Go version:        go1.19.5</span><br><span class="line"> Git commit:        e92dd87</span><br><span class="line"> Built:             Wed Feb  1 17:47:51 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.23</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.10</span><br><span class="line">  Git commit:       6051f14</span><br><span class="line">  Built:            Thu Jan 19 17:42:57 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.16</span><br><span class="line">  GitCommit:        31aa4358a36870b21a992d3ad2bef29e1d693bec</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h2 id="8-3-对主机进行部署前检查"><a href="#8-3-对主机进行部署前检查" class="headerlink" title="8.3 对主机进行部署前检查"></a>8.3 对主机进行部署前检查</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode prechecks -vvv</span><br></pre></td></tr></table></figure><h2 id="8-4-最后进行实际的-OpenStack-部署"><a href="#8-4-最后进行实际的-OpenStack-部署" class="headerlink" title="8.4 最后进行实际的 OpenStack 部署"></a>8.4 最后进行实际的 OpenStack 部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy -vvv</span><br></pre></td></tr></table></figure><p>当本脚本完成时，OpenStack 应该启动、运行并正常运行！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">control01                  : ok=308  changed=218  unreachable=0    failed=0    skipped=169  rescued=0    ignored=1   </span><br><span class="line">localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br></pre></td></tr></table></figure><p>访问浮动ip地址就是前台页面，如果显示证书错误，那意思就是密码错误</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936507065351693650705770.png" alt="16936507065351693650705770.png"></p><p>账号为admin</p><p>查看密码：</p><blockquote><p>也可以在post-deploy命令执行之后，去这个文件里面看&#x2F;etc&#x2F;kolla&#x2F;admin-openrc.sh</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/kolla/passwords.yml |grep keystone_admin_password</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936507155351693650715007.png" alt="16936507155351693650715007.png"></p><h1 id="9-使用-OpenStack"><a href="#9-使用-OpenStack" class="headerlink" title="9. 使用 OpenStack"></a>9. 使用 OpenStack</h1><h2 id="9-1-安装-OpenStack-CLI-客户端"><a href="#9-1-安装-OpenStack-CLI-客户端" class="headerlink" title="9.1 安装 OpenStack CLI 客户端"></a>9.1 安装 OpenStack CLI 客户端</h2><p>官方命令（网络能通的可以试试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient -c https://releases.openstack.org/constraints/upper/yoga</span><br></pre></td></tr></table></figure><p>如果文件获取不了建议，打开这个链接，之后会跳转到<br> <a href="https://opendev.org/openstack/requirements/raw/branch/stable/yoga/upper-constraints.txt">https://opendev.org/openstack/requirements/raw/branch/stable/yoga/upper-constraints.txt</a><br> 再去github的OpenStack镜像，即 github.com&#x2F;openstack&#x2F;requirements<br> 然后克隆这个仓库到jihulab.com</p><p>记得选择对应的分支</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936507355351693650735288.png" alt="16936507355351693650735288.png"></p><p> ，接着找到对应的文件</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936507435351693650743477.png" alt="16936507435351693650743477.png"></p><p>打开原始文件，得到下面链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://jihulab.com/james-curtis/requirements/-/raw/stable/yoga/upper-constraints.txt</span><br></pre></td></tr></table></figure><p>替换官方命令，并执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-openstackclient -c https://jihulab.com/james-curtis/requirements/-/raw/stable/yoga/upper-constraints.txt</span><br></pre></td></tr></table></figure><h2 id="9-2-OpenStack-需要一个-openrc-文件"><a href="#9-2-OpenStack-需要一个-openrc-文件" class="headerlink" title="9.2 OpenStack 需要一个 openrc 文件"></a>9.2 OpenStack 需要一个 openrc 文件</h2><p>其中设置了管理员用户的凭据。要生成此文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible post-deploy</span><br><span class="line">. /etc/kolla/admin-openrc.sh</span><br></pre></td></tr></table></figure><blockquote><p>.(点)+(空格)+可执行文件 &#x3D;&#x3D; source+(空格)+可执行文件</p></blockquote><p>接下来就可以使用OpenStack CLI了</p><hr><p>至此OpenStack安装完成</p><hr><p>后续：</p><ul><li>OpenStack使用Skyline Dashboard面板替换默认Horizon面板</li><li>OpenStack增加节点或者减少节点，横向拓展节点</li><li>ProxmoxVE+Ceph+OpenStack HCI超融合平台搭建，配置Bcache加速Ceph SDS</li></ul>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack生产环境应该部署哪些组件，OpenStack选型实践</title>
      <link href="/2023/which-components-should-be-deployed-in-openstack-production-environment-openstack-selection-practice/"/>
      <url>/2023/which-components-should-be-deployed-in-openstack-production-environment-openstack-selection-practice/</url>
      
        <content type="html"><![CDATA[<p>官网虽然有示例配置，但仅仅是示例而已，并不是最佳实践。</p><p>可以看到有四种：计算入门套件、容器优化、网络应用、大数据 </p><p>其实下面的有些组件，很多部署OpenStack的企业也没有使用。而且许多边缘组件使用人数很少，使用频率低，也更新并不勤快</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936374995351693637498609.png" alt="16936374995351693637498609.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375115361693637510839.png" alt="16936375115361693637510839.png"></p><p>分析一下2019-2021年，各个组件在生产环境的使用比例。</p><p>进入用户调查</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375205351693637520181.png" alt="16936375205351693637520181.png"></p><p>查看Deployments调查部分中在生产环境使用的项目</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375325341693637531650.png" alt="16936375325341693637531650.png"></p><p>可以看到大部分组件的比例都低于10%，2022数据经过整理得到如下图</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375445351693637544073.png" alt="16936375445351693637544073.png"></p><p>2021数据</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375625401693637562007.png" alt="16936375625401693637562007.png"></p><p>2020数据</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375745401693637574397.png" alt="16936375745401693637574397.png"></p><p>2019数据</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375835401693637583273.png" alt="16936375835401693637583273.png"></p><p>2018数据</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936375915351693637591124.png" alt="16936375915351693637591124.png"></p><p>我暂且认为</p><ul><li>生产比例小于等于10%的均不要部署在自己生产环境上</li><li>生产比例小于等于15%的可以经过考虑、测试后部署在生产环境上</li><li>生产比例大于等于20%可以部署在生产环境</li></ul><p>我认为中小企业至少要部署以下组件（当然场景优先）</p><p>OpenStack Core ( glance, keystone, neutron, nova, heat, horizon )、cinder、octavia</p><p>推荐部署以下组件</p><p>designate、swift、manila、ironic</p><p>可选部署以下组件（按需）</p><p>barbican、rally、ceilometer</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936376025391693637602214.png" alt="16936376025391693637602214.png"></p><p>部署操作系统：Ubuntu Server。从2018以来Ubuntu的占比就超过了centos </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936376145341693637613536.png" alt="16936376145341693637613536.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Zun容器服务，Zun对接Ceph存储Proxmox</title>
      <link href="/2023/openstack-kolla-ansible-deploys-zun-container-service,-and-zun-connects-to-ceph-storage-proxmox/"/>
      <url>/2023/openstack-kolla-ansible-deploys-zun-container-service,-and-zun-connects-to-ceph-storage-proxmox/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128921256">OpenStack Kolla-Ansible部署Designate域名解析服务DNS服务DNSaas</a></p><p>本章我们继续来完成OpenStack示例配置组件之Container Optimized中的Zun容器服务。OpenStack Kolla-Ansible部署Zun容器服务。</p><blockquote><p>Zun 是一种 OpenStack 容器服务。它旨在提供一个 OpenStack API，用于在 OpenStack 上配置和管理容器化工作负载。</p></blockquote><hr><h1 id="1-设置kolla"><a href="#1-设置kolla" class="headerlink" title="1. 设置kolla"></a>1. 设置kolla</h1><p>在部署机，找到 &#x2F;etc&#x2F;kolla&#x2F;globals.yml </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enable_zun: &quot;yes&quot;</span><br><span class="line">enable_kuryr: &quot;yes&quot;</span><br><span class="line">enable_etcd: &quot;yes&quot;</span><br><span class="line">docker_configure_for_zun: &quot;yes&quot;</span><br><span class="line">containerd_configure_for_zun: &quot;yes&quot;</span><br></pre></td></tr></table></figure><p>另外再添加一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zun_configure_for_cinder_ceph: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h2 id="1-1-复制ceph文件"><a href="#1-1-复制ceph文件" class="headerlink" title="1.1 复制ceph文件"></a>1.1 复制ceph文件</h2><blockquote><p>需要cinder先对接ceph</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/config/zun/zun-compute</span><br><span class="line">ln -s /etc/kolla/config/cinder/ceph.conf /etc/kolla/config/zun/zun-compute/ceph.conf</span><br><span class="line">ln -s  /etc/kolla/config/cinder/ceph.client.cinder.keyring /etc/kolla/config/zun/zun-compute/ceph.client.cinder.keyring</span><br></pre></td></tr></table></figure><h1 id="2-重新引导"><a href="#2-重新引导" class="headerlink" title="2. 重新引导"></a>2. 重新引导</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode bootstrap-servers</span><br></pre></td></tr></table></figure><h2 id="2-1-常见问题"><a href="#2-1-常见问题" class="headerlink" title="2.1 常见问题"></a>2.1 常见问题</h2><h3 id="2-1-1-找不到ceph软件包"><a href="#2-1-1-找不到ceph软件包" class="headerlink" title="2.1.1 找不到ceph软件包"></a>2.1.1 找不到ceph软件包</h3><p>报错如下</p><blockquote><p>The repository ‘<a href="https://mirror.nju.edu.cn/ceph/debian-pacific">https://mirror.nju.edu.cn/ceph/debian-pacific</a> jammy Release’ does not have a Release file</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">TASK [openstack.kolla.baremetal : Enable ceph apt repository] ************************************************************************************************************************************************************************</span><br><span class="line">task path: /root/.ansible/collections/ansible_collections/openstack/kolla/roles/baremetal/tasks/configure-ceph-for-zun.yml:12</span><br><span class="line">Using module file /path/to/venv/lib/python3.10/site-packages/ansible/modules/apt_repository.py</span><br><span class="line">Pipelining is enabled.</span><br><span class="line">&lt;localhost&gt; ESTABLISH LOCAL CONNECTION FOR USER: root</span><br><span class="line">&lt;localhost&gt; EXEC /bin/sh -c &#x27;python &amp;&amp; sleep 0&#x27;</span><br><span class="line">fatal: [localhost]: FAILED! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;invocation&quot;: &#123;</span><br><span class="line">        &quot;module_args&quot;: &#123;</span><br><span class="line">            &quot;codename&quot;: null,</span><br><span class="line">            &quot;filename&quot;: &quot;ceph&quot;,</span><br><span class="line">            &quot;install_python_apt&quot;: true,</span><br><span class="line">            &quot;mode&quot;: null,</span><br><span class="line">            &quot;repo&quot;: &quot;deb https://mirror.nju.edu.cn/ceph/debian-pacific/ jammy main&quot;,</span><br><span class="line">            &quot;state&quot;: &quot;present&quot;,</span><br><span class="line">            &quot;update_cache&quot;: true,</span><br><span class="line">            &quot;update_cache_retries&quot;: 5,</span><br><span class="line">            &quot;update_cache_retry_max_delay&quot;: 12,</span><br><span class="line">            &quot;validate_certs&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;msg&quot;: &quot;Failed to update apt cache: E:The repository &#x27;https://mirror.nju.edu.cn/ceph/debian-pacific jammy Release&#x27; does not have a Release file., W:Updating from such a repository can&#x27;t be done securely, and is therefore disabled by default., W:See apt-secure(8) manpage for repository creation and user configuration details., W:https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/dists/jammy/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：ceph官方仓库没有jammy版本的软件包，但是Ubuntu官方有ceph-common这个软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ubuntu:~# apt search ceph-common</span><br><span class="line">Sorting... Done</span><br><span class="line">Full Text Search... Done</span><br><span class="line">ceph-common/jammy-updates 17.2.0-0ubuntu0.22.04.2 amd64</span><br><span class="line">  common utilities to mount and interact with a ceph storage cluster</span><br><span class="line"></span><br><span class="line">python3-ceph-common/jammy-updates 17.2.0-0ubuntu0.22.04.2 all</span><br><span class="line">  Python 3 utility libraries for Ceph</span><br></pre></td></tr></table></figure><p>解决，关闭zun自动配置ceph，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zun_configure_for_cinder_ceph = &quot;no&quot;</span><br></pre></td></tr></table></figure><p> 手动安装ceph-common软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ceph-common -y</span><br></pre></td></tr></table></figure><h1 id="3-重新部署"><a href="#3-重新部署" class="headerlink" title="3. 重新部署"></a>3. 重新部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="4-生成凭据文件"><a href="#4-生成凭据文件" class="headerlink" title="4. 生成凭据文件"></a>4. 生成凭据文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode post-deploy</span><br></pre></td></tr></table></figure><h1 id="5-安装zun-cli客户端"><a href="#5-安装zun-cli客户端" class="headerlink" title="5. 安装zun cli客户端"></a>5. 安装zun cli客户端</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-zunclient</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack各个CLI Client客户端安装</title>
      <link href="/2023/client-installation-of-each-cli-client-of-openstack/"/>
      <url>/2023/client-installation-of-each-cli-client-of-openstack/</url>
      
        <content type="html"><![CDATA[<p>找到官方文档中的“Language Bindings and Python Clients”就可以看到各个cli客户端了。</p><p>这里一次性全部安装完</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pip install python-muranoclient \</span><br><span class="line">python-ironicclient \</span><br><span class="line">python-cinderclient \</span><br><span class="line">python-brick-cinderclient-ext \</span><br><span class="line">python-senlinclient \</span><br><span class="line">python-magnumclient \</span><br><span class="line">python-zunclient \</span><br><span class="line">python-saharaclient \</span><br><span class="line">python-designateclient \</span><br><span class="line">python-keystoneclient \</span><br><span class="line">python-glanceclient \</span><br><span class="line">python-masakariclient \</span><br><span class="line">python-barbicanclient \</span><br><span class="line">python-octaviaclient \</span><br><span class="line">python-neutronclient \</span><br><span class="line">python-tackerclient \</span><br><span class="line">python-swiftclient \</span><br><span class="line">python-heatclient \</span><br><span class="line">osc-placement \</span><br><span class="line">python-cloudkittyclient \</span><br><span class="line">python-vitrageclient \</span><br><span class="line">python-manilaclient \</span><br><span class="line">aodhclient</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Trove数据库服务Daas，部署Ceilometer数据收集服务，Gnocchi对接Ceph</title>
      <link href="/2023/openstack-kolla-ansible-deploys-trove-database-service-daas-deploys-ceilometer-data-collection-service-and-gnocchi-connects-to-ceph/"/>
      <url>/2023/openstack-kolla-ansible-deploys-trove-database-service-daas-deploys-ceilometer-data-collection-service-and-gnocchi-connects-to-ceph/</url>
      
        <content type="html"><![CDATA[<p>书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128903360">OpenStack Kolla-Ansible部署Swift文件存储 对接Ceph RadosGW，Proxmox</a></p><p>本章我们继续来完成OpenStack示例配置组件之Web Application中的Trove数据库服务Daas、eilometer数据收集服务。OpenStack Kolla-Ansible部署Trove数据库服务Daas，部署Ceilometer数据收集服务</p><blockquote><p>这两个用kolla-ansible部署非常简单，只需要启用对应配置即可</p></blockquote><hr><h1 id="1-配置kolla"><a href="#1-配置kolla" class="headerlink" title="1. 配置kolla"></a>1. 配置kolla</h1><p>在部署机，找到global.yml，启用选项</p><blockquote><p> 开启ceilometer有前置条件，需要先开启Gnocchi</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enable_ceilometer: &quot;yes&quot;</span><br><span class="line">enable_ceilometer_ipmi: &quot;yes&quot;</span><br><span class="line">enable_trove: &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">enable_gnocchi: &quot;yes&quot;</span><br><span class="line">enable_gnocchi_statsd: &quot;yes&quot;</span><br><span class="line"></span><br><span class="line">gnocchi_backend_storage: &quot;ceph&quot;</span><br></pre></td></tr></table></figure><h1 id="2-配置ceph"><a href="#2-配置ceph" class="headerlink" title="2. 配置ceph"></a>2. 配置ceph</h1><h2 id="2-1-添加存储池"><a href="#2-1-添加存储池" class="headerlink" title="2.1 添加存储池"></a>2.1 添加存储池</h2><p>回到Proxmox GUI，创建一个名为gnocchi的存储池，用于保存与资源使用量相关的计量数据 </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936491315381693649131336.png" alt="16936491315381693649131336.png"></p><h2 id="2-2-创建身份"><a href="#2-2-创建身份" class="headerlink" title="2.2 创建身份"></a>2.2 创建身份</h2><p>在Proxmox shell </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.gnocchi mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=gnocchi&#x27; mgr &#x27;profile rbd pool=gnocchi&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>Ceph Capabilities能力文档：<a href="https://docs.ceph.com/en/latest/rados/operations/user-management/#authorization-capabilities">User Management — Ceph Documentation</a> </p></blockquote><h2 id="2-3-复制keyring"><a href="#2-3-复制keyring" class="headerlink" title="2.3 复制keyring"></a>2.3 复制keyring</h2><p> 注意：ip是部署机的。文件夹不存在需要先创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.gnocchi | ssh 10.10.1.80 sudo tee /etc/kolla/config/gnocchi/ceph.client.gnocchi.keyring</span><br></pre></td></tr></table></figure><h2 id="2-4-复制ceph-conf"><a href="#2-4-复制ceph-conf" class="headerlink" title="2.4 复制ceph.conf"></a>2.4 复制ceph.conf</h2><p>直接软链接glance现有的ceph.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/kolla/config/glance/ceph.conf /etc/kolla/config/gnocchi/ceph.conf</span><br></pre></td></tr></table></figure><h1 id="3-检查并重新部署"><a href="#3-检查并重新部署" class="headerlink" title="3. 检查并重新部署"></a>3. 检查并重新部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode prechecks &amp;&amp; kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="4-完成"><a href="#4-完成" class="headerlink" title="4. 完成"></a>4. 完成</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936491485361693649147609.png" alt="16936491485361693649147609.png"></p><hr><p>至此， OpenStack示例配置组件之Web Application（Cinder（块存储）、Glance（镜像服务）、Keystone（身份认证）、Horizon（仪表盘）、Neutron（网络服务）、Nova（计算服务）、Trove（数据库服务）、Swift（对象存储）、Ceilometer（数据收集）、Heat（编排服务））中的所有组件安装完毕</p><ul><li><a href="https://blog.csdn.net/qq_35485875/article/details/128868634">OpenStack Yoga安装部署，手把手使用kolla-ansible部署OpenStack</a></li><li><a href="https://blog.csdn.net/qq_35485875/article/details/128899909">OpenStack Kolla-Ansible部署Glance镜像服务对接Ceph，Proxmox</a></li><li><a href="https://blog.csdn.net/qq_35485875/article/details/128901696">OpenStack Kolla-Ansible部署Cinder块存储 对接Ceph，Proxmox</a></li><li><a href="https://blog.csdn.net/qq_35485875/article/details/128903360">OpenStack Kolla-Ansible部署Swift文件存储 对接Ceph RadosGW，Proxmox</a></li><li>OpenStack Kolla-Ansible部署Trove数据库服务Daas，部署Ceilometer数据收集服务（本文）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Designate域名解析服务DNS服务DNSaas</title>
      <link href="/2023/openstack-kolla-ansible-deploys-designate-domain-name-resolution-service-dns-service-dnsaas/"/>
      <url>/2023/openstack-kolla-ansible-deploys-designate-domain-name-resolution-service-dns-service-dnsaas/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128920630">OpenStack Kolla-Ansible部署Manila文件存储服务，对接Proxmox Ceph配置Manila文件存储</a></p><p>本章我们继续来完成OpenStack示例配置组件之Container Optimized中的Designate域名解析服务，OpenStack Kolla-Ansible部署Designate域名解析服务DNS服务DNSaas</p><blockquote><p>Designate 是 OpenStack 的多租户 DNSaaS 服务。它提供了一个带有集成 Keystone 身份验证的 REST API。它可以配置为根据 Nova 和 Neutron 操作自动生成记录。Designate 支持多种 DNS 服务器，包括 Bind9 和 PowerDNS 4。</p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936487215361693648721484.png" alt="16936487215361693648721484.png"></p><h1 id="1-启用-Designate-服务"><a href="#1-启用-Designate-服务" class="headerlink" title="1. 启用 Designate 服务"></a>1. 启用 Designate 服务</h1><p>在部署机，找到&#x2F;etc&#x2F;kolla&#x2F;globals.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable_designate: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h1 id="2-配置-Designate-选项"><a href="#2-配置-Designate-选项" class="headerlink" title="2. 配置 Designate 选项"></a>2. 配置 Designate 选项</h1><p>指定服务器的DNS名称记录主机名。</p><blockquote><p>随便写</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">designate_ns_record:</span><br><span class="line">  - &quot;ns1.dns.top&quot;</span><br></pre></td></tr></table></figure><h2 id="2-1-重新部署"><a href="#2-1-重新部署" class="headerlink" title="2.1 重新部署"></a>2.1 重新部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="3-Neutron-和-Nova-集成"><a href="#3-Neutron-和-Nova-集成" class="headerlink" title="3. Neutron 和 Nova 集成"></a>3. Neutron 和 Nova 集成</h1><p>在部署机</p><h2 id="3-1-安装cli客户端"><a href="#3-1-安装cli客户端" class="headerlink" title="3.1 安装cli客户端"></a>3.1 安装cli客户端</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-designateclient</span><br></pre></td></tr></table></figure><h2 id="3-2-为-Neutron-创建默认指定区域"><a href="#3-2-为-Neutron-创建默认指定区域" class="headerlink" title="3.2 为 Neutron 创建默认指定区域"></a>3.2 为 Neutron 创建默认指定区域</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ttt:~# openstack zone create --email admin@sample.openstack.org sample.openstack.org.</span><br><span class="line">+----------------+--------------------------------------+</span><br><span class="line">| Field          | Value                                |</span><br><span class="line">+----------------+--------------------------------------+</span><br><span class="line">| action         | CREATE                               |</span><br><span class="line">| attributes     |                                      |</span><br><span class="line">| created_at     | 2023-02-07T09:32:58.000000           |</span><br><span class="line">| description    | None                                 |</span><br><span class="line">| email          | admin@sample.openstack.org           |</span><br><span class="line">| id             | 17a50a3f-3f3d-4051-b9c4-f96a40f613e1 |</span><br><span class="line">| masters        |                                      |</span><br><span class="line">| name           | sample.openstack.org.                |</span><br><span class="line">| pool_id        | 31e5fa58-a51b-4c05-b1e5-b684c8c88371 |</span><br><span class="line">| project_id     | e77c46231954480fb6c3e2de0f23447b     |</span><br><span class="line">| serial         | 1675762378                           |</span><br><span class="line">| status         | PENDING                              |</span><br><span class="line">| transferred_at | None                                 |</span><br><span class="line">| ttl            | 3600                                 |</span><br><span class="line">| type           | PRIMARY                              |</span><br><span class="line">| updated_at     | None                                 |</span><br><span class="line">| version        | 1                                    |</span><br><span class="line">+----------------+--------------------------------------+</span><br></pre></td></tr></table></figure><p>复制这个id，17a50a3f-3f3d-4051-b9c4-f96a40f613e1 </p><h2 id="3-3-创建-designate-sink-自定义配置文件夹"><a href="#3-3-创建-designate-sink-自定义配置文件夹" class="headerlink" title="3.3 创建 designate-sink 自定义配置文件夹"></a>3.3 创建 designate-sink 自定义配置文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/config/designate/</span><br></pre></td></tr></table></figure><h2 id="3-4-附加指定区域-ID"><a href="#3-4-附加指定区域-ID" class="headerlink" title="3.4 附加指定区域 ID"></a>3.4 附加指定区域 ID</h2><p>创建文件 &#x2F;etc&#x2F;kolla&#x2F;config&#x2F;designate&#x2F;designate-sink.conf</p><p>注意替换id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[handler:nova_fixed]</span><br><span class="line">zone_id = 17a50a3f-3f3d-4051-b9c4-f96a40f613e1</span><br><span class="line">[handler:neutron_floatingip]</span><br><span class="line">zone_id = 17a50a3f-3f3d-4051-b9c4-f96a40f613e1</span><br></pre></td></tr></table></figure><h2 id="3-5-重新配置"><a href="#3-5-重新配置" class="headerlink" title="3.5 重新配置"></a>3.5 重新配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible reconfigure -i ./multinode --tags designate,neutron,nova</span><br></pre></td></tr></table></figure><h1 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h1><h2 id="4-1-列出可用网络"><a href="#4-1-列出可用网络" class="headerlink" title="4.1 列出可用网络"></a>4.1 列出可用网络</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack network list</span><br></pre></td></tr></table></figure><h2 id="4-2-将域关联到网络"><a href="#4-2-将域关联到网络" class="headerlink" title="4.2 将域关联到网络"></a>4.2 将域关联到网络</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack network set &lt;NETWORK_ID&gt; --dns-domain sample.openstack.org.</span><br></pre></td></tr></table></figure><h2 id="4-3-启动一个实例"><a href="#4-3-启动一个实例" class="headerlink" title="4.3 启动一个实例"></a>4.3 启动一个实例</h2><h2 id="4-4-查看-DNS-记录"><a href="#4-4-查看-DNS-记录" class="headerlink" title="4.4 查看 DNS 记录"></a>4.4 查看 DNS 记录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack recordset list sample.openstack.org.</span><br></pre></td></tr></table></figure><h2 id="4-5-查询实例DNS"><a href="#4-5-查询实例DNS" class="headerlink" title="4.5 查询实例DNS"></a>4.5 查询实例DNS</h2>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Manila文件存储服务，对接Proxmox Ceph配置Manila文件存储</title>
      <link href="/2023/openstack-kolla-ansible-deploys-manila-file-storage-service-and-connects-to-proxmox-ceph-to-configure-manila-file-storage/"/>
      <url>/2023/openstack-kolla-ansible-deploys-manila-file-storage-service-and-connects-to-proxmox-ceph-to-configure-manila-file-storage/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128916441">OpenStack Kolla-Ansible部署Octavia负载均衡服务</a></p><p>本章我们继续来完成OpenStack示例配置组件之Container Optimized中的Octavia负载均衡服务，OpenStack Kolla-Ansible部署Octavia负载均衡服务</p><blockquote><p>Manila 是 OpenStack 共享文件系统服务，用于将共享文件系统作为服务提供。马尼拉的一些目标是&#x2F;拥有：</p><ul><li><strong>基于组件的架构</strong>：快速添加新行为</li><li><strong>高可用</strong>：扩展到非常严重的工作负载</li><li><strong>容错</strong>：隔离进程避免级联故障</li><li><strong>可恢复</strong>：故障应该易于诊断、调试和纠正</li><li><strong>开放标准</strong>：成为社区驱动的 api 的参考实现</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936488665401693648866003.png" alt="16936488665401693648866003.png"></p><hr><h1 id="1-配置kolla"><a href="#1-配置kolla" class="headerlink" title="1. 配置kolla"></a>1. 配置kolla</h1><p>在部署机，globals.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enable_manila: &quot;yes&quot;</span><br><span class="line">enable_manila_backend_cephfs_native: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h1 id="2-添加ceph身份信息"><a href="#2-添加ceph身份信息" class="headerlink" title="2. 添加ceph身份信息"></a>2. 添加ceph身份信息</h1><p>在Proxmox shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.manila mgr &#x27;allow rw&#x27; mon &#x27;allow r&#x27;</span><br></pre></td></tr></table></figure><h1 id="3-配置Ceph-密钥环"><a href="#3-配置Ceph-密钥环" class="headerlink" title="3. 配置Ceph 密钥环"></a>3. 配置Ceph 密钥环</h1><p>将 Ceph 密钥环复制到 &#x2F;etc&#x2F;kolla&#x2F;config&#x2F;manila&#x2F;ceph.client.manila.keyring</p><p>注意ip是部署机的，没有文件夹的话先创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh 10.10.1.80 &quot;sudo mkdir -p /etc/kolla/config/manila&quot;</span><br><span class="line">ceph auth get-or-create client.manila | ssh 10.10.1.80 sudo tee /etc/kolla/config/manila/ceph.client.manila.keyring</span><br></pre></td></tr></table></figure><h1 id="4-复制ceph-conf"><a href="#4-复制ceph-conf" class="headerlink" title="4. 复制ceph.conf"></a>4. 复制ceph.conf</h1><p>由于glance已经有ceph.conf，所以可以直接软连接</p><blockquote><p>更多请参阅：<a href="https://blog.csdn.net/qq_35485875/article/details/128899909">OpenStack Kolla-Ansible部署Glance镜像服务对接Ceph，Proxmox_JamesCurtis的博客-CSDN博客</a> </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/kolla/config/glance/ceph.conf /etc/kolla/config/manila/ceph.conf</span><br></pre></td></tr></table></figure><h1 id="5-重新部署"><a href="#5-重新部署" class="headerlink" title="5. 重新部署"></a>5. 重新部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h1><h2 id="6-1-命令行"><a href="#6-1-命令行" class="headerlink" title="6.1 命令行"></a>6.1 命令行</h2><p>安装cli客户端 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-manilaclient</span><br></pre></td></tr></table></figure><p>列出共享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manila list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Octavia负载均衡服务</title>
      <link href="/2023/openstack-kolla-ansible-deploys-octavia-load-balancing-service/"/>
      <url>/2023/openstack-kolla-ansible-deploys-octavia-load-balancing-service/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128903360">OpenStack Kolla-Ansible部署Swift文件存储 对接Ceph RadosGW，Proxmox</a></p><p>本章我们继续来完成OpenStack示例配置组件之Container Optimized中的Octavia负载均衡服务，OpenStack Kolla-Ansible部署Octavia负载均衡服务</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936490115341693649010827.png" alt="16936490115341693649010827.png"></p><blockquote><p>Octavia 以服务的形式提供负载均衡。本指南涵盖了为 Amphora 驱动程序配置 Octavia。有关详细信息，请参阅Octavia 文档。安装指南是一个有用的参考。</p></blockquote><hr><h1 id="1-启用-Octavia"><a href="#1-启用-Octavia" class="headerlink" title="1. 启用 Octavia"></a>1. 启用 Octavia</h1><p>进入部署机，找到 &#x2F;etc&#x2F;kolla&#x2F;globals.yml，并设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable_octavia: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h1 id="2-自动生成证书"><a href="#2-自动生成证书" class="headerlink" title="2. 自动生成证书"></a>2. 自动生成证书</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible octavia-certificates</span><br></pre></td></tr></table></figure><p>证书和密钥将在 &#x2F;etc&#x2F;kolla&#x2F;config&#x2F;octavia.</p><h1 id="3-重新部署"><a href="#3-重新部署" class="headerlink" title="3. 重新部署"></a>3. 重新部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy --tags common,horizon,octavia</span><br></pre></td></tr></table></figure><h1 id="4-构建Amphora镜像"><a href="#4-构建Amphora镜像" class="headerlink" title="4. 构建Amphora镜像"></a>4. 构建Amphora镜像</h1><h2 id="4-1-安装依赖"><a href="#4-1-安装依赖" class="headerlink" title="4.1 安装依赖"></a>4.1 安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install debootstrap qemu-utils git kpartx</span><br></pre></td></tr></table></figure><h2 id="4-2-获取-Octavia-源代码"><a href="#4-2-获取-Octavia-源代码" class="headerlink" title="4.2 获取 Octavia 源代码"></a>4.2 获取 Octavia 源代码</h2><p>建议用国内git平台镜像一份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 官网命令（不建议）</span><br><span class="line"># git clone https://opendev.org/openstack/octavia -b stable/yoga</span><br><span class="line"># 镜像</span><br><span class="line">git clone https://jihulab.com/james-curtis/octavia.git -b stable/yoga</span><br></pre></td></tr></table></figure><h2 id="4-3-安装diskimage-builder"><a href="#4-3-安装diskimage-builder" class="headerlink" title="4.3 安装diskimage-builder"></a>4.3 安装diskimage-builder</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv dib-venv</span><br><span class="line">source dib-venv/bin/activate</span><br><span class="line">pip install diskimage-builder</span><br></pre></td></tr></table></figure><h2 id="4-4-镜像源"><a href="#4-4-镜像源" class="headerlink" title="4.4 镜像源"></a>4.4 镜像源</h2><blockquote><p>下一步需要下载大量文件，需要克隆几个仓库，建议使用jihulab.com。如果网关有魔法可以跳过这一步。</p></blockquote><p>下面是需要设置的部分环境变量 </p><ul><li>DIB_REPOLOCATION_amphora_agent（将安装在映像中的 amphora-agent 代码的位置）</li></ul><p>默认值：https :&#x2F;&#x2F;opendev.org&#x2F;openstack&#x2F;octavia</p><ul><li>DIB_REPOLOCATION_octavia_lib（将安装在映像中的 octavia-lib 代码的位置）</li></ul><p>默认值：https :&#x2F;&#x2F;opendev.org&#x2F;openstack&#x2F;octavia-lib</p><ul><li>DIB_PYPI_MIRROR_URL</li><li>DIB_REPOLOCATION_upper_constraints（upper-constraints.txt依赖包）</li></ul><p>默认值：<a href="https://opendev.org/openstack/requirements/raw/branch/master/upper-constraints.txt">https://opendev.org/openstack/requirements/raw/branch/master/upper-constraints.txt</a></p><ul><li>DIB_DISTRIBUTION_MIRROR（所选基本操作系统的镜像 URL）</li></ul><p>注意，这个镜像url是给Ubuntu用的，必须是http。推荐使用中国科学技术大学镜像（http）</p><p>导出环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export DIB_REPOLOCATION_amphora_agent=https://jihulab.com/james-curtis/octavia.git</span><br><span class="line">export DIB_REPOLOCATION_octavia_lib=https://jihulab.com/james-curtis/octavia-lib.git</span><br><span class="line">export DIB_DISTRIBUTION_MIRROR=http://mirrors.ustc.edu.cn/ubuntu</span><br><span class="line">export DIB_REPOLOCATION_upper_constraints=https://jihulab.com/james-curtis/requirements/-/raw/stable/yoga/upper-constraints.txt</span><br><span class="line">export DIB_PYPI_MIRROR_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">export DIB_NO_PYPI_PIP=1</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="4-5-创建-Amphora-镜像"><a href="#4-5-创建-Amphora-镜像" class="headerlink" title="4.5 创建 Amphora 镜像"></a>4.5 创建 Amphora 镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd octavia/diskimage-create</span><br><span class="line">./diskimage-create.sh</span><br></pre></td></tr></table></figure><p>构建成功输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2023-02-07 07:17:59.379 | Converting image using qemu-img convert</span><br><span class="line">2023-02-07 07:18:48.341 | Image file /root/octavia/diskimage-create/amphora-x64-haproxy.qcow2 created...</span><br><span class="line">2023-02-07 07:18:48.486 | Build completed successfully</span><br><span class="line">Successfully built the amphora using the stable/zed amphora-agent.</span><br><span class="line">Amphora image size: /root/octavia/diskimage-create/amphora-x64-haproxy.qcow2 380361216</span><br></pre></td></tr></table></figure><p> 完成后执行，注意切换python虚拟环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure><h3 id="4-5-1-常见问题"><a href="#4-5-1-常见问题" class="headerlink" title="4.5.1 常见问题"></a>4.5.1 常见问题</h3><p>有可能会碰到依赖版本冲突，整理日志之后如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2023-02-07 05:26:03.331 | ERROR: Cannot install octavia because these package versions have conflicting dependencies.</span><br><span class="line">2023-02-07 05:26:03.332 | </span><br><span class="line">2023-02-07 05:26:03.332 | The conflict is caused by:</span><br><span class="line">2023-02-07 05:26:03.332 |     keystonemiddleware 9.4.0 depends on oslo.cache&gt;=1.26.0</span><br><span class="line">2023-02-07 05:26:03.332 |     The user requested (constraint) oslo-cache===2.10.1</span><br><span class="line">2023-02-07 05:26:03.332 | </span><br><span class="line">2023-02-07 05:26:03.332 | To fix this you could try to:</span><br><span class="line">2023-02-07 05:26:03.332 | 1. loosen the range of package versions you&#x27;ve specified</span><br><span class="line">2023-02-07 05:26:03.332 | 2. remove package versions to allow pip attempt to solve the dependency conflict</span><br><span class="line">2023-02-07 05:26:03.332 | </span><br><span class="line">2023-02-07 05:26:03.332 | ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts</span><br><span class="line">2023-02-07 05:26:08.775 | Unmount /tmp/dib_build.vAReHkDS/mnt/var/cache/apt/archives</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2023-02-07 06:58:49.465 |      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 119.9/119.9 kB 341.3 kB/s eta 0:00:00</span><br><span class="line">2023-02-07 06:58:52.487 | ERROR: Cannot install octavia==11.0.1.dev16 because these package versions have conflicting dependencies.</span><br><span class="line">2023-02-07 06:58:52.488 | </span><br><span class="line">2023-02-07 06:58:52.488 | The conflict is caused by:</span><br><span class="line">2023-02-07 06:58:52.488 |     octavia 11.0.1.dev16 depends on octavia-lib&gt;=3.1.0</span><br><span class="line">2023-02-07 06:58:52.488 |     The user requested (constraint) octavia-lib===2.5.0</span><br><span class="line">2023-02-07 06:58:52.488 | </span><br><span class="line">2023-02-07 06:58:52.488 | To fix this you could try to:</span><br><span class="line">2023-02-07 06:58:52.488 | 1. loosen the range of package versions you&#x27;ve specified</span><br><span class="line">2023-02-07 06:58:52.488 | 2. remove package versions to allow pip attempt to solve the dependency conflict</span><br><span class="line">2023-02-07 06:58:52.488 | </span><br><span class="line">2023-02-07 06:58:52.488 | ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts</span><br><span class="line">2023-02-07 06:59:02.344 | Unmount /tmp/dib_build.AUyWgqMg/mnt/var/cache/apt/archives</span><br></pre></td></tr></table></figure><p> 这个之后需要手动编辑 <strong>upper-constraints.txt</strong> </p><p>先把文件下载过来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://jihulab.com/james-curtis/requirements/-/raw/stable/yoga/upper-constraints.txt -O /tmp/upper-constraints.txt</span><br></pre></td></tr></table></figure><p>然后编辑 <strong>upper-constraints.txt</strong></p><p>注释冲突的软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># oslo.cache===2.10.1</span><br><span class="line"># octavia-lib===2.5.0</span><br></pre></td></tr></table></figure><p>修改环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DIB_REPOLOCATION_upper_constraints=file:///tmp/upper-constraints.txt</span><br></pre></td></tr></table></figure><p> 重新构建镜像 </p><h1 id="5-激活octavia授权"><a href="#5-激活octavia授权" class="headerlink" title="5. 激活octavia授权"></a>5. 激活octavia授权</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. /etc/kolla/octavia-openrc.sh</span><br></pre></td></tr></table></figure><h1 id="6-在-Glance-中注册镜像"><a href="#6-在-Glance-中注册镜像" class="headerlink" title="6. 在 Glance 中注册镜像"></a>6. 在 Glance 中注册镜像</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack image create amphora-x64-haproxy.qcow2 --container-format bare --disk-format qcow2 --private --tag amphora --file /root/octavia/diskimage-create/amphora-x64-haproxy.qcow2 --property hw_architecture=&#x27;x86_64&#x27; --property hw_rng_model=virtio</span><br></pre></td></tr></table></figure><h1 id="7-验证结果"><a href="#7-验证结果" class="headerlink" title="7. 验证结果"></a>7. 验证结果</h1><h2 id="7-1-验证命令行"><a href="#7-1-验证命令行" class="headerlink" title="7.1 验证命令行"></a>7.1 验证命令行</h2><p>列出所有负载均衡器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack loadbalancer list</span><br></pre></td></tr></table></figure><p>如果出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack: &#x27;loadbalancer&#x27; is not an openstack command. See &#x27;openstack --help&#x27;.</span><br></pre></td></tr></table></figure><p>安装python-octaviaclient</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-octaviaclient</span><br></pre></td></tr></table></figure><p>没报错就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Swift文件存储 对接Ceph RadosGW，Proxmox</title>
      <link href="/2023/openstack-kolla-ansible-deploys-swift-file-storage-and-interfaces-with-ceph-radosgw-and-proxmox/"/>
      <url>/2023/openstack-kolla-ansible-deploys-swift-file-storage-and-interfaces-with-ceph-radosgw-and-proxmox/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128901696">OpenStack Kolla-Ansible部署Cinder块存储 对接Ceph，Proxmox</a></p><p>本章我们继续来完成OpenStack示例配置组件之Web Application中的Swift文件存储，OpenStack中的Swift文件存储对接Ceph RadosGW</p><blockquote><p>实际上应该是ceph RadosGW对接OpenStack Keystone身份认证</p><p>因为RadosGW提供了和Swift兼容的API，所有二者api是一样的，直接做个负载均衡到RadosGW就成了一个swift接口 </p></blockquote><hr><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>ceph官方latest文档已经很落后了，搞得整了好久才弄明白。要知道ceph.conf配置中的键如果是空格形式的（形如“rgw keystone api version”），这种是ceph octopus版本最后一次出现，在pacific版本改为下划线形式。</p><p>并且网上教程包括官网教程重点都在以Keystone V2版本api为例说明，没有V3接口版本的例子。</p><blockquote><p>求证：</p><p>octopus版本的ceph.conf例子：<a href="https://docs.ceph.com/en/octopus/rados/configuration/common/#example-ceph-conf">Common Settings — Ceph Documentation</a></p><p>pacific版本的ceph.conf例子：<a href="https://docs.ceph.com/en/pacific/rados/configuration/common/#example-ceph-conf">Common Settings — Ceph Documentation</a></p><p>发行索引：<a href="https://docs.ceph.com/en/latest/releases/">Ceph Releases (index) — Ceph Documentation</a></p></blockquote><p> <strong>重点：</strong></p><p>如果使用kolla-ansible部署RadosGW兼容的Swift，不要去找那种“手动部署RadosGW对接Swift”的教程，因为kolla-ansible已经为你准备好了OpenStack这边的一切配置。所有有关OpenStack这边的操作都不要做！！！</p><blockquote><p>RadosGW兼容的Swift：实际上没有部署Swift，可以理解为把原本Swift的api重定向到了RadosGW。而RadosGW有着和Swift一样的api。</p></blockquote><h1 id="2-Ceph配置"><a href="#2-Ceph配置" class="headerlink" title="2. Ceph配置"></a>2. Ceph配置</h1><p>RadosGW安装配置这里不再赘述，请参阅：<a href="https://blog.csdn.net/qq_35485875/article/details/128906309">ProxmoxVE配置Ceph Object Gateway对象网关，开启Ceph Object Storage对象存储_JamesCurtis的博客-CSDN博客</a></p><h2 id="2-1-检查Ceph-conf"><a href="#2-1-检查Ceph-conf" class="headerlink" title="2.1 检查Ceph.conf"></a>2.1 检查Ceph.conf</h2><p>做完之后你的ceph.conf应该大致如下：</p><blockquote><p>建议取消所有缩进</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">auth_client_required = cephx</span><br><span class="line">auth_cluster_required = cephx</span><br><span class="line">auth_service_required = cephx</span><br><span class="line">cluster_network = 10.10.11.1/24</span><br><span class="line">fsid = 59063611-9b12-4807-bf9d-ecfa60480d94</span><br><span class="line">mon_allow_pool_delete = true</span><br><span class="line">mon_host = 10.10.1.51</span><br><span class="line">ms_bind_ipv4 = true</span><br><span class="line">ms_bind_ipv6 = false</span><br><span class="line">osd_pool_default_min_size = 2</span><br><span class="line">osd_pool_default_size = 2</span><br><span class="line">public_network = 10.10.1.51/24</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">keyring = /etc/pve/priv/$cluster.$name.keyring</span><br><span class="line"></span><br><span class="line">[client.radosgw.pve1]</span><br><span class="line">host = pve1</span><br><span class="line">keyring = /etc/pve/priv/ceph.client.radosgw.keyring</span><br><span class="line"></span><br><span class="line">[mds]</span><br><span class="line">keyring = /var/lib/ceph/mds/ceph-$id/keyring</span><br><span class="line"></span><br><span class="line">[mds.pve1]</span><br><span class="line">host = pve1</span><br><span class="line">mds standby for name = pve</span><br><span class="line"></span><br><span class="line">[mon.pve1]</span><br><span class="line">public_addr = 10.10.1.51</span><br></pre></td></tr></table></figure><h2 id="2-2-对接Keystone"><a href="#2-2-对接Keystone" class="headerlink" title="2.2 对接Keystone"></a>2.2 对接Keystone</h2><p>这里需要先安装一个cli client工具。进入部署机，激活python虚拟环境，source admin授权文件，安装</p><blockquote><p>至于文档怎么找，入口在哪里，请参阅：<a href="https://blog.csdn.net/qq_35485875/article/details/128915192">https://blog.csdn.net/qq_35485875/article/details/128915192</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 激活python环境</span><br><span class="line">root@ttt:~# . /path/to/venv/bin/activate</span><br><span class="line"># 激活admin授权文件（后面用到）</span><br><span class="line">(venv) root@ttt:~# . /etc/kolla/admin-openrc.sh</span><br><span class="line"># 安装客户端</span><br><span class="line">(venv) root@ttt:~# pip install python-swiftclient</span><br></pre></td></tr></table></figure><p>验证安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ttt:~# swift --help</span><br></pre></td></tr></table></figure><h1 id="2-3-获取Auth-Token"><a href="#2-3-获取Auth-Token" class="headerlink" title="2.3 获取Auth Token"></a>2.3 获取Auth Token</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ttt:~# swift auth</span><br><span class="line">export OS_STORAGE_URL=http://10.10.1.250:6780/swift/v1</span><br><span class="line">export OS_AUTH_TOKEN=gAAAAABj4cEubXFK1PLGUicIMKMft6TiWitNcGhzHJxS2CWbetUEYIHbCJMx3v_iLQ142ZgjQ9KvtwLwoDrP-_RctuP45O9FTVr1dAVWrEKZngXpxX2uRVSELz7FP27vmZqtN0</span><br></pre></td></tr></table></figure><blockquote><p>刚兴趣的可以再试试下面两个命令：</p><p>swift auth -v</p><p>swift auth –debug </p></blockquote><p>把OS_AUTH_TOKEN记录下来，回到Proxmox shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;gAAAAABj4cID5BqJhJcRPfAJniQ-eqt66praFVJ2ZwSGUMd6QgdUplNUJlih-AGOzYw5t5HOWHiCsTGsMfU2uJpBwbXsC_2Y8hpqSwqqICth8xfLtnivPcKaT__K9CNASb92REHMECmQI&quot; &gt; /etc/ceph/keystone_admin_token</span><br></pre></td></tr></table></figure><h2 id="2-4-配置RadosGW"><a href="#2-4-配置RadosGW" class="headerlink" title="2.4 配置RadosGW"></a>2.4 配置RadosGW</h2><p>在Proxmox节点中。打开ceph.conf，在[client.radosgw.pve1]节点下新增：</p><blockquote><p>文档推荐：</p><ol><li>kolla-ansible官网(比较难懂)：<a href="https://docs.openstack.org/kolla-ansible/yoga/reference/storage/external-ceph-guide.html#radosgw">External Ceph — kolla-ansible 14.7.1.dev18 documentation</a> </li><li>Ceph官网：<a href="https://docs.ceph.com/en/quincy/radosgw/keystone/">Integrating with OpenStack Keystone — Ceph Documentation</a></li></ol><p><a href="https://docs.ceph.com/en/quincy/man/8/radosgw/">radosgw – rados REST gateway — Ceph Documentation</a></p><p><a href="https://docs.ceph.com/en/quincy/radosgw/config-ref/">Ceph Object Gateway Config Reference — Ceph Documentation</a></p><ol start="3"><li>SUSE官网（中文）：<a href="https://documentation.suse.com/zh-cn/ses/7/html/ses-all/cha-ceph-gw.html#ogw-keystone">https://documentation.suse.com/zh-cn/ses/7/html/ses-all/cha-ceph-gw.html#ogw-keystone</a></li></ol><p><a href="https://documentation.suse.com/zh-cn/ses/7/html/ses-all/cha-ceph-configuration.html#config-ogw">https://documentation.suse.com/zh-cn/ses/7/html/ses-all/cha-ceph-configuration.html#config-ogw</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># common</span><br><span class="line">rgw_keystone_url = 10.10.1.250:5000</span><br><span class="line">rgw_keystone_api_version = 3</span><br><span class="line"># rgw_keystone_verify_ssl = false</span><br><span class="line"></span><br><span class="line"># v3</span><br><span class="line">rgw_keystone_admin_domain = Default</span><br><span class="line">rgw_keystone_admin_project = admin</span><br><span class="line">rgw_keystone_admin_token = gAAAAABj4bqH7oqC7X45z41YGsrBR5U5RfMbHylk6nlk2ZquW58h0</span><br><span class="line"></span><br><span class="line"># other</span><br><span class="line"># rgw_s3_auth_use_keystone = true</span><br><span class="line"># rgw_swift_account_in_url = true</span><br></pre></td></tr></table></figure><p>完成后，整个ceph.conf看起来如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">auth_client_required = cephx</span><br><span class="line">auth_cluster_required = cephx</span><br><span class="line">auth_service_required = cephx</span><br><span class="line">cluster_network = 10.10.11.1/24</span><br><span class="line">fsid = 59063611-9b12-4807-bf9d-ecfa60480d94</span><br><span class="line">mon_allow_pool_delete = true</span><br><span class="line">mon_host = 10.10.1.51</span><br><span class="line">ms_bind_ipv4 = true</span><br><span class="line">ms_bind_ipv6 = false</span><br><span class="line">osd_pool_default_min_size = 2</span><br><span class="line">osd_pool_default_size = 2</span><br><span class="line">public_network = 10.10.1.51/24</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">keyring = /etc/pve/priv/$cluster.$name.keyring</span><br><span class="line"></span><br><span class="line">[client.radosgw.pve1]</span><br><span class="line">host = pve1</span><br><span class="line">keyring = /etc/pve/priv/ceph.client.radosgw.keyring</span><br><span class="line"></span><br><span class="line"># common</span><br><span class="line">rgw_keystone_url = 10.10.1.250:5000</span><br><span class="line">rgw_keystone_api_version = 3</span><br><span class="line"># rgw_keystone_verify_ssl = false</span><br><span class="line"></span><br><span class="line"># v3</span><br><span class="line">rgw_keystone_admin_domain = Default</span><br><span class="line">rgw_keystone_admin_project = admin</span><br><span class="line">rgw_keystone_admin_token = gAAAAABj4bqH7oqC7X45z41YGs</span><br><span class="line"></span><br><span class="line"># other</span><br><span class="line"># rgw_s3_auth_use_keystone = true</span><br><span class="line"># rgw_swift_account_in_url = true</span><br><span class="line"></span><br><span class="line">[mds]</span><br><span class="line">keyring = /var/lib/ceph/mds/ceph-$id/keyring</span><br><span class="line"></span><br><span class="line">[mds.pve1]</span><br><span class="line">host = pve1</span><br><span class="line">mds standby for name = pve</span><br><span class="line"></span><br><span class="line">[mon.pve1]</span><br><span class="line">public_addr = 10.10.1.51</span><br></pre></td></tr></table></figure><p> 上传保存，重启RadosGW</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# systemctl restart radosgw</span><br></pre></td></tr></table></figure><h1 id="3-kolla配置"><a href="#3-kolla配置" class="headerlink" title="3. kolla配置"></a>3. kolla配置</h1><h2 id="3-1-启用-Ceph-RadosGW-集成"><a href="#3-1-启用-Ceph-RadosGW-集成" class="headerlink" title="3.1 启用 Ceph RadosGW 集成"></a>3.1 启用 Ceph RadosGW 集成</h2><p>在部署机，global.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable_ceph_rgw: true</span><br></pre></td></tr></table></figure><h2 id="3-2-添加rgw主机"><a href="#3-2-添加rgw主机" class="headerlink" title="3.2 添加rgw主机"></a>3.2 添加rgw主机</h2><p>在enable_ceph_rgw: “yes”下面一行，增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph_rgw_hosts:</span><br><span class="line">  - host: rgw01</span><br><span class="line">    ip: 10.10.1.51</span><br><span class="line">    port: 7480</span><br></pre></td></tr></table></figure><p>host是名字随意，不需要解析dns，但是一定要填写ip</p><p>端口7480，是RadosGW默认端口，可以在RadosGW文档中查询到rgw_frontends属性</p><h1 id="4-重新部署"><a href="#4-重新部署" class="headerlink" title="4. 重新部署"></a>4. 重新部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h1><h2 id="5-1-验证负载均衡"><a href="#5-1-验证负载均衡" class="headerlink" title="5.1 验证负载均衡"></a>5.1 验证负载均衡</h2><blockquote><p>haproxy报告查看：<a href="https://blog.csdn.net/qq_35485875/article/details/128915789">https://blog.csdn.net/qq_35485875/article/details/128915789</a> </p></blockquote><p>radosgw_back都是绿色就行</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936493045351693649304108.png" alt="16936493045351693649304108.png"></p><h1 id="5-2-验证客户端"><a href="#5-2-验证客户端" class="headerlink" title="5.2 验证客户端"></a>5.2 验证客户端</h1><p>回到部署机，输入 swift stat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ttt:~# swift stat</span><br><span class="line">                                    Account: v1</span><br><span class="line">                                 Containers: 0</span><br><span class="line">                                    Objects: 0</span><br><span class="line">                                      Bytes: 0</span><br><span class="line">   Containers in policy &quot;default-placement&quot;: 0</span><br><span class="line">      Objects in policy &quot;default-placement&quot;: 0</span><br><span class="line">        Bytes in policy &quot;default-placement&quot;: 0</span><br><span class="line">Objects in policy &quot;default-placement-bytes&quot;: 0</span><br><span class="line">  Bytes in policy &quot;default-placement-bytes&quot;: 0</span><br><span class="line">                                X-Timestamp: 1675740884.45155</span><br><span class="line">                X-Account-Bytes-Used-Actual: 0</span><br><span class="line">                                 X-Trans-Id: tx000008f5efad48bd19d87-0063e1c6d4-96a42-default</span><br><span class="line">                     X-Openstack-Request-Id: tx000008f5efad48bd19d87-0063e1c6d4-96a42-default</span><br><span class="line">                              Accept-Ranges: bytes</span><br><span class="line">                               Content-Type: text/plain; charset=utf-8</span><br><span class="line">(venv) root@ttt:~# </span><br></pre></td></tr></table></figure><h1 id="5-3-验证Horizon"><a href="#5-3-验证Horizon" class="headerlink" title="5.3 验证Horizon"></a>5.3 验证Horizon</h1><p>重新登录Horizon，项目-&gt;对象存储-&gt;容器</p><p>随便创建一个</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936493265351693649325696.png" alt="16936493265351693649325696.png"></p><p>创建成功</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936493485401693649348161.png" alt="16936493485401693649348161.png"></p><p>上传文件，再下载，没问题</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936493665351693649365784.png" alt="16936493665351693649365784.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack haproxy Statistics Report统计报告怎么在哪里，haproxy Dashboard怎么打开</title>
      <link href="/2023/where-is-the-openstack-haproxy-statistics-report-statistics-report-and-how-to-open-the-haproxy-dashboard/"/>
      <url>/2023/where-is-the-openstack-haproxy-statistics-report-statistics-report-and-how-to-open-the-haproxy-dashboard/</url>
      
        <content type="html"><![CDATA[<p>haproxystats是HAProxy负载均衡器的统计数据收集器，它处理各种统计数据并将它们推送到图形系统（Graphite）。它旨在满足以下要求：</p><ol><li>快速且可配置的 HAProxy 统计数据处理</li><li>HAProxy 在多进程运行时执行聚合（nbproc &gt; 1）</li><li>以非常低的间隔（10 秒）提取统计信息</li><li>灵活地将统计信息分发到不同的系统（Graphite、kafka）</li></ol><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936495295341693649528613.png" alt="16936495295341693649528613.png"></p><hr><p>在任意计算节点上，找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/kolla/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>就可以看到设置了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    chroot /var/lib/haproxy</span><br><span class="line">    user haproxy</span><br><span class="line">    group haproxy</span><br><span class="line">    daemon</span><br><span class="line">    log 10.10.1.81:5140 local1</span><br><span class="line">    maxconn 40000</span><br><span class="line">    nbproc 1</span><br><span class="line">    stats socket /var/lib/kolla/haproxy/haproxy.sock group kolla mode 660</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    option redispatch</span><br><span class="line">    retries 3</span><br><span class="line">    timeout http-request 10s</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout queue 1m</span><br><span class="line">    timeout connect 10s</span><br><span class="line">    timeout client 1m</span><br><span class="line">    timeout server 1m</span><br><span class="line">    timeout check 10s</span><br><span class="line">    balance roundrobin</span><br><span class="line">    maxconn 10000</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">   bind 10.10.1.81:1984</span><br><span class="line">   mode http</span><br><span class="line">   stats enable</span><br><span class="line">   stats uri /</span><br><span class="line">   stats refresh 15s</span><br><span class="line">   stats realm Haproxy\ Stats</span><br><span class="line">   stats auth openstack:E9wg1JFttdHVKtHNyAPomDDSYdnNsFKbLwkUh9W1</span><br><span class="line"></span><br><span class="line">frontend status</span><br><span class="line">    bind 10.10.1.81:61313</span><br><span class="line">    bind 10.10.1.250:61313</span><br><span class="line">    mode http</span><br><span class="line">    monitor-uri /</span><br></pre></td></tr></table></figure><p>可以看到listen stats绑定的是10.10.1.81:1984</p><p>打开访问就行，用户密码是stats auth那一行</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack怎么找到官网CLI文档，openstack zone create命令不存在，怎么找到Designate CLI</title>
      <link href="/2023/openstack-how-to-find-the-official-website-cli-documentation-openstack-zone-create-command-does-not-exist-how-to-find-designate-cli/"/>
      <url>/2023/openstack-how-to-find-the-official-website-cli-documentation-openstack-zone-create-command-does-not-exist-how-to-find-designate-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="1-进入DOC"><a href="#1-进入DOC" class="headerlink" title="1. 进入DOC"></a>1. 进入DOC</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936497175351693649717024.png" alt="16936497175351693649717024.png"></p><h2 id="2-OpenStack-Python绑定和客户端的文档"><a href="#2-OpenStack-Python绑定和客户端的文档" class="headerlink" title="2. OpenStack Python绑定和客户端的文档"></a>2. OpenStack Python绑定和客户端的文档</h2><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936497275351693649727517.png" alt="16936497275351693649727517.png"></p><h1 id="3-找到所需组件的文档"><a href="#3-找到所需组件的文档" class="headerlink" title="3. 找到所需组件的文档"></a>3. 找到所需组件的文档</h1><blockquote><p>Unified OpenStack Client：python-openstackclient 的文档，一个统一的 shell 命令结构。 </p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936497375351693649737231.png" alt="16936497375351693649737231.png"></p><h1 id="4-完整文档"><a href="#4-完整文档" class="headerlink" title="4. 完整文档"></a>4. 完整文档</h1><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936497465351693649746399.png" alt="16936497465351693649746399.png"></p><h1 id="5-安装cli-client"><a href="#5-安装cli-client" class="headerlink" title="5. 安装cli client"></a>5. 安装cli client</h1><blockquote><p>python-designateclient包在 PyPI 上发布，因此可以使用 pip 工具安装，该工具将管理所有 python 依赖项的安装： </p></blockquote><p>可以发现没有 openstack zone create命令的原因是没有安装这个软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-designateclient</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ProxmoxVE配置Ceph Object Gateway对象网关，开启Ceph Object Storage对象存储</title>
      <link href="/2023/proxmoxve-configures-the-ceph-object-gateway-object-gateway-and-enables-ceph-object-storage-object-storage/"/>
      <url>/2023/proxmoxve-configures-the-ceph-object-gateway-object-gateway-and-enables-ceph-object-storage-object-storage/</url>
      
        <content type="html"><![CDATA[<p> 上篇：<a href="https://blog.csdn.net/qq_35485875/article/details/128906403">ProxmoxVE启用Ceph Dashboard仪表盘，配置Object Getaway对象网关</a></p><hr><blockquote><p>Ceph 对象网关是建立在 librados. 它在应用程序和 Ceph 存储集群之间提供了一个 RESTful 网关。Ceph 对象存储支持两种接口：</p><ol><li>S3 兼容：通过与 Amazon S3 RESTful API 的大部分子集兼容的接口提供对象存储功能。</li><li>Swift 兼容：通过与 OpenStack Swift API 的大部分子集兼容的接口提供对象存储功能。</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936499775391693649977331.png" alt="16936499775391693649977331.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936499915351693649990576.png" alt="16936499915351693649990576.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936500045381693650003669.png" alt="16936500045381693650003669.png"></p><hr><p>Proxmox Virtualization Environment (VE) 是一个出色的虚拟化平台。它具有许多其他企业平台所没有的强大功能。这些功能之一是 Ceph 支持，包括在 Proxmox 节点本身上运行 Ceph 的能力。除了将 Ceph 用于我的 VM 和容器之外，我还想利用 Ceph 对象网关为我的网站获取 S3 兼容存储。</p><p>我的 Proxmox 环境由 3 个节点组成：pve1、pve2和pve3，我想在所有三个节点上运行网关以实现高可用性（我在这些节点前面运行 HAProxy 以实现 SSL 终止、HA 和负载平衡）。</p><p>我从节点运行了以下命令pve1，但它可以从任何节点完成。</p><p>首先，我创建了密钥环来存储密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# ceph-authtool --create-keyring /etc/ceph/ceph.client.radosgw.keyring</span><br></pre></td></tr></table></figure><p> 接下来，我生成了密钥并将它们添加到密钥环中：（如果只有一台机器只要执行一条即可，需要自己注意修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# ceph-authtool /etc/ceph/ceph.client.radosgw.keyring -n client.radosgw.pve1 --gen-key</span><br><span class="line">root@pve1:~# ceph-authtool /etc/ceph/ceph.client.radosgw.keyring -n client.radosgw.pve2 --gen-key</span><br><span class="line">root@pve1:~# ceph-authtool /etc/ceph/ceph.client.radosgw.keyring -n client.radosgw.pve3 --gen-key</span><br></pre></td></tr></table></figure><p>然后我添加了适当的功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# ceph-authtool -n client.radosgw.pve1 --cap osd &#x27;allow rwx&#x27; --cap mon &#x27;allow rwx&#x27; /etc/ceph/ceph.client.radosgw.keyring</span><br><span class="line">root@pve1:~# ceph-authtool -n client.radosgw.pve2 --cap osd &#x27;allow rwx&#x27; --cap mon &#x27;allow rwx&#x27; /etc/ceph/ceph.client.radosgw.keyring</span><br><span class="line">root@pve1:~# ceph-authtool -n client.radosgw.pve3 --cap osd &#x27;allow rwx&#x27; --cap mon &#x27;allow rwx&#x27; /etc/ceph/ceph.client.radosgw.keyring</span><br></pre></td></tr></table></figure><p>最后，我将密钥添加到集群：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# ceph -k /etc/ceph/ceph.client.admin.keyring auth add client.radosgw.pve1 -i /etc/ceph/ceph.client.radosgw.keyring</span><br><span class="line">root@pve1:~# ceph -k /etc/ceph/ceph.client.admin.keyring auth add client.radosgw.pve2 -i /etc/ceph/ceph.client.radosgw.keyring</span><br><span class="line">root@pve1:~# ceph -k /etc/ceph/ceph.client.admin.keyring auth add client.radosgw.pve3 -i /etc/ceph/ceph.client.radosgw.keyring</span><br></pre></td></tr></table></figure><p>将密钥环复制到&#x2F;etc&#x2F;pve&#x2F;priv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# cp /etc/ceph/ceph.client.radosgw.keyring /etc/pve/priv</span><br></pre></td></tr></table></figure><p>将以下行添加到&#x2F;etc&#x2F;ceph&#x2F;ceph.conf：</p><p>如果没有解析dns，那就删掉 rgw_dns_name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[client.radosgw.pve1]</span><br><span class="line">        host = pve1</span><br><span class="line">        keyring = /etc/pve/priv/ceph.client.radosgw.keyring</span><br><span class="line">        rgw_dns_name = s3.example.net</span><br><span class="line"></span><br><span class="line">[client.radosgw.pve2]</span><br><span class="line">        host = pve2</span><br><span class="line">        keyring = /etc/pve/priv/ceph.client.radosgw.keyring</span><br><span class="line">        rgw_dns_name = s3.example.net</span><br><span class="line"></span><br><span class="line">[client.radosgw.pve3]</span><br><span class="line">        host = pve3</span><br><span class="line">        keyring = /etc/pve/priv/ceph.client.radosgw.keyring</span><br><span class="line">        rgw_dns_name = s3.example.net</span><br></pre></td></tr></table></figure><p>此时是时候登录每个节点并添加适当的包了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# apt install radosgw</span><br></pre></td></tr></table></figure><p> 然后启动它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# service radosgw start</span><br></pre></td></tr></table></figure><p>开机自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# systemctl enable radosgw </span><br></pre></td></tr></table></figure><p>如果一切顺利，RADOSGW 将为您创建一些默认池（见下文），您应该能够访问端口 7480 上的任何节点（例如<a href="http://pve1.example.net:7480）并且您应该看到是这样的：">http://pve1.example.net:7480）并且您应该看到是这样的：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListAllMyBucketsResult xmlns=&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&gt;</span><br><span class="line">    &lt;Owner&gt;</span><br><span class="line">        &lt;ID&gt;anonymous&lt;/ID&gt;</span><br><span class="line">        &lt;DisplayName/&gt;</span><br><span class="line">    &lt;/Owner&gt;</span><br><span class="line">    &lt;Buckets/&gt;</span><br><span class="line">&lt;/ListAllMyBucketsResult&gt;</span><br></pre></td></tr></table></figure><p>如果没有，您可以按照您的日志进行故障排除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/ceph/ceph-client.radosgw.pve1.log</span><br></pre></td></tr></table></figure><p>现在你可以设置你的第一个用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# radosgw-admin user create --uid=testuser --display-name=&quot;Test User&quot; --email=test.user@example.net</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ProxmoxVE启用Ceph Dashboard仪表盘，配置Object Getaway对象网关</title>
      <link href="/2023/proxmoxve-enables-the-ceph-dashboard-dashboard-and-configures-the-object-getaway-object-gateway/"/>
      <url>/2023/proxmoxve-enables-the-ceph-dashboard-dashboard-and-configures-the-object-getaway-object-gateway/</url>
      
        <content type="html"><![CDATA[<p>下篇：<a href="https://blog.csdn.net/qq_35485875/article/details/128906309">ProxmoxVE配置Ceph Object Gateway对象网关，开启Ceph Object Storage对象存储 </a></p><hr><p>Ceph Dashboard 是一个内置的基于 Web 的 Ceph 管理和监控应用程序，您可以通过它检查和管理集群中的各个方面和资源。它作为Ceph Manager Daemon模块实现。</p><p>新的Ceph Dashboard模块为 Ceph Manager 添加了基于 Web 的监控和管理。这个新模块的架构和功能源自openATTIC Ceph 管理和监控工具并受到其启发。开发由SUSE的 openATTIC 团队积极推动，并得到Red Hat和 Ceph 社区成员等公司的支持。</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936498705351693649870459.png" alt="16936498705351693649870459.png"></p><hr><h1 id="1-安装软件包"><a href="#1-安装软件包" class="headerlink" title="1. 安装软件包"></a>1. 安装软件包</h1><p>由于Dashboard和ceph本体是分开分发软件包的，所以需要额外安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ceph-mgr-dashboard -y</span><br></pre></td></tr></table></figure><h1 id="2-启用Dashboard"><a href="#2-启用Dashboard" class="headerlink" title="2. 启用Dashboard"></a>2. 启用Dashboard</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph mgr module enable dashboard</span><br></pre></td></tr></table></figure><h1 id="3-配置SSL-TLS-支持（可选，建议）"><a href="#3-配置SSL-TLS-支持（可选，建议）" class="headerlink" title="3. 配置SSL&#x2F;TLS 支持（可选，建议）"></a>3. 配置SSL&#x2F;TLS 支持（可选，建议）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph dashboard create-self-signed-cert</span><br></pre></td></tr></table></figure><h1 id="4-重新启动-Ceph-管理器进程"><a href="#4-重新启动-Ceph-管理器进程" class="headerlink" title="4. 重新启动 Ceph 管理器进程"></a>4. 重新启动 Ceph 管理器进程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph mgr module disable dashboard</span><br><span class="line">ceph mgr module enable dashboard</span><br></pre></td></tr></table></figure><h1 id="5-创建管理员"><a href="#5-创建管理员" class="headerlink" title="5. 创建管理员"></a>5. 创建管理员</h1><h2 id="5-1-创建密码文件"><a href="#5-1-创建密码文件" class="headerlink" title="5.1 创建密码文件"></a>5.1 创建密码文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;password&quot; &gt; /tmp/dash.pwd</span><br></pre></td></tr></table></figure><h2 id="5-2-创建用户"><a href="#5-2-创建用户" class="headerlink" title="5.2 创建用户"></a>5.2 创建用户</h2><blockquote><p>系统角色列表如下：    </p><p>administrator：允许所有安全范围的完全权限。</p><p>read-only：允许对除仪表板设置之外的所有安全范围的读取权限。</p><p>block-manager：允许对rbd-image、 rbd-mirroring和iscsi范围的完全权限。</p><p>rgw-manager：允许对rgw范围的完全权限</p><p>cluster-manager：允许对hosts、osd、 monitor、manager和config-opt范围的完全权限。</p><p>pool-manager：允许池范围的完全权限。</p><p>cephfs-manager：允许对cephfs范围的完全权限。</p></blockquote><p> 最后面那个administrator参数就是上面的角色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph dashboard ac-user-create &lt;username&gt; -i /tmp/dash.pwd administrator</span><br></pre></td></tr></table></figure><h1 id="6-查询地址端口"><a href="#6-查询地址端口" class="headerlink" title="6. 查询地址端口"></a>6. 查询地址端口</h1><p>地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config get mgr mgr/dashboard/server_addr</span><br></pre></td></tr></table></figure><p>端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config get mgr mgr/dashboard/server_port</span><br></pre></td></tr></table></figure><p>SSL端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph config get mgr mgr/dashboard/ssl_server_port</span><br></pre></td></tr></table></figure><p>您现在可以使用您的（启用 JavaScript 的）Web 浏览器访问仪表板，方法是将其指向任何主机名或 IP 地址以及运行管理器实例的选定 TCP 端口：例如，<code>http(s)://&lt;$IP&gt;:&lt;$PORT&gt;/</code></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Cinder块存储 对接Ceph，Proxmox</title>
      <link href="/2023/openstack-kolla-ansible-deploys-cinder-block-storage-to-interface-with-ceph-and-proxmox/"/>
      <url>/2023/openstack-kolla-ansible-deploys-cinder-block-storage-to-interface-with-ceph-and-proxmox/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128899909">OpenStack Kolla-Ansible部署Glance镜像服务对接Ceph，Proxmox</a></p><p>本章我们继续来完成OpenStack示例配置组件之Web Application中的Cinder块存储服务，OpenStack中的Cinder块存储对接Ceph</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936501215371693650120968.png" alt="16936501215371693650120968.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936501345371693650134249.png" alt="16936501345371693650134249.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936501465361693650145937.png" alt="16936501465361693650145937.png"></p><hr><h1 id="1-启用-Cinder-Ceph-后端"><a href="#1-启用-Cinder-Ceph-后端" class="headerlink" title="1. 启用 Cinder Ceph 后端"></a>1. 启用 Cinder Ceph 后端</h1><p>在部署机找到 <strong>&#x2F;etc&#x2F;kolla&#x2F;globals.yml</strong>，并设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enable_cinder: &quot;yes&quot;</span><br><span class="line">cinder_backend_ceph: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h1 id="2-复制Ceph-配置文件"><a href="#2-复制Ceph-配置文件" class="headerlink" title="2. 复制Ceph 配置文件"></a>2. 复制Ceph 配置文件</h1><p>添加文件&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;cinder&#x2F;ceph.conf</p><p>内容和&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;glance&#x2F;ceph.conf 内容一样，可以使用软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/config/cinder &amp;&amp; ln -s /etc/kolla/config/glance/ceph.conf /etc/kolla/config/cinder/ceph.conf</span><br></pre></td></tr></table></figure><h1 id="3-复制Ceph-keyring文件"><a href="#3-复制Ceph-keyring文件" class="headerlink" title="3. 复制Ceph keyring文件"></a>3. 复制Ceph keyring文件</h1><p>一共有三个</p><ul><li>&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;cinder&#x2F;cinder-volume&#x2F;<ceph_cinder_keyring></li><li>&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;cinder&#x2F;cinder-backup&#x2F;<ceph_cinder_keyring></li><li>&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;cinder&#x2F;cinder-backup&#x2F;<ceph_cinder_backup_keyring></li></ul><p>在部署机创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/config/cinder/cinder-volume</span><br><span class="line">mkdir -p /etc/kolla/config/cinder/cinder-backup</span><br></pre></td></tr></table></figure><p>回到proxmox shell，注意这个10.10.1.80是部署机的ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.cinder | ssh 10.10.1.80 sudo tee /etc/kolla/config/cinder/cinder-volume/ceph.client.cinder.keyring</span><br><span class="line">ceph auth get-or-create client.cinder | ssh 10.10.1.80 sudo tee /etc/kolla/config/cinder/cinder-backup/ceph.client.cinder.keyring</span><br><span class="line">ceph auth get-or-create client.cinder-backup | ssh 10.10.1.80 sudo tee /etc/kolla/config/cinder/cinder-backup/ceph.client.cinder-backup.keyring</span><br></pre></td></tr></table></figure><blockquote><p>cinder-backup需要两个密钥环来访问卷和备份池。</p></blockquote><h1 id="4-配置Nova允许访问Cinder卷"><a href="#4-配置Nova允许访问Cinder卷" class="headerlink" title="4. 配置Nova允许访问Cinder卷"></a>4. 配置Nova允许访问Cinder卷</h1><blockquote><p>Ceph RBD 可用作 Nova 实例临时磁盘的存储后端。这避免了对计算节点上实例的本地存储的要求。它提高了迁移性能，因为不需要在管理程序之间复制实例的临时磁盘。</p></blockquote><h2 id="4-1-启用-Nova-Ceph-后端"><a href="#4-1-启用-Nova-Ceph-后端" class="headerlink" title="4.1 启用 Nova Ceph 后端"></a>4.1 启用 Nova Ceph 后端</h2><p>在部署机找到 <strong>&#x2F;etc&#x2F;kolla&#x2F;globals.yml</strong>，并设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nova_backend_ceph: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h2 id="4-2-配置-Ceph-身份验证详细信息"><a href="#4-2-配置-Ceph-身份验证详细信息" class="headerlink" title="4.2 配置 Ceph 身份验证详细信息"></a>4.2 配置 Ceph 身份验证详细信息</h2><p>在部署机找到 <strong>&#x2F;etc&#x2F;kolla&#x2F;globals.yml</strong>，并设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph_nova_user: &quot;cinder&quot;</span><br></pre></td></tr></table></figure><h2 id="4-3-Ceph-配置文件复制"><a href="#4-3-Ceph-配置文件复制" class="headerlink" title="4.3 Ceph 配置文件复制"></a>4.3 Ceph 配置文件复制</h2><p>这里直接软连接glance的ceph.conf就行，所有的ceph.conf都可以是一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/config/nova/ &amp;&amp; ln -s /etc/kolla/config/glance/ceph.conf /etc/kolla/config/nova/ceph.conf</span><br></pre></td></tr></table></figure><h2 id="4-4-Ceph-密钥环文件复制"><a href="#4-4-Ceph-密钥环文件复制" class="headerlink" title="4.4 Ceph 密钥环文件复制"></a>4.4 Ceph 密钥环文件复制</h2><p> 回到proxmox shell，注意这个10.10.1.80是部署机的ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.cinder | ssh 10.10.1.80 sudo tee /etc/kolla/config/nova/ceph.client.cinder.keyring</span><br></pre></td></tr></table></figure><h1 id="5-重新部署"><a href="#5-重新部署" class="headerlink" title="5. 重新部署"></a>5. 重新部署</h1><p>回到部署机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="6-验证结果"><a href="#6-验证结果" class="headerlink" title="6. 验证结果"></a>6. 验证结果</h1><h2 id="6-1-验证docker"><a href="#6-1-验证docker" class="headerlink" title="6.1. 验证docker"></a>6.1. 验证docker</h2><p>在任意存储节点 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@control01:~# docker ps | grep cinder</span><br><span class="line">92905efa4637   quay.nju.edu.cn/openstack.kolla/ubuntu-source-cinder-backup:yoga               &quot;dumb-init --single-…&quot;   5 minutes ago   Up 5 minutes (healthy)              cinder_backup</span><br><span class="line">1168528d13a7   quay.nju.edu.cn/openstack.kolla/ubuntu-source-cinder-volume:yoga               &quot;dumb-init --single-…&quot;   5 minutes ago   Up 5 minutes (healthy)              cinder_volume</span><br><span class="line">2a8bbbeb6d1a   quay.nju.edu.cn/openstack.kolla/ubuntu-source-cinder-scheduler:yoga            &quot;dumb-init --single-…&quot;   6 minutes ago   Up 6 minutes (healthy)              cinder_scheduler</span><br><span class="line">39bda6a9fc42   quay.nju.edu.cn/openstack.kolla/ubuntu-source-cinder-api:yoga                  &quot;dumb-init --single-…&quot;   6 minutes ago   Up 6 minutes (healthy)              cinder_api</span><br><span class="line">root@control01:~# </span><br></pre></td></tr></table></figure><h2 id="6-2-创建卷"><a href="#6-2-创建卷" class="headerlink" title="6.2 创建卷"></a>6.2 创建卷</h2><p>回到Horizon，可以看到在 项目 中会多出一个卷。.</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936501665351693650166117.png" alt="16936501665351693650166117.png"></p><p>这里随便新建一个任意大小的卷，能创建成功就没问题。</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936501745361693650174022.png" alt="16936501745361693650174022.png"></p><p>回到proxmox看下存储池里面有没有这个卷，注意卷的ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# rbd ls -p volumes</span><br><span class="line">volume-3c9ccc53-ae51-4000-a85a-47cb9249dd10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack Kolla-Ansible部署Glance镜像服务对接Ceph，Proxmox</title>
      <link href="/2023/openstack-kolla-ansible-deploys-glance-image-service-to-connect-with-ceph-and-proxmox/"/>
      <url>/2023/openstack-kolla-ansible-deploys-glance-image-service-to-connect-with-ceph-and-proxmox/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128868634">OpenStack Yoga安装部署，手把手使用kolla-ansible部署OpenStack</a></p><p>本章我们继续来，OpenStack中的Glance镜像服务对接Ceph</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936502745351693650274372.png" alt="16936502745351693650274372.png"></p><hr><h1 id="1-启用-Glance-Ceph-后端"><a href="#1-启用-Glance-Ceph-后端" class="headerlink" title="1. 启用 Glance Ceph 后端"></a>1. 启用 Glance Ceph 后端</h1><p>在部署机上找到 &#x2F;etc&#x2F;kolla&#x2F;globals.yml</p><p>讲 glance_backend_ceph 修改为 yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glance_backend_ceph: &quot;yes&quot;</span><br></pre></td></tr></table></figure><h1 id="2-创建存储池"><a href="#2-创建存储池" class="headerlink" title="2. 创建存储池"></a>2. 创建存储池</h1><p>进入proxmox shell</p><p> 创建Cinder和Glance所需的存储池</p><blockquote><p>存储池名字不要改！！！除非你知道如何修改其他参数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph osd pool create volumes</span><br><span class="line">ceph osd pool create images</span><br><span class="line">ceph osd pool create backups</span><br><span class="line">ceph osd pool create vms</span><br></pre></td></tr></table></figure><p>新创建的池必须在使用前进行初始化。使用该rbd工具初始化池：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rbd pool init volumes</span><br><span class="line">rbd pool init images</span><br><span class="line">rbd pool init backups</span><br><span class="line">rbd pool init vms</span><br></pre></td></tr></table></figure><h1 id="3-配置-OPENSTACK-CEPH-客户端"><a href="#3-配置-OPENSTACK-CEPH-客户端" class="headerlink" title="3. 配置 OPENSTACK CEPH 客户端"></a>3. 配置 OPENSTACK CEPH 客户端</h1><p>只要使用了ceph客户端就需要ceph.conf。这里需要在每个需要使用到ceph客户端的节点创建一个ceph.conf</p><p>找到proxmox ceph中的配置文件</p><p>在gui中的 “数据中心-&gt;节点-&gt;Ceph-&gt;配置-&gt;左上角的配置” 这里就是ceph.conf，对应于文件系统中的 “&#x2F;etc&#x2F;ceph&#x2F;ceph.conf”</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936502865351693650285724.png" alt="16936502865351693650285724.png"></p><p>在部署机的 <strong>&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;glance&#x2F;ceph.conf</strong> 中粘贴这个文件（没有这个文件的话创建一个）</p><p>最后只保留 [global] 节点，其他的都删了。注意取消缩进</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936503145351693650314515.png" alt="16936503145351693650314515.png"></p><h1 id="4-创建glance-cinder-ceph账户"><a href="#4-创建glance-cinder-ceph账户" class="headerlink" title="4. 创建glance cinder ceph账户"></a>4. 创建glance cinder ceph账户</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.glance mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=images&#x27; mgr &#x27;profile rbd pool=images&#x27;</span><br><span class="line">ceph auth get-or-create client.cinder mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=volumes, profile rbd pool=vms, profile rbd-read-only pool=images&#x27; mgr &#x27;profile rbd pool=volumes, profile rbd pool=vms&#x27;</span><br><span class="line">ceph auth get-or-create client.cinder-backup mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=backups&#x27; mgr &#x27;profile rbd pool=backups&#x27;</span><br></pre></td></tr></table></figure><h1 id="5-复制keyring"><a href="#5-复制keyring" class="headerlink" title="5. 复制keyring"></a>5. 复制keyring</h1><p>将 Ceph keyring复制到 <strong>&#x2F;etc&#x2F;kolla&#x2F;config&#x2F;glance&#x2F;ceph.client.glance.keyring</strong>，注意10.10.1.80是部署机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph auth get-or-create client.glance | ssh 10.10.1.80 sudo tee /etc/kolla/config/glance/ceph.client.glance.keyring</span><br></pre></td></tr></table></figure><h1 id="6-重新部署"><a href="#6-重新部署" class="headerlink" title="6. 重新部署"></a>6. 重新部署</h1><p>在部署机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible -i ./multinode deploy</span><br></pre></td></tr></table></figure><h1 id="7-验证"><a href="#7-验证" class="headerlink" title="7. 验证"></a>7. 验证</h1><h2 id="7-1-上传镜像"><a href="#7-1-上传镜像" class="headerlink" title="7.1 上传镜像"></a>7.1 上传镜像</h2><p>下载一个cirros-0.6.1-x86_64-disk.img镜像测试（很小20M）</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936503265361693650326517.png" alt="16936503265361693650326517.png"></p><p> 看到是运行中，那就大差不差已经成功了</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936503425391693650342492.png" alt="16936503425391693650342492.png"></p><h2 id="7-2-验证存储池文件列表"><a href="#7-2-验证存储池文件列表" class="headerlink" title="7.2 验证存储池文件列表"></a>7.2 验证存储池文件列表</h2><p>回到proxmox shell中，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbd ls -p images</span><br></pre></td></tr></table></figure><p>显示如下，再对比一下上图的id，是一致的，说明成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# rbd ls -p images</span><br><span class="line">255dd8a4-c442-4d09-a1a1-878466424253</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OPENSTACK LANDSCAPE云原生景观 | OpenStack地图</title>
      <link href="/2023/openstack-landscape-cloud-native-landscape-openstack-map/"/>
      <url>/2023/openstack-landscape-cloud-native-landscape-openstack-map/</url>
      
        <content type="html"><![CDATA[<p> OpenStack 被分解为服务，允许您根据需要即插即用组件。openstack 地图为您提供了 openstack 景观的“一目了然”视图，以了解这些服务适合的位置以及它们如何协同工作。 </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936504175391693650416940.png" alt="16936504175391693650416940.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack使用Skyline Dashboard面板替换默认Horizon面板</title>
      <link href="/2023/openstack-replaces-the-default-horizon-panel-with-the-skyline-dashboard-panel/"/>
      <url>/2023/openstack-replaces-the-default-horizon-panel-with-the-skyline-dashboard-panel/</url>
      
        <content type="html"><![CDATA[<p> 书接上回 <a href="https://blog.csdn.net/qq_35485875/article/details/128868634">OpenStack Yoga安装使用kolla-ansible</a> </p><blockquote><p>忘记提示了。如果截止发稿今天，使用最新zed版本，在最后一步部署阶段会报错，好像是rabbitMQ重启失败。所以建议使用最新版再退一个版本</p></blockquote><hr><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://opendev.org/openstack/skyline-apiserver/src/branch/master/kolla/README-zh_CN.md">skyline-apiserver&#x2F;README-zh_CN.md at master - skyline-apiserver - OpenDev: Free Software Needs Free Tools</a></p><h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><ul><li>一个至少运行核心组件的 OpenStack 环境, 并能通过 Keystone endpoint 访问 OpenStack 组件</li><li>一个安装有容器引擎的 (docker 或 podman) 的 Linux 服务器</li></ul><h1 id="1-镜像源"><a href="#1-镜像源" class="headerlink" title="1. 镜像源"></a>1. 镜像源</h1><p>找到github中OpenStack对应与openstack&#x2F;skyline-apiserver的镜像，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 官方https://opendev.org/openstack/skyline-apiserver</span><br><span class="line"># github 如下</span><br><span class="line">https://github.com/openstack/skyline-apiserver</span><br></pre></td></tr></table></figure><p>任意找一个国内git平台克隆一份。我这里使用jihulab.com</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936505705351693650569618.png" alt="16936505705351693650569618.png"></p><h1 id="2-下载skyline-yaml"><a href="#2-下载skyline-yaml" class="headerlink" title="2. 下载skyline.yaml"></a>2. 下载skyline.yaml</h1><p>找到etc&#x2F;skyline.yaml.sample，这个文件</p><p>打开这个文件原始链接，下载到服务器去</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936505805351693650580144.png" alt="16936505805351693650580144.png"></p><p>得到如下链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://jihulab.com/james-curtis/skyline-apiserver/-/raw/master/etc/skyline.yaml.sample</span><br></pre></td></tr></table></figure><p> 然后输入下面命令，下载到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/skyline &amp;&amp; wget https://jihulab.com/james-curtis/skyline-apiserver/-/raw/master/etc/skyline.yaml.sample  -O /etc/skyline/skyline.yaml</span><br></pre></td></tr></table></figure><h1 id="3-编辑配置skyline-yaml"><a href="#3-编辑配置skyline-yaml" class="headerlink" title="3. 编辑配置skyline.yaml"></a>3. 编辑配置skyline.yaml</h1><p>根据实际的环境修改以下参数</p><ul><li>database_url</li></ul><p> 修改为如下，注意：ip是浮动IP，SKYLINE_DBPASS这个是数据库用户密码 可以自定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">database_url: mysql://skyline:SKYLINE_DBPASS@10.10.1.250:3306/skyline</span><br></pre></td></tr></table></figure><ul><li>keystone_url</li></ul><p>将 127.0.0.1 修改为浮动IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keystone_url: http://10.10.1.250:35357/v3/</span><br></pre></td></tr></table></figure><ul><li>prometheus_endpoint</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prometheus_endpoint: http://10.10.1.250:9091</span><br></pre></td></tr></table></figure><ul><li>system_user_password</li></ul><p>设置你的skyline密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system_user_password: &#x27;SKYLINE_PASS&#x27;</span><br></pre></td></tr></table></figure><h1 id="4-配置数据库"><a href="#4-配置数据库" class="headerlink" title="4. 配置数据库"></a>4. 配置数据库</h1><h2 id="4-1-创建-skyline-数据库"><a href="#4-1-创建-skyline-数据库" class="headerlink" title="4.1 创建 skyline 数据库"></a>4.1 创建 skyline 数据库</h2><p>进入docker环境，命令：docker exec -it mariadb bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# docker exec -it mariadb bash</span><br><span class="line">(mariadb)[mysql@ubuntu /]$ </span><br></pre></td></tr></table></figure><p>获取mariadb密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/kolla/passwords.yml | grep ^database_password</span><br></pre></td></tr></table></figure><p>连接mariadb，命令：mysql -u root -p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(mariadb)[mysql@ubuntu /]$ mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 6407</span><br><span class="line">Server version: 10.6.11-MariaDB-1:10.6.11+maria~ubu2004-log mariadb.org binary distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS skyline DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><h2 id="4-2-授予对数据库的适当访问权限"><a href="#4-2-授予对数据库的适当访问权限" class="headerlink" title="4.2 授予对数据库的适当访问权限"></a>4.2 授予对数据库的适当访问权限</h2><p>SKYLINE_DBPASS是数据库用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON skyline.* TO &#x27;skyline&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;SKYLINE_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON skyline.* TO &#x27;skyline&#x27;@&#x27;%&#x27;  IDENTIFIED BY &#x27;SKYLINE_DBPASS&#x27;;</span><br></pre></td></tr></table></figure><p>之后推出MariaDB环境，输入exit</p><p>再退出docker环境，输入exit</p><h2 id="5-创建-skyline-服务凭证"><a href="#5-创建-skyline-服务凭证" class="headerlink" title="5. 创建 skyline 服务凭证"></a>5. 创建 skyline 服务凭证</h2><p>如果没有进入python虚拟环境，先激活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /path/to/venv/bin/activate</span><br></pre></td></tr></table></figure><p> 然后创建服务凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(venv) root@ubuntu:~# . /etc/kolla/admin-openrc.sh</span><br><span class="line">(venv) root@ubuntu:~# openstack user create --domain default --password SKYLINE_PASS skyline</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| Field               | Value                            |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">| domain_id           | default                          |</span><br><span class="line">| enabled             | True                             |</span><br><span class="line">| id                  | cef488018dd542d9b12a6260f1413194 |</span><br><span class="line">| name                | skyline                          |</span><br><span class="line">| options             | &#123;&#125;                               |</span><br><span class="line">| password_expires_at | None                             |</span><br><span class="line">+---------------------+----------------------------------+</span><br><span class="line">(venv) root@ubuntu:~# openstack role add --project service --user skyline admin</span><br><span class="line">(venv) root@ubuntu:~# </span><br></pre></td></tr></table></figure><h1 id="6-运行-skyline-bootstrap-容器进行初始化引导"><a href="#6-运行-skyline-bootstrap-容器进行初始化引导" class="headerlink" title="6. 运行 skyline_bootstrap 容器进行初始化引导"></a>6. 运行 skyline_bootstrap 容器进行初始化引导</h1><p>这里注意使用源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 官网命令</span><br><span class="line"># docker run -d --name skyline_bootstrap -e KOLLA_BOOTSTRAP=&quot;&quot; -v /etc/skyline/skyline.yaml:/etc/skyline/skyline.yaml --net=host 99cloud/skyline:latest</span><br></pre></td></tr></table></figure><p>这里我使用南京大学的docker hub源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name skyline_bootstrap -e KOLLA_BOOTSTRAP=&quot;&quot; -v /etc/skyline/skyline.yaml:/etc/skyline/skyline.yaml --net=host docker.nju.edu.cn/99cloud/skyline:latest</span><br></pre></td></tr></table></figure><h1 id="7-初始化引导完成后运行-skyline-服务"><a href="#7-初始化引导完成后运行-skyline-服务" class="headerlink" title="7. 初始化引导完成后运行 skyline 服务"></a>7. 初始化引导完成后运行 skyline 服务</h1><p> 删除引导容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f skyline_bootstrap</span><br></pre></td></tr></table></figure><p>运行 skyline 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name skyline --restart=always -v /etc/skyline/skyline.yaml:/etc/skyline/skyline.yaml --net=host docker.nju.edu.cn/99cloud/skyline:latest</span><br></pre></td></tr></table></figure><hr><p>完成。</p><p>现在你可以访问仪表盘: https:&#x2F;&#x2F;&lt;浮动ip&gt;:9999</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936505995351693650598690.png" alt="16936505995351693650598690.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936506075361693650606920.png" alt="16936506075361693650606920.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936506155351693650614565.png" alt="16936506155351693650614565.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt使用CMake在Clion中运行显示出的UI界面看起来很老，很过时怎么办？CMake下的Qt怎么使用SQLite？</title>
      <link href="/2022/what-should-i-do-if-the-ui-interface-displayed-when-qt-is-run-in-clion-using-cmake-looks-very-old-and-outdated-how-does-qt-under-cmake-use-sqlite/"/>
      <url>/2022/what-should-i-do-if-the-ui-interface-displayed-when-qt-is-run-in-clion-using-cmake-looks-very-old-and-outdated-how-does-qt-under-cmake-use-sqlite/</url>
      
        <content type="html"><![CDATA[<h1 id="一、问题概述"><a href="#一、问题概述" class="headerlink" title="一、问题概述"></a>一、问题概述</h1><p>如果使用Clion默认配置编译出来的UI界面看起来很老套，就像是win2000的界面。但是如果使用Qt Creator运行就没有问题，是现代windows的界面</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936509765371693650975967.png" alt="16936509765371693650975967.png"></p><h1 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h1><p>最后经过一番搜索，在stackoverflow上找到了类似的问题。不过我这里提供一个更好的解决方案。</p><p>包括SQLite等其他模块会报错无法加载DLL驱动，“QSqlDatabase: QSQLITE driver not loaded”，都会涉及到这个问题，就是 cmake-build-debug 目录下的文件没有拿到Qt中MinGW下的plugins目录</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936509875381693650987433.png" alt="16936509875381693650987433.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936509955371693650995461.png" alt="16936509955371693650995461.png"></p><p> 此时只要把，D:\Qt\Qt5.14.2\5.14.2\mingw73_64\plugins目录下的东西复制到cmake-build-debug下面就可以了</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936510065371693651005841.png" alt="16936510065371693651005841.png"></p><p>不过这并不能一劳永逸，重新build项目之后还是需要手动配置 </p><h1 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h1><p>在CMakeLists.txt中的if (WIN32)语句末尾，添加下面两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_custom_command(TARGET $&#123;PROJECT_NAME&#125; POST_BUILD</span><br><span class="line">        COMMAND $&#123;CMAKE_COMMAND&#125; -E copy_directory &quot;$&#123;QT_INSTALL_PATH&#125;/plugins/&quot; &quot;$&lt;TARGET_FILE_DIR:$&#123;PROJECT_NAME&#125;&gt;/&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936510165371693651016389.png" alt="16936510165371693651016389.png"></p><p> 此时重新build项目再运行的时候会自动检查对应的plugins是否存在</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>chrome浏览器 firefox浏览器指定出口网卡进行上网 双网卡上网怎么配置</title>
      <link href="/2022/chrome-browser-and-firefox-browser-specify-the-export-network-card-for-internet-access-how-to-configure-dual-network-card-for-internet-access/"/>
      <url>/2022/chrome-browser-and-firefox-browser-specify-the-export-network-card-for-internet-access-how-to-configure-dual-network-card-for-internet-access/</url>
      
        <content type="html"><![CDATA[<p>背景：强制应用程序使用特定的网络接口</p><p>我正在使用多个网络接口（LAN 和无线），并且我注意到有一种方法(windows下的跃点数)可以更改首选接口的顺序。我如何使用有线网络（安全地）工作、检查电子邮件等，并使用无线 VLAN 访问其他东西？</p><p>开门见山，需要用到的工具有ForceBindIP-Gui和ForceBindIP</p><p>其中ForceBindIP-Gui的下载地址在这里：<a href="https://github.com/mhasanjb/ForceBindIP-Gui">mhasanjb&#x2F;ForceBindIP-Gui: A GUI For ForceBindIP (github.com)</a></p><p>使用方法：</p><ol><li>chrome浏览器</li></ol><p>这个根据readme的说明，好像只有老版本才能用了，现在最新的chrome版本都100+</p><ol start="2"><li>firefox浏览器</li></ol><p>Firefox 需要将 about:config?filter&#x3D;browser.launcherProcess.enabled 首选项设置为 false，否则 ForceBindIP 会附加到启动器而不是实际程序。</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936512345391693651233887.png" alt="16936512345391693651233887.png"></p><p>选择出口网卡和指定程序，点击run application即可</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936512455351693651245225.png" alt="16936512455351693651245225.png"></p><p> 效果</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936512565411693651256481.png" alt="16936512565411693651256481.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936512665391693651266038.png" alt="16936512665391693651266038.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vite使用monaco-editor汉化，vue react怎么设置monaco-editor中文</title>
      <link href="/2022/vite-uses-monaco-editor-chinese-how-does-vue-react-set-monaco-editor-chinese/"/>
      <url>/2022/vite-uses-monaco-editor-chinese-how-does-vue-react-set-monaco-editor-chinese/</url>
      
        <content type="html"><![CDATA[<p>我们可以使用这个插件进行汉化，vite-plugin-monaco-editor-nls</p><p>不过在我使用的时候并没有汉化成功，发现这个已经是很老的包了。</p><p>于是自己修复了一下pr给作者了</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936513475351693651346745.png" alt="16936513475351693651346745.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add -D vite-plugin-monaco-editor-nls</span><br></pre></td></tr></table></figure><p>然后安装语言包。由于插件自带的语言包已经很老的，所以要安装官方最新的语言包。</p><p>但是官方的语言包并没有提供npm包。所以只能安装github仓库链接了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add -D git+https://github.com/microsoft/vscode-loc.git</span><br></pre></td></tr></table></figure><blockquote><p>这条命令我只安装成功过一次。后面全部都是失败。配置各种代理，死活下载不过来。最后没办法只能中转一下。用gitlab给clone过来（不得不说码云真的坑，克隆这个仓库不给改公开权限）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add -D git+https://jihulab.com/james-curtis/vscode-loc</span><br></pre></td></tr></table></figure><p> 然后配置一下vite.config.ts就大功告成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import reactRefresh from &#x27;@vitejs/plugin-react-refresh&#x27;;</span><br><span class="line">import &#123;resolve&#125; from &#x27;path&#x27;;</span><br><span class="line">import &#123;defineConfig&#125; from &#x27;vite&#x27;;</span><br><span class="line">import MonacoEditorNlsPlugin, &#123;</span><br><span class="line">    esbuildPluginMonacoEditorNls,</span><br><span class="line">    Languages,</span><br><span class="line">&#125; from &#x27;vite-plugin-monaco-editor-nls&#x27;;</span><br><span class="line">import Inspect from &#x27;vite-plugin-inspect&#x27;;</span><br><span class="line"></span><br><span class="line">const zh_CN = require(&#x27;vscode-loc.git/i18n/vscode-language-pack-zh-hans/translations/main.i18n.json&#x27;)</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">    base: &#x27;./&#x27;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            &#x27;@&#x27;: resolve(&#x27;./src&#x27;),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    build: &#123;</span><br><span class="line">        sourcemap: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    optimizeDeps: &#123;</span><br><span class="line">        /** vite 版本需要大于等于2.3.0 */</span><br><span class="line">        esbuildOptions: &#123;</span><br><span class="line">            plugins: [</span><br><span class="line">                esbuildPluginMonacoEditorNls(&#123;</span><br><span class="line">                    locale: Languages.zh_hans,</span><br><span class="line">                    /**</span><br><span class="line">                     * The weight of `localedata` is higher than that of `locale`</span><br><span class="line">                     */</span><br><span class="line">                    localeData: zh_CN.contents</span><br><span class="line">                &#125;),</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        reactRefresh(),</span><br><span class="line">        Inspect(),</span><br><span class="line">        MonacoEditorNlsPlugin(&#123;</span><br><span class="line">            locale: Languages.zh_hans,</span><br><span class="line">            /**</span><br><span class="line">             * The weight of `localedata` is higher than that of `locale`</span><br><span class="line">             */</span><br><span class="line">            localeData: zh_CN.contents</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3 vite打包monaco-editor出现很多不需要的语言文件，打包文件很混乱。vite vue3使用monaco-editor怎么精简优化</title>
      <link href="/2022/when-vue3-vite-packages-monaco-editor-there-are-many-unnecessary-language-files-and-the-packaged-files-are-very-confusing-how-to-simplify-and-optimize-vite-vue3-using-monaco-editor/"/>
      <url>/2022/when-vue3-vite-packages-monaco-editor-there-are-many-unnecessary-language-files-and-the-packaged-files-are-very-confusing-how-to-simplify-and-optimize-vite-vue3-using-monaco-editor/</url>
      
        <content type="html"><![CDATA[<h1 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import * as monaco from &#x27;monaco-editor&#x27;;</span><br><span class="line">// or import * as monaco from &#x27;monaco-editor/esm/vs/editor/editor.api&#x27;;</span><br><span class="line">// if shipping only a subset of the features &amp; languages is desired</span><br><span class="line"></span><br><span class="line">monaco.editor.create(document.getElementById(&#x27;container&#x27;), &#123;</span><br><span class="line">value: &#x27;console.log(&quot;Hello, world&quot;)&#x27;,</span><br><span class="line">language: &#x27;javascript&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>.只需要把</p><blockquote><p>import * as Monaco from ‘monaco-editor’</p></blockquote><p>换成</p><blockquote><p>import * as Monaco from ‘monaco-editor&#x2F;esm&#x2F;vs&#x2F;editor&#x2F;editor.api’</p></blockquote><p>即可</p><p>方法出处：[<a href="https://github.com/microsoft/monaco-editor/tree/main/webpack-plugin#:~:text=if%20shipping%20only%20a%20subset%20of%20the%20features%20%26%20languages%20is%20desired]">https://github.com/microsoft/monaco-editor/tree/main/webpack-plugin#:~:text=if%20shipping%20only%20a%20subset%20of%20the%20features%20%26%20languages%20is%20desired]</a>(<a href="https://github.com/microsoft/monaco-editor/tree/main/webpack-plugin#:~:text=if">https://github.com/microsoft/monaco-editor/tree/main/webpack-plugin#:~:text=if</a> shipping only a subset of the features %26 languages is desired) </p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote><p>根据官方文档描述</p><p>By default, all languages shipped with the monaco-editor will be included.</p><p>默认情况下monaco-editor会包含所有的语言文件</p></blockquote><h1 id="优化前效果"><a href="#优化前效果" class="headerlink" title="优化前效果"></a>优化前效果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&gt; vite build --config ./config/vite.config.prod.ts</span><br><span class="line"></span><br><span class="line">vite v3.0.4 building for production...                                                                                                                                                                                     12:23:56</span><br><span class="line">✓ 160 modules transformed.                                                                                                                                                                                                 12:24:35</span><br><span class="line">✓ 183 modules transformed.                                                                                                                                                                                                 12:24:36</span><br><span class="line">✓ 186 modules transformed.                                                                                                                                                                                                 12:24:41</span><br><span class="line">✓ 187 modules transformed.                                                                                                                                                                                                 12:24:42</span><br><span class="line">✓ 229 modules transformed.                                                                                                                                                                                                 12:24:46</span><br><span class="line">✓ 6391 modules transformed.                                                                                                                                                                                                12:25:13</span><br><span class="line">dist/assets/logo.b4229389.svg              20.28 KiB                                                                                                                                                                       12:25:18</span><br><span class="line">dist/assets/codicon.c99115f8.ttf           69.12 KiB                                                                                                                                                                       12:25:18</span><br><span class="line">dist/assets/editor.worker.55353356.js      166.90 KiB                                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/json.worker.2be2570f.js        292.56 KiB                                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/html.worker.3376e5b8.js        602.41 KiB                                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/css.worker.1bba75ea.js         901.06 KiB                                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/ts.worker.9acd5107.js          4777.10 KiB                                                                                                                                                                     12:25:18  </span><br><span class="line">dist/index.html                            0.68 KiB                                                                                                                                                                        12:25:18  </span><br><span class="line">dist/assets/azcli.4c9b6b47.js              1.07 KiB / gzip: 0.45 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/bat.8a420ace.js                2.04 KiB / gzip: 0.98 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/bicep.5032e09b.js              2.72 KiB / gzip: 1.08 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/apex.4a5ec4a4.js               4.10 KiB / gzip: 1.86 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/cameligo.00bc63f8.js           2.37 KiB / gzip: 1.07 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/coffee.54897858.js             3.75 KiB / gzip: 1.41 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/cpp.337468ce.js                5.56 KiB / gzip: 2.20 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/csp.aec2811b.js                1.63 KiB / gzip: 0.65 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/csharp.01a8eaa8.js             4.66 KiB / gzip: 1.82 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/css.4c22ed20.js                4.64 KiB / gzip: 1.48 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/dockerfile.de6a0f2c.js         2.07 KiB / gzip: 0.79 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/abap.6ba285e6.js               14.07 KiB / gzip: 5.34 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/dart.50deccbd.js               4.39 KiB / gzip: 1.73 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/flow9.c44e3f2e.js              2.01 KiB / gzip: 0.96 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/clojure.bc79377e.js            9.66 KiB / gzip: 3.65 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/ecl.19ccc34b.js                5.46 KiB / gzip: 2.33 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/elixir.a6460ae7.js             9.77 KiB / gzip: 2.55 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/fsharp.d9204eef.js             3.15 KiB / gzip: 1.42 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/go.1e1292ae.js                 2.83 KiB / gzip: 1.25 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/graphql.900d9927.js            2.45 KiB / gzip: 1.13 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/handlebars.37474df0.js         6.85 KiB / gzip: 1.69 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/ini.75848fa5.js                1.32 KiB / gzip: 0.66 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/hcl.c0959a07.js                3.75 KiB / gzip: 1.58 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/html.b86df8d8.js               4.96 KiB / gzip: 1.46 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/javascript.cec1b257.js         1.15 KiB / gzip: 0.60 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/java.13c44e5c.js               3.39 KiB / gzip: 1.50 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/freemarker2.23a5c729.js        15.95 KiB / gzip: 4.15 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/typescript.f4b5ff31.js         5.50 KiB / gzip: 2.21 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/kotlin.3399aeb6.js             3.60 KiB / gzip: 1.57 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/lexon.44f813b3.js              2.62 KiB / gzip: 1.04 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/julia.21f68d09.js              7.29 KiB / gzip: 2.69 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/less.b6aad23a.js               4.04 KiB / gzip: 1.52 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/lua.bbdfa9c0.js                2.31 KiB / gzip: 1.04 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/mips.148d2978.js               2.76 KiB / gzip: 1.19 KiB                                                                                                                                                       12:25:18</span><br><span class="line">dist/assets/m3.92f755b1.js                 2.99 KiB / gzip: 1.41 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/markdown.236ff8ef.js           3.94 KiB / gzip: 1.48 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/liquid.c200d198.js             4.10 KiB / gzip: 1.74 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/objective-c.67633c2a.js        2.59 KiB / gzip: 1.17 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/pascaligo.1c7de3c7.js          2.19 KiB / gzip: 1.03 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/msdax.f39564e2.js              5.04 KiB / gzip: 2.05 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/pascal.c9d19959.js             3.17 KiB / gzip: 1.50 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/pla.c3f817e8.js                1.88 KiB / gzip: 0.77 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/perl.140c1c72.js               8.30 KiB / gzip: 3.16 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/php.a9540a84.js                8.08 KiB / gzip: 2.15 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/mysql.fdc04fe1.js              11.23 KiB / gzip: 4.09 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/powershell.d93de61d.js         3.43 KiB / gzip: 1.47 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/pgsql.1a3b46c8.js              13.33 KiB / gzip: 4.50 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/postiats.8064247a.js           7.91 KiB / gzip: 2.49 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/protobuf.0ea0cf3d.js           9.07 KiB / gzip: 2.15 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/python.ae9bd45d.js             3.74 KiB / gzip: 1.66 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/pug.03a3b993.js                4.96 KiB / gzip: 1.74 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/r.1e4576a7.js                  3.30 KiB / gzip: 1.39 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/qsharp.c08b4fea.js             3.10 KiB / gzip: 1.46 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/powerquery.bc98d188.js         16.78 KiB / gzip: 4.88 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/restructuredtext.992abef6.js   4.04 KiB / gzip: 1.46 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/redis.8da5f515.js              3.71 KiB / gzip: 1.58 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/sb.e7ab3b92.js                 2.03 KiB / gzip: 0.94 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/rust.349e1143.js               4.30 KiB / gzip: 1.91 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/razor.12f90da6.js              8.80 KiB / gzip: 2.35 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/scheme.d835dccb.js             1.97 KiB / gzip: 0.93 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/ruby.71d129bb.js               8.54 KiB / gzip: 2.64 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/scala.ef542eb6.js              7.39 KiB / gzip: 2.17 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/shell.4305d323.js              3.24 KiB / gzip: 1.31 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/sophia.69f82176.js             2.94 KiB / gzip: 1.31 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/scss.19caa34f.js               6.50 KiB / gzip: 1.84 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/st.3f9156a8.js                 7.46 KiB / gzip: 2.31 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/sql.5f2f7ebd.js                10.30 KiB / gzip: 3.89 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/swift.575aa114.js              5.29 KiB / gzip: 2.15 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/sparql.1dcfd6e8.js             2.73 KiB / gzip: 1.27 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/tcl.50105b28.js                3.73 KiB / gzip: 1.47 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/redshift.4a60845d.js           11.76 KiB / gzip: 4.35 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/solidity.212cde55.js           18.40 KiB / gzip: 4.48 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/xml.4337ae7f.js                2.59 KiB / gzip: 1.06 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/twig.74745959.js               6.07 KiB / gzip: 1.62 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/systemverilog.a897e382.js      7.67 KiB / gzip: 2.82 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/yaml.7d8c6ae6.js               3.70 KiB / gzip: 1.33 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/vb.42b9f30d.js                 5.90 KiB / gzip: 2.14 KiB                                                                                                                                                       12:25:18  </span><br><span class="line">dist/assets/tsMode.b126b833.js             21.74 KiB / gzip: 6.27 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/htmlMode.75dc5775.js           33.40 KiB / gzip: 8.79 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/cssMode.64adcf2e.js            32.66 KiB / gzip: 8.65 KiB                                                                                                                                                      12:25:18  </span><br><span class="line">dist/assets/jsonMode.1a7b82cd.js           38.76 KiB / gzip: 10.77 KiB                                                                                                                                                     12:25:18  </span><br><span class="line">dist/assets/monaco.d7562f15.css            79.13 KiB / gzip: 13.34 KiB                                                                                                                                                     12:25:18  </span><br><span class="line">dist/assets/index.2d7343dc.js              161.36 KiB / gzip: 54.37 KiB                                                                                                                                                    12:25:18  </span><br><span class="line">dist/assets/index.1da917fa.css             355.96 KiB / gzip: 74.46 KiB                                                                                                                                                    12:25:18  </span><br><span class="line">dist/assets/core.8989ee89.js               539.72 KiB / gzip: 180.41 KiB                                                                                                                                                   12:25:18</span><br><span class="line">dist/assets/monaco.5273bca9.js             2600.87 KiB / gzip: 659.07 KiB                                                                                                                                                  12:25:18</span><br></pre></td></tr></table></figure><p>可以看到一坨的语言都被打包进去了，不管有没有用到都在里面</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936514285391693651428183.png" alt="16936514285391693651428183.png"></p><h1 id="优化后效果"><a href="#优化后效果" class="headerlink" title="优化后效果"></a>优化后效果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; vite build --config ./config/vite.config.prod.ts</span><br><span class="line"></span><br><span class="line">vite v3.0.4 building for production...                                                                                                                                                                                     12:15:43</span><br><span class="line">✓ 160 modules transformed.                                                                                                                                                                                                 12:16:21</span><br><span class="line">✓ 185 modules transformed.                                                                                                                                                                                                 12:16:23</span><br><span class="line">✓ 186 modules transformed.                                                                                                                                                                                                 12:16:24</span><br><span class="line">✓ 187 modules transformed.                                                                                                                                                                                                 12:16:24</span><br><span class="line">✓ 229 modules transformed.                                                                                                                                                                                                 12:16:33</span><br><span class="line">✓ 6009 modules transformed.                                                                                                                                                                                                12:16:55</span><br><span class="line">dist/assets/logo.b4229389.svg           20.28 KiB                                                                                                                                                                          12:17:04</span><br><span class="line">dist/assets/codicon.c99115f8.ttf        69.12 KiB                                                                                                                                                                          12:17:04</span><br><span class="line">dist/assets/editor.worker.55353356.js   166.90 KiB                                                                                                                                                                         12:17:04  </span><br><span class="line">dist/assets/json.worker.2be2570f.js     292.56 KiB                                                                                                                                                                         12:17:04  </span><br><span class="line">dist/assets/html.worker.3376e5b8.js     602.41 KiB                                                                                                                                                                         12:17:04  </span><br><span class="line">dist/assets/css.worker.1bba75ea.js      901.06 KiB                                                                                                                                                                         12:17:04  </span><br><span class="line">dist/assets/ts.worker.9acd5107.js       4777.10 KiB                                                                                                                                                                        12:17:04  </span><br><span class="line">dist/index.html                         0.68 KiB                                                                                                                                                                           12:17:04  </span><br><span class="line">dist/assets/monaco.16ea583f.css         79.13 KiB / gzip: 13.36 KiB                                                                                                                                                        12:17:04  </span><br><span class="line">dist/assets/index.f40ca15f.js           161.36 KiB / gzip: 54.37 KiB                                                                                                                                                       12:17:04  </span><br><span class="line">dist/assets/index.1da917fa.css          355.96 KiB / gzip: 74.46 KiB                                                                                                                                                       12:17:04  </span><br><span class="line">dist/assets/core.8989ee89.js            539.72 KiB / gzip: 180.41 KiB                                                                                                                                                      12:17:04</span><br><span class="line">dist/assets/monaco.5c75dc57.js          1730.89 KiB / gzip: 440.94 KiB                                                                                                                                                     12:17:04</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936514445371693651443998.png" alt="16936514445371693651443998.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>arco design使用vite-plugin-style-import按需加载menu-item 报错 css未找到</title>
      <link href="/2022/arco-design-uses-vite-plugin-style-import-to-load-menu-item-on-demand-and-reports-an-error-css-not-found/"/>
      <url>/2022/arco-design-uses-vite-plugin-style-import-to-load-menu-item-on-demand-and-reports-an-error-css-not-found/</url>
      
        <content type="html"><![CDATA[<p> 根据官网arco design教程</p><blockquote><p>手动导入的方式按需加载组件</p></blockquote><p>解决方案：</p><p>将官网示例改成如下，exclude数组是没有css的组件名称。如果不清楚组件名称可以在resolveStyle函数中console.log打印一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createStyleImportPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">libs</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">libraryName</span>: <span class="string">&#x27;@arco-design/web-vue&#x27;</span>,</span><br><span class="line">          <span class="attr">esModule</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">resolveStyle</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> exclude = [<span class="string">&#x27;menu-item&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> (exclude.<span class="title function_">includes</span>(name)) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="comment">// css</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`@arco-design/web-vue/es/<span class="subst">$&#123;name&#125;</span>/style/css.js`</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p>报错信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[vite] Internal server error: Failed to resolve import &quot;D:/Programing/WebstormProjects/cow-Low-code/node_modules/@arco-design/web-vue/es/menu-item/style/css.js&quot; from &quot;src\views\HomeView.vue&quot;. Does the file exist?</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936515375371693651537473.png" alt="16936515375371693651537473.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nahimic应用程序初始化失败</title>
      <link href="/2022/nahimic-application-failed-to-initialize/"/>
      <url>/2022/nahimic-application-failed-to-initialize/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936520965351693652095528.png" alt="16936520965351693652095528.png"></p><p>故障显示如上：</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521305381693652129574.png" alt="16936521305381693652129574.png"></p><p>联想服务那边找到 “Realtek Audio driver 声卡驱动”</p><p>下载之后打开，不用安装直接解压就好了</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521385351693652138042.png" alt="16936521385351693652138042.png"></p><p>找到解压目录下面的</p><p>“Source\Thirdparty\Nahamic_831w”</p><p>在我这里我的完整路径是</p><p>“C:\Drivers\Realtek Audio Driver\20222507.19325299\Source\Thirdparty\Nahamic_831w”</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521465351693652145762.png" alt="16936521465351693652145762.png"></p><p> 运行一下这个修复程序</p><p>“Lenovo-NahimicRestoreTool-APO4-SWCv4.5.0.0-EXTv1.1.7.0.exe”</p><p>运行完成之后会提示重启，选择不重启。</p><p>此时可以正常打开Nahimic并使用，且有效果。但是重启之后又出现故障了</p><p>这个时候看一下Nahimic的服务启动了没有</p><p>打开任务管理器，切换到服务选项卡，按一下键盘的N会自动跳到N开头的服务上面，找到“NahimicService”</p><p>发现并没有启动服务</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521565351693652155665.png" alt="16936521565351693652155665.png"></p><p> 那么就找到原因了。现在右键这个服务，选择打开服务</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521665351693652165846.png" alt="16936521665351693652165846.png"></p><p>在弹出的窗口中找到同名的服务 </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521765351693652176279.png" alt="16936521765351693652176279.png"></p><p> 把原本的禁用改成“自动(延迟启动)”</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521845391693652183779.png" alt="16936521845391693652183779.png"></p><p> 然后再右键点击启动就完成了</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936521995341693652199139.png" alt="16936521995341693652199139.png"></p><p>此时重启电脑也是一样可以用的 </p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NVIDIA broadcast App点击选择麦克源时候闪退 崩溃怎么解决</title>
      <link href="/2022/nvidia-broadcast-app-crashes-when-clicking-to-select-microphone-source-how-to-solve-the-crash/"/>
      <url>/2022/nvidia-broadcast-app-crashes-when-clicking-to-select-microphone-source-how-to-solve-the-crash/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936522995391693652298666.png" alt="16936522995391693652298666.png"> </p><p> 一点击麦克风源就会崩溃的解决办法</p><p> 进入声音设置，把不需要的麦克风和虚拟麦克风全部禁用了，只留物理麦克风，然后在一个个打开排查一下是哪个麦克风的问题即刻</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936523065391693652306277.png" alt="16936523065391693652306277.png"></p><p>禁用之后</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936523145351693652313727.png" alt="16936523145351693652313727.png"></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element-plus打开Dialog、图片预览导致页面抖动</title>
      <link href="/2022/element-plus-opens-dialog-image-preview-causes-page-shake/"/>
      <url>/2022/element-plus-opens-dialog-image-preview-causes-page-shake/</url>
      
        <content type="html"><![CDATA[<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用<code>el-scollbar</code>组件替代浏览器在body上的滚动条<br>在<code>App.vue</code>中套上这个组件，所有页面都显示在<code>RouterView</code>里面</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936523905371693652389843.png" alt="16936523905371693652389843.png"></p><h4 id="抖动情况："><a href="#抖动情况：" class="headerlink" title="抖动情况："></a>抖动情况：</h4><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936525975351fb2326de60440c09eaa21600c0e57c2.gif" alt="16936525975351fb2326de60440c09eaa21600c0e57c2.gif"></p><p>但是发现element-plus官方文档里面的预览并没有抖动，于是就f12看了下他们是咋实现的。</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936526155351693652614788.png" alt="16936526155351693652614788.png"></p><p>可以看到这里element官网是使用了<a href="https://element-plus.org/zh-CN/component/scrollbar.html">scrollbar</a>组件<br>于是我也去使用这个组件<br><code>App.vue</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936526315401693652631105.png" alt="16936526315401693652631105.png"></p><p>但是发现问题依旧。经过一番排查，这里还需要设置一下高度，要让外层的元素高度固定。只要内层高度大于外层高度，那么<code>el-scrollbar</code>就会产生滚动条。<br>但是要注意不要让外层元素高度超过100vh，比如设置120vh，这种情况会出现两个滚动条，因为scrollbar组件只是隐藏了 被该组件包含的 容器的滚动条，并不包括在body上产生的滚动条</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936526425361693652641724.png" alt="16936526425361693652641724.png"></p><p>这里el官网的方法是对<code>el-scrollbar__wrap</code>设置了<code>height:100vh</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936526555351693652655027.png" alt="16936526555351693652655027.png"></p><p>我这里为了简便起见，就把<code>el-scrollbar</code>设置成100vh，因为下面的<code>el-scrollbar__wrap</code>有个<code>height:100%</code>属性会继承父级高度，所以效果和上面一样的<br><code>App.vue</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936526665351693652665672.png" alt="16936526665351693652665672.png"></p><h4 id="修复效果"><a href="#修复效果" class="headerlink" title="修复效果"></a>修复效果</h4><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936527025354a69219b0f5c4c51b620182afd1b84b4.gif" alt="16936527025354a69219b0f5c4c51b620182afd1b84b4.gif"></p><p>如果浏览器滚动条和scrollbar组件同时出现的话，可能原因是没有去除body的边距</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936527279931693652727088.png" alt="16936527279931693652727088.png"></p><p>在<code>index.html</code>去除所有元素内外边距就好了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Clion怎么在一个项目中编写C和C++两种语言</title>
      <link href="/2022/how-does-clion-write-c-and-c-in-one-project/"/>
      <url>/2022/how-does-clion-write-c-and-c-in-one-project/</url>
      
        <content type="html"><![CDATA[<p>如果在C或C++项目中编写C++或C会提示 <code>CMake Error: CMake can not determine linker language for target:</code> </p><p>解决方案：<br>修改根目录下面的<br><code>CMakeLists.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.22)</span><br><span class="line">project(Algorithm C)</span><br><span class="line"></span><br><span class="line">set(CMAKE_C_STANDARD 11)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把其中的 <code>project(Algorithm C)</code> 后面那个 <code>C</code> 去掉就可以了。(如果是C++项目，这里应该是 <code>CXX</code> )<br>写成这样 <code>project(Algorithm)</code> </p><p>然后如果要添加C++或者C语言标准的话</p><ul><li>C++11标准 <code>set(CMAKE_CXX_STANDARD 11)</code></li><li>C11标准 <code>set(CMAKE_C_STANDARD 11)</code></li></ul><p>至于单独跑一个文件的话用这个插件就好了 <code>C/C+​+​ Single File Execution</code></p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云效devstudio，coding编译运行调试C/C++</title>
      <link href="/2022/aliyun-effect-devstudio-coding-compile-and-run-debugging-c-c/"/>
      <url>/2022/aliyun-effect-devstudio-coding-compile-and-run-debugging-c-c/</url>
      
        <content type="html"><![CDATA[<p>云效devstudio可以选择 <code>all in one</code> 或者 <code>c/c++</code> 项目，coding必须选择 <code>all in one</code>项目才行。<br>创建项目之后，配置好 <code>launch.json</code> 和 <code>tasks.json</code> 就可以跑了。</p><p><code>launch.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">//这个大括号里是我们的‘调试(Debug)’配置</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 程序调试时传递给程序的命令行参数，这里设为空即可</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试程序时的工作目录，此处为源码文件所在目录</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span> <span class="comment">// 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>tasks.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="comment">//这个大括号里是‘构建（build）’任务</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="comment">//任务名称，可以更改，不过不建议改</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span> <span class="comment">//任务类型，process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> <span class="comment">//编译命令，这里是gcc，编译c++的话换成g++</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//方括号里是传给gcc命令的一系列参数，用于实现一些功能</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//指定要编译的是当前文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span> <span class="comment">//指定输出文件的路径和名称</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">//承接上一步的-o，让可执行文件输出到源码文件所在的文件夹下的bin文件夹内，并且让它的名字和源码文件相同</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">//生成和调试有关的信息</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line">                <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span> <span class="comment">// 静态链接libgcc</span></span><br><span class="line">                <span class="comment">// &quot;-fexec-charset=GBK&quot;, // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码</span></span><br><span class="line">                <span class="string">&quot;-std=c11&quot;</span> <span class="comment">// 语言标准，可根据自己的需要进行修改，写c++要换成c++的语言标准，比如c++11</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件参考：<br><a href="https://www.bilibili.com/read/cv15814739">https://www.bilibili.com/read/cv15814739</a></p></blockquote><p>注意这里阿里云效devstudio跟正常的vscode好像不一样，<code>&quot;type&quot;: &quot;cppdbg&quot;</code> 会报错，要改成 <code>&quot;type&quot;: &quot;lldb&quot;</code><br>报错：<code>The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16936528309911693652830852.png" alt="16936528309911693652830852.png"></p><p>到这里就可以调试了。阿里的使用 <code>开始执行(不调试)</code> 好像出不来结果。coding的没有问题，但是得去掉断点才能跑，不然还是会卡断点。</p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol><li><code>launch.json</code> 报错 <code>Matches multiple schemas when only one must validate.</code><br>刷新一下浏览器即可<br>参考：<a href="https://blog.csdn.net/oh_futrue/article/details/104771914/">https://blog.csdn.net/oh_futrue/article/details/104771914/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
