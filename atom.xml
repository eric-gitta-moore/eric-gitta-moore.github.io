<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric Moore</title>
  
  <subtitle>学海无涯，共同进步！</subtitle>
  <link href="https://eric-gitta-moore.github.io/atom.xml" rel="self"/>
  
  <link href="https://eric-gitta-moore.github.io/"/>
  <updated>2024-11-06T15:42:38.036Z</updated>
  <id>https://eric-gitta-moore.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac上实现RTX-Voice效果，mac语音隔离降噪工具</title>
    <link href="https://eric-gitta-moore.github.io/2024/implement-rtx-voice-effect-on-mac-mac-voice-isolation-and-noise-reduction-tool/"/>
    <id>https://eric-gitta-moore.github.io/2024/implement-rtx-voice-effect-on-mac-mac-voice-isolation-and-noise-reduction-tool/</id>
    <published>2024-11-06T14:38:26.000Z</published>
    <updated>2024-11-06T15:42:38.036Z</updated>
    
    <content type="html"><![CDATA[<p>mac 上实现 RTX-Voice 效果，mac 语音隔离，降噪工具，怎么实现 NVIDIA Broadcast 降噪，人声隔离</p><p>找了很久这种工具</p><p>因为 mac 新版自带了一个 Voice Isolation，但是在 chrome 里面没法用，所以想找其他工具替代</p><p>最开始只找到了 Krisp，但是需要付费，不太想用。</p><p>后面想想能不能在 OBS 里面用，然后再用音频跳线搞出来，后面证明是可以的</p><ol><li>就是在 OBS 里面添加系统麦克风，</li><li>然后再 mac 状态栏选择 <code>Voice Isolation</code>，</li><li>然后 OBS 还需要安装一个 <code>Audio Monitor</code> 的插件，选择监听设备为 <code>Loopback/VB-Cable</code> 创建的虚拟麦克风就行了。(也可以选择直接用 OBS 的监听)</li><li>chrome 修改默认麦克风为虚拟麦克风</li></ol><p>之前是在这里都打止了，但是也有陆续在找更好用的方案，开源的方案。</p><p>后来了解到有个 RNNoise 的机器学习效果好像还行，但是还是打不过 RTX Voice</p><p>其中有个 <a href="https://github.com/LeXuanKhanh/noise-suppression-for-voice/tree/macos-instruction?tab=readme-ov-file#macos">GitHub 仓库</a> 提供了 VST 的功能，可以用在 OBS 加 VST 插件降噪，算是找到了开源方案</p><p>后面继续搜索，又看到 Audio Hijack 他们家有一篇<a href="https://rogueamoeba.com/support/knowledgebase/?showArticle=MicEffects&product=audiohijack">文章</a>联合 Loopback 一起用的，感觉可能方便一些，就再试了一下，在找 vst 效果里面可以找到这个插件 <code>RNNoise suppression for voice</code></p><p>找着找着，每个效果都仔细看了下，这下发现一个超好用的，**可以直接加载系统提供的 <code>Audio Uint Effets</code> 其中里面就包含了 <code>AUSoundlsolation</code>，其实就是状态栏我们选择的 Voice Isolation 功能的模块</p><p>其实之前有用到同样是 Loopback 家的 Audio Hijack 但是当时只是用来录制系统音频。没太注意看每个功能，结果错过了哎。</p><p>甚至还可以调节干湿！！！</p><img src="/2024/implement-rtx-voice-effect-on-mac-mac-voice-isolation-and-noise-reduction-tool/image.png" class="" title="alt text"><p>可以 <code>AUSoundIsolation</code> 和 <code>RNNoise</code> 一起用，实测先 A 再 R 效果最好，堪比 RTX Voice，直接杀死比赛。</p><p>A 选择高质量，R 设置 VAD 阈值为 <code>0.95</code></p><p>还可以加个 <code>Magic Boost</code> 声音小的话可以提上来，最后输出前建议再加个 <code>Gain Gate</code> 抑制最大声音 </p><p>实际上我注意到 SoundSource 也是支持这功能的，参考: <a href="https://weblog.rogueamoeba.com/2023/05/23/get-soundsource-5-6-now/">https://weblog.rogueamoeba.com/2023/05/23/get-soundsource-5-6-now/</a></p><p>PR 也有的，<a href="https://www.reddit.com/r/premiere/comments/18tyti0/sound_isolation_better_than_speech_enhance/">https://www.reddit.com/r/premiere/comments/18tyti0/sound_isolation_better_than_speech_enhance/</a></p><p>相关文档应该在这里: <a href="https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/CoreAudioOverview/SystemAudioUnits/SystemAudioUnits.html">System-Supplied Audio Units in OS X</a>，但是可能有些落后，没有覆盖到 isolation</p><p>相关 API 介绍: <a href="https://github.com/spotlightishere/QuietNow">QuietNow</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://rogueamoeba.com/support/knowledgebase/?showArticle=MicEffects&product=audiohijack">Enhancing microphone input with audio effects</a></li><li><a href="https://github.com/LeXuanKhanh/noise-suppression-for-voice/tree/macos-instruction?tab=readme-ov-file#macos">https://github.com/LeXuanKhanh/noise-suppression-for-voice/tree/macos-instruction?tab=readme-ov-file#macos</a></li><li><a href="https://reviews.ofb.biz/safari/article/1091.html">Rogue Amoeba’s Tools Gave Me Real Time Sound Isolation Everywhere. Even OBS.</a></li><li><a href="https://weblog.rogueamoeba.com/2023/05/23/get-soundsource-5-6-now/">https://weblog.rogueamoeba.com/2023/05/23/get-soundsource-5-6-now/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mac 上实现 RTX-Voice 效果，mac 语音隔离，降噪工具，怎么实现 NVIDIA Broadcast 降噪，人声隔离&lt;/p&gt;
&lt;p&gt;找了很久这种工具&lt;/p&gt;
&lt;p&gt;因为 mac 新版自带了一个 Voice Isolation，但是在 chrome 里面没法用，所</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>napi-rs 怎么调试，调试 .node cpp/rust 模块，vscode调试napi-rs</title>
    <link href="https://eric-gitta-moore.github.io/2024/how-to-debug-napi-rs-debug-node-cpp-rust-module-vscode-debug-napi-rs/"/>
    <id>https://eric-gitta-moore.github.io/2024/how-to-debug-napi-rs-debug-node-cpp-rust-module-vscode-debug-napi-rs/</id>
    <published>2024-11-04T07:39:55.000Z</published>
    <updated>2024-11-06T15:42:38.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>出于需要，开发中碰到后端渲染的 svg 和 chrome 渲染出来的结果在字体上有出入，随深入查看源码分析 + debugger</p><p>于是乎，希望在 js 执行<a href="https://github.com/thx/resvg-js/blob/97944eb0117f3d2135abe4d18be6c467103e2caa/example/async.js#L24">这个文件</a> <code>renderAsync</code> 时候，里面会去调用 napi-rs 生成的 <code>.node</code> 文件，希望能够断点进去，走到 <code>tree.convert_text</code> <a href="https://github.com/thx/resvg-js/blob/97944eb0117f3d2135abe4d18be6c467103e2caa/src/lib.rs#L163">这个函数</a></p><p>并且能 step in 进去，走到他的依赖 fontlib (通过静态代码分析知道)，最终会走到 <a href="https://github.com/RazrFalcon/fontdb/blob/62cfd96671eba4debe73eeecf541b1a3a051d223/src/lib.rs#L1210">find_best_match</a>，遵循 <a href="https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#font-style-matching">W3C Matching font styles 规范</a></p><p>但是由于具体匹配结果和浏览器 skia 匹配结果不太一致，于是希望断点调试这一块的过程</p><blockquote><p>注意：Mac 和 Window 调试过程略有区别，这里仅展示 Mac 版本</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>vscode 安装 <code>vadimcn.vscode-lldb</code> (扩展 ID) CodeLLDB</li><li>设置打开 <code>debug.allowBreakpointsEverywhere</code></li><li>添加 <code>launch.json</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/admin/.nvm/versions/node/v20.14.0/bin/node&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/Users/admin/workspace/resvg-js/example/async.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="运行和调试"><a href="#运行和调试" class="headerlink" title="运行和调试"></a>运行和调试</h2><p>第一步是设置断点。现在回到文件资源管理器，打开要设置断点的 rust 文件。</p><p>第二步，<code>shift + cmd + d</code> 回到 debug 面板，点击 <code>开始调试 (F5)</code></p><p>命中断点，enjoy</p><img src="/2024/how-to-debug-napi-rs-debug-node-cpp-rust-module-vscode-debug-napi-rs/image.png" class=""><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://stackoverflow.com/a/51176075">https://stackoverflow.com/a/51176075</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;出于需要，开发中碰到后端渲染的 svg 和 chrome 渲染出来的结果在字体上有出入，随深入查看源码分析 + debugger&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>矩阵中合规子矩阵的数量</title>
    <link href="https://eric-gitta-moore.github.io/2024/the-number-of-compliance-submatrices-in-the-matrix/"/>
    <id>https://eric-gitta-moore.github.io/2024/the-number-of-compliance-submatrices-in-the-matrix/</id>
    <published>2024-09-05T13:00:49.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<p>题干：</p><p>给你一个n×n的方阵，第行第j列的元素是r,e,d中的一个。定义一个矩阵权值为这个矩阵出现的r,e,d数量的最小值。</p><p>现在有一个值myal,现在想请你计算出，有多少个子方阵的矩阵权值不小于myval。</p><p>一个行数与列数相等的矩阵称为方阵。</p><p>补充说明</p><p>函数第一个参数输入一个大小为n×n(1≤n≤1000)，且仅由r,e,d构成的vector<string>代表矩阵a。</p><p>函数第二个参数输入一个整数myval(1≤myval≤10)代表值。</p><p>注：该题为核心模式，不需要自己处理输入输出，代码中的类名、方法名、参数名已经指定，请勿修改，直接书写函数返回方法规定的值即可。</p><p>输入</p><p>[“red””red”,”red”],2</p><p>输出1</p><p>1</p><p>输入</p><p>[“red”, “edr”, “dre”],1</p><p>输出2</p><p>5</p><p>code:</p><blockquote><p>只过了 20% 超时了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回一个整数，表示答案</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a int整型二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> val int整型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * red</span></span><br><span class="line"><span class="comment"> * red</span></span><br><span class="line"><span class="comment"> * red</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [&quot;red&quot;,&quot;edr&quot;,&quot;dre&quot;],1</span></span><br><span class="line"><span class="comment"> * red</span></span><br><span class="line"><span class="comment"> * edr</span></span><br><span class="line"><span class="comment"> * dre</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">matrixCount</span>(<span class="params">a, val</span>) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">const</span> n = a.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">2</span> &#125;).<span class="title function_">map</span>(<span class="function">() =&gt;</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">2</span> &#125;).<span class="title function_">fill</span>(&#123; <span class="attr">r</span>: <span class="number">0</span>, <span class="attr">e</span>: <span class="number">0</span>, <span class="attr">d</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> char = a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 重点是中间</span></span><br><span class="line">            <span class="comment">// red</span></span><br><span class="line">            <span class="comment">// edr</span></span><br><span class="line">            <span class="comment">// dre</span></span><br><span class="line">            <span class="comment">//   ^</span></span><br><span class="line">            <span class="comment">// dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1]</span></span><br><span class="line">            <span class="keyword">let</span> leftItem = dp[i][j - <span class="number">1</span>],</span><br><span class="line">                topItem = dp[i - <span class="number">1</span>][j],</span><br><span class="line">                leftTopItem = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">e</span>) =&gt; leftItem[e] + topItem[e] - leftTopItem[e];</span><br><span class="line">            <span class="keyword">let</span> item = &#123;</span><br><span class="line">                <span class="attr">r</span>: <span class="title function_">get</span>(<span class="string">&quot;r&quot;</span>),</span><br><span class="line">                <span class="attr">e</span>: <span class="title function_">get</span>(<span class="string">&quot;e&quot;</span>),</span><br><span class="line">                <span class="attr">d</span>: <span class="title function_">get</span>(<span class="string">&quot;d&quot;</span>),</span><br><span class="line">            &#125;;</span><br><span class="line">            item[char]++;</span><br><span class="line">            dp[i][j] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(dp);</span></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getBlankRED</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">r</span>: <span class="number">0</span>, <span class="attr">e</span>: <span class="number">0</span>, <span class="attr">d</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">helper</span> = (<span class="params">win</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// console.log(win, i, j);</span></span><br><span class="line">                <span class="keyword">if</span> (i - win &lt; <span class="number">0</span> || j - win &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 需要在原始矩阵内</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// if (win &gt;= n &amp;&amp; (i !== 1 || j !== 1)) &#123;</span></span><br><span class="line">                <span class="comment">//     // 只能是对角最大的</span></span><br><span class="line">                <span class="comment">//     // console.log(win, i, j);</span></span><br><span class="line">                <span class="comment">//     continue;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                <span class="keyword">let</span> target = dp[i][j];</span><br><span class="line">                <span class="keyword">let</span> leftItem = dp[i][j - win],</span><br><span class="line">                    topItem = dp[i - win][j],</span><br><span class="line">                    leftTopItem = dp[i - win][j - win];</span><br><span class="line">                <span class="keyword">const</span> <span class="title function_">get</span> = (<span class="params">e</span>) =&gt;</span><br><span class="line">                    target[e] - leftItem[e] - topItem[e] + leftTopItem[e];</span><br><span class="line">                <span class="comment">// console.log(win, i, j, get(&quot;r&quot;)); // , target, leftItem, topItem, leftTopItem</span></span><br><span class="line">                <span class="keyword">let</span> obj = &#123;</span><br><span class="line">                    <span class="attr">r</span>: <span class="title function_">get</span>(<span class="string">&quot;r&quot;</span>),</span><br><span class="line">                    <span class="attr">e</span>: <span class="title function_">get</span>(<span class="string">&quot;e&quot;</span>),</span><br><span class="line">                    <span class="attr">d</span>: <span class="title function_">get</span>(<span class="string">&quot;d&quot;</span>),</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">let</span> thisMyval = <span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="title class_">Object</span>.<span class="title function_">values</span>(obj));</span><br><span class="line">                <span class="keyword">if</span> (thisMyval &gt;= val) ans++;</span><br><span class="line">                <span class="comment">// console.log(</span></span><br><span class="line">                <span class="comment">//     win,</span></span><br><span class="line">                <span class="comment">//     i,</span></span><br><span class="line">                <span class="comment">//     j,</span></span><br><span class="line">                <span class="comment">//     obj,</span></span><br><span class="line">                <span class="comment">//     thisMyval,</span></span><br><span class="line">                <span class="comment">//     val,</span></span><br><span class="line">                <span class="comment">//     thisMyval &gt;= val,</span></span><br><span class="line">                <span class="comment">//     ans</span></span><br><span class="line">                <span class="comment">// );</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// helper(2);</span></span><br><span class="line">    <span class="comment">// return;/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> matrixWindow = <span class="number">1</span>; matrixWindow &lt;= n; matrixWindow++) &#123;</span><br><span class="line">        <span class="title function_">helper</span>(matrixWindow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">matrixCount</span>: matrixCount,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题干：&lt;/p&gt;
&lt;p&gt;给你一个n×n的方阵，第行第j列的元素是r,e,d中的一个。定义一个矩阵权值为这个矩阵出现的r,e,d数量的最小值。&lt;/p&gt;
&lt;p&gt;现在有一个值myal,现在想请你计算出，有多少个子方阵的矩阵权值不小于myval。&lt;/p&gt;
&lt;p&gt;一个行数与列数相等的矩</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>另一种范式的 p-limit 实现 ｜ 字节面试题</title>
    <link href="https://eric-gitta-moore.github.io/2024/another-paradigm-p-limit-implements-byte-interview-questions/"/>
    <id>https://eric-gitta-moore.github.io/2024/another-paradigm-p-limit-implements-byte-interview-questions/</id>
    <published>2024-09-04T16:12:53.000Z</published>
    <updated>2024-11-06T15:42:38.016Z</updated>
    
    <content type="html"><![CDATA[<p>题干：</p><p>般浏览器会限制并发请求数，微信小程序之前也限制过最多请求不超过 10 个。</p><p>现在，让我们来实现一下这个功能。</p><p>【问题描述】</p><p>实现这样一个函数 scheduler，函数入参为并发最大次数</p><p>如下最终输出顺序：2、3、1、4</p><p>一开始，1、2 两个任务进入队列</p><p>500ms 时，2 完成，输出 2，任务 3 进队</p><p>800ms 时，3 完成，输出 3，任务 4 进队</p><p>1000ms 时，1 完成，输出 1</p><p>1200ms 时，4 完成，输出 4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">request1</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request2</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request3</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">        &#125;, <span class="number">300</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request4</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">4</span>)</span><br><span class="line">        &#125;, <span class="number">400</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addRequest = <span class="title function_">scheduler</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_">addRequest</span>(request1).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">addRequest</span>(request2).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">addRequest</span>(request3).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">addRequest</span>(request4).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scheduler</span>(<span class="params">concurrent</span>) &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withResolvers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> promise, resolve, reject</span><br><span class="line">    promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve = res;</span><br><span class="line">        reject = rej;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;promise, resolve, reject&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scheduler</span>(<span class="params">concurrent</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt;= concurrent) <span class="keyword">return</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">const</span> &#123;request, promise, resolve, reject&#125; = queue.<span class="title function_">shift</span>() || &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>(!request) <span class="keyword">return</span>;</span><br><span class="line">        <span class="title function_">request</span>().<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(val)</span><br><span class="line">            cnt--;</span><br><span class="line">            <span class="title function_">process</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;promise, resolve, reject&#125; = <span class="title function_">withResolvers</span>()</span><br><span class="line">        queue.<span class="title function_">push</span>(&#123;request, promise, resolve, reject&#125;)</span><br><span class="line">        <span class="title function_">process</span>()</span><br><span class="line">        <span class="keyword">return</span> promise</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题干：&lt;/p&gt;
&lt;p&gt;般浏览器会限制并发请求数，微信小程序之前也限制过最多请求不超过 10 个。&lt;/p&gt;
&lt;p&gt;现在，让我们来实现一下这个功能。&lt;/p&gt;
&lt;p&gt;【问题描述】&lt;/p&gt;
&lt;p&gt;实现这样一个函数 scheduler，函数入参为并发最大次数&lt;/p&gt;
&lt;p&gt;如下最终输</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>web在线gpu stress压力测试烤鸡是什么原理</title>
    <link href="https://eric-gitta-moore.github.io/2024/web-online-gpu-stress-stress-test-what-works-with-grilled-chicken/"/>
    <id>https://eric-gitta-moore.github.io/2024/web-online-gpu-stress-stress-test-what-works-with-grilled-chicken/</id>
    <published>2024-09-04T16:09:36.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近天气越来越冷了，就想给 mac 烤机一下来暖暖腿，但是又不想下压力测试工具，就想着有没有能够跨平台的烤鸡方法。</p><p>记得之前还有用浏览器挖矿的，索性就搜了一下 <code>web cpu gpu stress</code>，没想到还真有，还不少。不过效果都比较差，唯一一个效果拉满的是 <code>https://mprep.info/gpu/</code>，但是也仅限于 Windows 平台，比较完美的实现了双烤，</p><p><img src="https://raw.githubusercontent.com/eric-gitta-moore/eric-gitta-moore.github.io/main/static/images/16965165614991696516560765.png" alt="16965165614991696516560765.png"></p><p>在 macOS 14 下仅仅能实现 50%左右的 CPU 负载</p><p>不过挺好奇的，为什么只有这一家能够实现比较完美的双烤，让我们扒扒他的实现</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>打开控制台，在点击压力测试按钮的时候发现加载了几个 worker</p><p><img src="https://raw.githubusercontent.com/eric-gitta-moore/eric-gitta-moore.github.io/main/static/images/16965168514981696516850855.png" alt="16965168514981696516850855.png"></p><p><strong>CPU部分</strong>：</p><p><code>https://mprep.info/assets/js/stress-cpu-worker.js</code></p><p>没啥好说的，纯粹的js运算</p><blockquote><p>如果这里换成 wsm 会不会对性能压榨的更多呢</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        <span class="keyword">let</span> t = <span class="number">5458700</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>() % <span class="number">54687</span> * (<span class="number">6847648</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>() % <span class="number">68648</span>) - <span class="number">98468</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>() % <span class="number">513684</span>;</span><br><span class="line">        t = t / <span class="number">769864</span> * <span class="number">6541</span>,</span><br><span class="line">        t = <span class="title class_">Math</span>.<span class="title function_">exp</span>(t),</span><br><span class="line">        t = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(t))))))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p><strong>GPU部分</strong>：</p><p><code>https://mprep.info/assets/js/stress-gpu-worker.js</code></p><p>这里就比较有意思了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">&quot;/assets/js/gpu-browser.min.js&quot;</span>),</span><br><span class="line">onmessage = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="keyword">new</span> <span class="title function_">GPUX</span>(&#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&quot;gpu&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">createKernel</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> e = <span class="number">0</span>; e &lt; <span class="variable language_">this</span>.<span class="property">constants</span>.<span class="property">size</span>; e++)</span><br><span class="line">            t = (t += <span class="variable language_">this</span>.<span class="property">thread</span>.<span class="property">x</span> % <span class="number">5466587</span> * (<span class="variable language_">this</span>.<span class="property">thread</span>.<span class="property">x</span> % <span class="number">6847648</span>) - <span class="variable language_">this</span>.<span class="property">thread</span>.<span class="property">x</span> % <span class="number">51374684</span>) / (<span class="variable language_">this</span>.<span class="property">thread</span>.<span class="property">x</span> % <span class="number">9769864</span>) * <span class="number">6541</span>,</span><br><span class="line">            t = <span class="title class_">Math</span>.<span class="title function_">exp</span>(t),</span><br><span class="line">            t = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(t))))));</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;).<span class="title function_">setOptimizeFloatMemory</span>(!<span class="number">0</span>).<span class="title function_">setImmutable</span>(!<span class="number">0</span>).<span class="title function_">setConstants</span>(&#123;</span><br><span class="line">        <span class="attr">size</span>: <span class="number">1e4</span></span><br><span class="line">    &#125;).<span class="title function_">setLoopMaxIterations</span>(<span class="number">1e4</span>).<span class="title function_">setOutput</span>([<span class="number">1e6</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="title function_">t</span>(),</span><br><span class="line">    <span class="title function_">postMessage</span>(<span class="string">&quot;FinishedCompiling&quot;</span>); ; )</span><br><span class="line">        <span class="title function_">t</span>()</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>找到这个 <code>gpu-browser.min.js</code>，看看是啥</p><p><img src="https://raw.githubusercontent.com/eric-gitta-moore/eric-gitta-moore.github.io/main/static/images/16965170325071696517032336.png" alt="16965170325071696517032336.png"></p><p>原来是使用了 <code>gpu.js</code>，这个第三方库</p><p>看都看到这里了，不妨继续看一看 <code>gpu.js</code> 的具体实现</p><h2 id="gpu-js-实现"><a href="#gpu-js-实现" class="headerlink" title="gpu.js 实现"></a>gpu.js 实现</h2><p>kernel 中有 headless-gl 可选，这个是什么</p><h2 id="headless-gl"><a href="#headless-gl" class="headerlink" title="headless-gl"></a>headless-gl</h2><p>这个是给 node 用的</p><p>具体怎么实现的呢</p><p>其中用到了 <code>node-bindings</code>，这个是啥，又是怎么实现的呢</p><p>解释一下 <code>require.resolve</code></p><h2 id="ndoe-gyp"><a href="#ndoe-gyp" class="headerlink" title="ndoe-gyp"></a>ndoe-gyp</h2><p>具体怎么实现的呢</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://sq.sf.163.com/blog/article/173592945449734144">https://sq.sf.163.com/blog/article/173592945449734144</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker">https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL">https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL</a></li><li><a href="https://blog.csdn.net/z591102/article/details/117473968">https://blog.csdn.net/z591102/article/details/117473968</a></li><li><a href="https://github.com/gpujs/gpu.js">https://github.com/gpujs/gpu.js</a></li><li><a href="https://github.com/stackgl/headless-gl">https://github.com/stackgl/headless-gl</a></li><li><a href="https://www.zhihu.com/question/36291768/answer/3041010590">https://www.zhihu.com/question/36291768/answer/3041010590</a></li><li><a href="https://github.com/nodejs/node-gyp">https://github.com/nodejs/node-gyp</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近天气越来越冷了，就想给 mac 烤机一下来暖暖腿，但是又不想下压力测试工具，就想着有没有能够跨平台的烤鸡方法。&lt;/p&gt;
&lt;p&gt;记得之前还</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>100 行实现 Promise Aplus</title>
    <link href="https://eric-gitta-moore.github.io/2024/100-lines-implement-the-promise-aplus/"/>
    <id>https://eric-gitta-moore.github.io/2024/100-lines-implement-the-promise-aplus/</id>
    <published>2024-09-04T16:07:07.000Z</published>
    <updated>2024-11-06T15:42:38.016Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isFunction</span> = obj =&gt; <span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  , isObject = <span class="function"><span class="params">obj</span> =&gt;</span> !!(obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">  , isThenable = <span class="function"><span class="params">obj</span> =&gt;</span> (<span class="title function_">isFunction</span>(obj) || <span class="title function_">isObject</span>(obj)) &amp;&amp; <span class="string">&#x27;then&#x27;</span> <span class="keyword">in</span> obj</span><br><span class="line">  , isPromise = <span class="function"><span class="params">promise</span> =&gt;</span> promise <span class="keyword">instanceof</span> <span class="title class_">Promise</span></span><br><span class="line">  , nextTick = queueMicrotask || <span class="built_in">setTimeout</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span>, <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span>, <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  result = <span class="literal">null</span></span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  callbacks = []</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">onFulfilled</span> = value =&gt; <span class="variable language_">this</span>.#<span class="title function_">transition</span>(<span class="variable constant_">FULFILLED</span>, value)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">onRejected</span> = reason =&gt; <span class="variable language_">this</span>.#<span class="title function_">transition</span>(<span class="variable constant_">REJECTED</span>, reason)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ignore = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = value =&gt; ignore || (ignore = <span class="literal">true</span>, <span class="variable language_">this</span>.#<span class="title function_">resolvePromise</span>(value, onFulfilled, onRejected))</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">reject</span> = reason =&gt; ignore || (ignore = <span class="literal">true</span>, <span class="title function_">onRejected</span>(reason))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> callback = &#123; onFulfilled, onRejected, resolve, reject &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(callback)</span><br><span class="line">      <span class="keyword">else</span> <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> <span class="title function_">handleCallback</span>(callback, <span class="variable language_">this</span>.<span class="property">state</span>, <span class="variable language_">this</span>.<span class="property">result</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">transition</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state, <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">    <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> (<span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">handleCallback</span>(e, state, result)), <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="property">length</span> = <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">resolvePromise</span>(<span class="params">result, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result === <span class="variable language_">this</span>) <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Can not fufill promise with itself&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPromise</span>(result)) <span class="keyword">return</span> result.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isThenable</span>(result)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> then = result.<span class="property">then</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isFunction</span>(then)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(then.<span class="title function_">bind</span>(result)).<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">resolve</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleCallback</span> = (<span class="params">callback, state, result</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = callback</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="variable constant_">FULFILLED</span>)</span><br><span class="line">      <span class="title function_">isFunction</span>(onFulfilled) ? <span class="title function_">resolve</span>(<span class="title function_">onFulfilled</span>(result)) : <span class="title function_">resolve</span>(result)</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="variable constant_">REJECTED</span>)</span><br><span class="line">      <span class="title function_">isFunction</span>(onRejected) ? <span class="title function_">resolve</span>(<span class="title function_">onRejected</span>(result)) : <span class="title function_">reject</span>(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =============== done ===============</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下非 A+</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(value))</span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="function"><span class="params">reason</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_, reject</span>) =&gt;</span> <span class="title function_">reject</span>(reason))</span><br><span class="line"></span><br><span class="line"><span class="comment">// promises-aplus-tests</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolved</span> = value =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(value))</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rejected</span> = reason =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_, reject</span>) =&gt;</span> <span class="title function_">reject</span>(reason))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deferred</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> promise, resolve, reject</span><br><span class="line">  promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">$resolve, $reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve = $resolve</span><br><span class="line">    reject = $reject</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; promise, resolve, reject &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; resolved, rejected, deferred &#125;</span><br></pre></td></tr></table></figure><p>testCase:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpx promises-aplus-tests index.<span class="property">js</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>eBPF/eCapture 免证书抓包原理解析</title>
    <link href="https://eric-gitta-moore.github.io/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/"/>
    <id>https://eric-gitta-moore.github.io/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/</id>
    <published>2024-08-19T04:49:48.000Z</published>
    <updated>2024-11-06T15:42:38.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>eBPF Uprobe&#x2F;Traffic Control实现的各种用户空间&#x2F;内核空间的数据捕获，无需改动原程序。</p><ul><li>SSL&#x2F;HTTPS数据导出功能，针对HTTPS的数据包抓取，不需要导入CA证书。</li><li>支持go tls类库的明文捕获，即使用golang语言编写的https&#x2F;tls程序的加密通讯。</li><li>bash的命令捕获，HIDS的bash命令监控解决方案。</li><li>mysql query等数据库的数据库审计解决方案。</li></ul><h2 id="eBPF-介绍-入门"><a href="#eBPF-介绍-入门" class="headerlink" title="eBPF 介绍 &amp; 入门"></a>eBPF 介绍 &amp; 入门</h2><p>eBPF 是一种可以在特权上下文（例如操作系统内核）中运行程序的技术。它是 Linux 中 Berkeley Packet Filter 过滤机制的继承者，也用于 Linux 内核的非网络部分。 它用于在运行时安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。</p><img src="/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/image.png" class=""><p>下面以一个 Hook 内核函数 execve 简单的示例，从使用层面理解 eBPF 的魅力</p><img src="/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/2.png" class=""><blockquote><p><strong>execve</strong>:</p><p>在父进程中 <code>fork</code> 一个子进程，在子进程中调用exec函数启动新的程序。<code>exec</code> 函数一共有六个，其中 <code>execve</code> 为内核级系统调用，其他（execl，execle，execlp，execv，execvp）都是调用 execve 的库函数。</p><p><strong>函数定义</strong>: int execve(const char *filename, char *const argv[ ], char *const envp[ ]);</p><p><strong>返回值</strong>: 函数执行成功时没有返回值，执行失败时的返回值为-1.</p><p><strong>函数说明</strong>: <code>execve()</code> 用来执行参数 <code>filename</code> 字符串所代表的文件路径，第二个参数是利用数组指针来传递给执行文件，并且需要以空指针(NULL)结束，最后一个参数则为传递给执行文件的新环境变量数组。</p></blockquote><p>Kernel Space:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义输出数据结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">data_t</span> &#123;</span><br><span class="line">    u32 pid;                  <span class="comment">// 进程 ID</span></span><br><span class="line">    u64 ts;                   <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="type">char</span> comm[TASK_COMM_LEN]; <span class="comment">// 进程 commandline</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 BPF 性能输出映射</span></span><br><span class="line"><span class="built_in">BPF_PERF_OUTPUT</span>(events);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 execve 系统调用返回时捕获事件</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">syscall__ret_execve</span><span class="params">(<span class="keyword">struct</span> pt_regs *ctx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">data_t</span> data = &#123;&#125;; <span class="comment">// 声明并初始化输出数据结构</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前进程的 PID 和 TGID</span></span><br><span class="line">    <span class="comment">// 返回低32位的进程ID(内核视图的PID，在用户空间中通常表示为线程ID)</span></span><br><span class="line">    <span class="comment">// 和高32位的线程组ID(用户空间通常认为是PID)。</span></span><br><span class="line">    <span class="comment">// 通过直接将其设置为u32，丢弃了上面的32位。</span></span><br><span class="line">    data.pid = <span class="built_in">bpf_get_current_pid_tgid</span>();</span><br><span class="line">    <span class="comment">// u64纳秒数。在系统启动时启动，但在挂起期间停止。</span></span><br><span class="line">    data.ts = <span class="built_in">bpf_ktime_get_ns</span>();</span><br><span class="line">    <span class="comment">// 获取当前进程的 commandline</span></span><br><span class="line">    <span class="built_in">bpf_get_current_comm</span>(&amp;data.comm, <span class="built_in">sizeof</span>(data.comm));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事件到用户态</span></span><br><span class="line">    events.<span class="built_in">perf_submit</span>(ctx, &amp;data, <span class="built_in">sizeof</span>(data));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回 0 表示成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User Space:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bcc <span class="keyword">import</span> BPF</span><br><span class="line"><span class="keyword">from</span> bcc.utils <span class="keyword">import</span> printb</span><br><span class="line"></span><br><span class="line"><span class="comment"># define BPF program</span></span><br><span class="line">prog = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;linux/sched.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// define output data structure in C</span></span><br><span class="line"><span class="string">struct data_t &#123;</span></span><br><span class="line"><span class="string">    u32 pid;</span></span><br><span class="line"><span class="string">    u64 ts;</span></span><br><span class="line"><span class="string">    char comm[TASK_COMM_LEN];</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">BPF_PERF_OUTPUT(events);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int syscall__ret_execve(struct pt_regs *ctx) &#123;</span></span><br><span class="line"><span class="string">    struct data_t data = &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    data.pid = bpf_get_current_pid_tgid();</span></span><br><span class="line"><span class="string">    data.ts = bpf_ktime_get_ns();</span></span><br><span class="line"><span class="string">    bpf_get_current_comm(&amp;data.comm, sizeof(data.comm));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    events.perf_submit(ctx, &amp;data, sizeof(data));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load BPF program</span></span><br><span class="line">b = BPF(text=prog)</span><br><span class="line">k = b.get_syscall_fnname(<span class="string">&quot;ret_execve&quot;</span>)</span><br><span class="line"><span class="comment"># attach 到内核探针</span></span><br><span class="line">b.attach_kprobe(event=k, fn_name=<span class="string">&quot;syscall__ret_execve&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== 后面不重要了，都是输出</span></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-18s %-16s %-6s %s&quot;</span> % (<span class="string">&quot;TIME(s)&quot;</span>, <span class="string">&quot;COMM&quot;</span>, <span class="string">&quot;PID&quot;</span>, <span class="string">&quot;MESSAGE&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># process event</span></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_event</span>(<span class="params">cpu, data, size</span>):</span><br><span class="line">    <span class="keyword">global</span> start</span><br><span class="line">    event = b[<span class="string">&quot;events&quot;</span>].event(data)</span><br><span class="line">    <span class="keyword">if</span> start == <span class="number">0</span>:</span><br><span class="line">            start = event.ts</span><br><span class="line">    time_s = (<span class="built_in">float</span>(event.ts - start)) / <span class="number">1000000000</span></span><br><span class="line">    printb(<span class="string">b&quot;%-18.9f %-16s %-6d %s&quot;</span> % (time_s, event.comm, event.pid,</span><br><span class="line">        <span class="string">b&quot;Hello, perf_output!&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># loop with callback to print_event</span></span><br><span class="line">b[<span class="string">&quot;events&quot;</span>].open_perf_buffer(print_event)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        b.perf_buffer_poll()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>了解了大概的使用之后，再理解一下 eBPF 程序加载流程会更加顺畅</p><img src="/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/3.png" class=""><ol><li>使用 C 语言开发一个 eBPF 程序；</li><li>借助 LLVM 把 eBPF 程序编译成 BPF 字节码；</li><li>通过 bpf 系统调用，把 BPF 字节码提交给内核；</li><li>内核验证并运行 BPF 字节码，并把相应的状态保存到 BPF maps 中；</li><li>用户程序通过 BPF maps 查询 BPF 字节码的运行状态。</li></ol><h2 id="eCapture-原理"><a href="#eCapture-原理" class="headerlink" title="eCapture 原理"></a>eCapture 原理</h2><p>了解了 eBPF 之后再来看看 eCapture 原理，实际上就是 Hook 不同的库中不同的函数，组合起来，实现既定的功能</p><p>大家可以先对下面这张图有个大概的印象，接下来咱们一步步拆解</p><img src="/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/4.png" class=""><p>如工作原理的图所示（图没那么细），在用户态的加解密函数中下钩子。 tcpdump(libpcap) 是在数据包接收到，XDP (eXpress Data Path，快速数据路径，XDP 是一种基于eBPF的高性能数据路径，用于绕过大多数操作系统网络堆栈来高速发送和接收网络数据包) 处理后，进行 clone packet，进行包的复制，发送给用户态进程。二者工作的所在层不一样。</p><p>重点其实在于 加解密函数，也就是 opensssl 等 tls&#x2F;ssl 加密库</p><p>其中 eCapture tls 支持了三类 tls&#x2F;ssl 加密类库，分别是</p><ul><li><code>openssl</code> ，动态链接库名字为 <code>libssl.so</code></li><li><code>gnutls</code> ，动态链接库名字为 <code>libgnutls.so</code></li><li><code>nss/nspr</code> ，动态链接库名字为 <code>libnspr4.so</code></li></ul><img src="/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/5.png" class=""><p>到这里，其实如果启动一次程序，大家看日志，大概就会对整体有一个比较清楚的认识了</p><p><code>./ecapture tls --hex</code></p><img src="/2024/ebpf-ecapture-principle-of-certificate-free-packet-capture/6.png" class=""><p>可以看到 <code>HOOK type:2,binrayPath:/lib/x86_64-linux-gnu/libnspr4.so</code></p><p>所以其实理解起来还是 ok 的，一是在加密的时候做手脚获取信息，二是在发送包的时候做手脚拿到数据包，二者相结合就能够解出来原始数据包了</p><p>基于同样的原理 eCapture 也能够实现 mysql query等数据库的数据库审计解决方案</p><p>其实就是 Hook 大法，找到执行 sql 命令的函数，Hook 一下就能拿到入参了（其实和 Java 中的 Hook 工具都差不多，Xposed 也比较类似）</p><p>mysqld模块，核心原理是HOOK了 <code>dispatch_command</code> 函数，</p><ul><li>第一个参数为 CMD 类型，值为 <code>COM_QUERY</code> 时，为查询场景，即审计需求的查询类型。</li><li>第二个参数是 THD 的结构体</li><li>第三个是查询的 SQL 语句</li><li>第四个参数是 SQL 语句的长度，</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/MariaDB/server/blob/b5852ffbeebc3000982988383daeefb0549e058a/sql/sql_parse.h#L112</span></span><br><span class="line"><span class="function">dispatch_command_return <span class="title">dispatch_command</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">enum</span> enum_server_command command, </span></span></span><br><span class="line"><span class="params"><span class="function">        THD *thd,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">char</span>* packet, </span></span></span><br><span class="line"><span class="params"><span class="function">        uint packet_length, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">bool</span> blocking = <span class="literal">true</span>)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;eBPF Uprobe&amp;#x2F;Traffic Control实现的各种用户空间&amp;#x2F;内核空间的数据捕获，无需改动原程序。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>Whistle 插件能力介绍 &amp; 实现 combo 替换</title>
    <link href="https://eric-gitta-moore.github.io/2024/description-of-whistle-plug-in-capabilities-combo-replacement/"/>
    <id>https://eric-gitta-moore.github.io/2024/description-of-whistle-plug-in-capabilities-combo-replacement/</id>
    <published>2024-08-15T08:47:55.000Z</published>
    <updated>2024-11-06T15:42:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR;"></a>TL;DR;</h2><p>combo 介绍：这个就是<br><code>https://d.alicdn.com/alilog/??aplus/1.13.5/aplus_pc.js,aplus/1.13.5/plugin/aplus_spmact.js?v=20240718161046</code></p><p><a href="https://github.com/eric-gitta-moore/whistle.combo-url">whistle.combo-url</a> 是最终的成品插件，可以根据 README 提示上手使用一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample 1, for https://www.taobao.com/</span></span><br><span class="line"><span class="comment"># sourceURL: https://d.alicdn.com/alilog/??aplus/1.13.5/aplus_pc.js,aplus/1.13.5/plugin/aplus_spmact.js?v=20240718161046</span></span><br><span class="line"><span class="comment"># target:</span></span><br><span class="line"><span class="comment">#   - aplus/1.13.5/aplus_pc.js -&gt; not modified</span></span><br><span class="line"><span class="comment">#   - aplus/1.13.5/plugin/aplus_spmact.js -&gt; https://d.alicdn.com/alilog/aplus/1.13.2/plugin/aplus_spmact.js</span></span><br><span class="line"></span><br><span class="line"><span class="string">/.+.(ali)cdn.com/i</span> <span class="string">combo-url://&#123;com-yaml&#125;</span> <span class="string">resCors://*</span></span><br><span class="line"><span class="string">```com-yaml</span></span><br><span class="line"><span class="attr">mapping:</span></span><br><span class="line">  <span class="string">/aplus/1.13.5/plugin/aplus_spmact.js/i:</span> <span class="string">https://d.alicdn.com/alilog/aplus/1.13.2/plugin/aplus_spmact.js</span></span><br><span class="line"><span class="string">```</span></span><br></pre></td></tr></table></figure><h2 id="Whistle-介绍"><a href="#Whistle-介绍" class="headerlink" title="Whistle 介绍"></a>Whistle 介绍</h2><p>Whistle 是基于 Node 实现的跨平台抓包调试工具</p><p>官网：<a href="https://github.com/avwo/whistle">https://github.com/avwo/whistle</a></p><p><img src="https://user-images.githubusercontent.com/11450939/169521501-58e59e1b-1970-477c-a213-f28234628e4b.png"><br><img src="https://user-images.githubusercontent.com/11450939/169634452-64e7bf4b-4cb1-4289-9ba2-3c1913d6c2dd.png"></p><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>用过 Whistle 的老师应该都知道，反代某个资源或者是 mock 某个请求，又或是正则替换都非常方便。使用 DLS 声明规则就行了</p><p>但如果是 combo 类型的资源，那就会有点棘手了。我们希望只替换其中某个 js，其他的依旧请求源站获取。</p><p>如果 Google 搜索一下会发现有两个比较好的工具可以实现，一个是 Whistle 配套插件 <a href="https://github.com/whistle-plugins/whistle.combo">whistle.combo</a>，另一个是 <a href="https://github.com/wayfind/flex-combo">flex-combo</a></p><p><img src="https://camo.githubusercontent.com/e460ae7052fba7076d8bc3c1f42ba18b7b3fd29c9f076b9f0b41b53de95e9d27/687474703a2f2f696d6730342e74616f62616f63646e2e636f6d2f7470732f69342f5431796538354667386558585868544f546f2d3537302d3433382e706e67"></p><p>但是两个插件都是在本地找具体的问题，现在前端开发更多是开启一个 <code>live server</code>，此时我们希望能够从我们指定的 url 获取 js 资源。并且最好能够按照我们指定的正则表达式匹配。</p><p>简而言之，例如把 <code>http://i.cdn.com/??x.js,y.js,z.js</code></p><p>替换成</p><ul><li><code>http://i.cdn.com/x.js</code></li><li><code>https://baidu.com/y.js</code></li><li><code>https://google.com/z.js</code></li></ul><p>上面三个文件的组合</p><p>这种情况咱们可以借助 Whistle 插件的能力，在 <code>request</code> 请求前后进行拦截，手动拆分、获取、组合实现这样的需求</p><h2 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h2><p>接下来重点介绍 Whistle 的插件系统以及实践</p><p>为了满足一些特定业务场景的需要，whistle 提供了插件扩展能力，通过插件可以新增 whistle 的协议实现更复杂的操作、也可以用来存储或监控指定请求、集成业务本地开发调试环境等等，基本上可以做任何你想做的事情，且开发、发布及安装 whistle 插件也都很简单。</p><p>whistle的插件就是一个Node模块，名字必须为 <code>whistle.your-plugin-name</code> 或 <code>@org/whistle.your-plugin-name</code>，其中 <code>your-plugin-name</code> 为插件名称，只能包含 <code>小写字母(a-z)</code>、<code>数字(0-9)</code>、<code>_</code>、<code>-</code> 四种字符</p><p>可以在 whistle 的插件列表看到：</p><p><img src="https://wproxy.org/whistle/img/plugin-list.png" alt="插件列表"></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>whistle 的插件是一个独立运行的进程，这样是为了确保插件不会影响到 whistle 主进程的稳定性，并通过暴露一些 http server 的方式实现与 whistle 的交互，whistle 会在特定阶段请求特定的server，具体看下面的原理图：</p><blockquote><p>这里的 server 指的是 Whistle 插件系统中的钩子，而不是 HTTP sever 或者 Sevlet 等</p></blockquote><p><img src="https://wproxy.org/whistle/img/plugin1.png"></p><p>再鸟瞰一下一个完整插件所有的文件和钩子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">❯ tree                                         </span><br><span class="line">.</span><br><span class="line">├── lib</span><br><span class="line">│   ├── auth.js</span><br><span class="line">│   ├── reqRead.js</span><br><span class="line">│   ├── reqWrite.js</span><br><span class="line">│   ├── resRead.js</span><br><span class="line">│   ├── resRulesServer.js</span><br><span class="line">│   ├── resStatsServer.js</span><br><span class="line">│   ├── resWrite.js</span><br><span class="line">│   ├── rulesServer.js</span><br><span class="line">│   ├── server.js</span><br><span class="line">│   ├── sniCallback.js</span><br><span class="line">│   ├── statsServer.js</span><br><span class="line">│   ├── tunnelReqRead.js</span><br><span class="line">│   ├── tunnelReqWrite.js</span><br><span class="line">│   ├── tunnelResRead.js</span><br><span class="line">│   ├── tunnelResWrite.js</span><br><span class="line">│   ├── tunnelRulesServer.js</span><br><span class="line">│   ├── uiServer</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   └── router.js</span><br><span class="line">│   ├── wsReqRead.js</span><br><span class="line">│   ├── wsReqWrite.js</span><br><span class="line">│   ├── wsResRead.js</span><br><span class="line">│   └── wsResWrite.js</span><br><span class="line">└── package.json</span><br><span class="line"></span><br><span class="line">3 directories, 23 files</span><br></pre></td></tr></table></figure><p>其实可以理解为文件名和图中的钩子节点是一致的，具体文件里面还有个每个钩子事件</p><p>例如最常用的 <code>server</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">server, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// handle http request</span></span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    req.<span class="title function_">passThrough</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handle websocket request</span></span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&#x27;upgrade&#x27;</span>, <span class="function">(<span class="params">req, socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    req.<span class="title function_">passThrough</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handle tunnel request</span></span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">(<span class="params">req, socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    req.<span class="title function_">passThrough</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样应该就非常好理解了。我们只需要拦截 <code>server</code> 钩子的 <code>request</code> 事件就行了。</p><p>在里面我们拿到 <code>req</code> 的 url，拆分，然后挨个匹配规则，接着挨个请求，最后用 <code>Buffer</code> 合并一起返回给 <code>res</code> 就行了</p><h3 id="实战编写"><a href="#实战编写" class="headerlink" title="实战编写"></a>实战编写</h3><p>建立 npm 包，初始化等就不再赘述</p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>先导出 <code>server</code> 钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// whistle.combo-url/index.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">server</span> = <span class="built_in">require</span>(<span class="string">&#x27;./lib/server&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在 <code>whistle.combo-url/lib/server.js</code> 复制 <code>server</code> 钩子实现模版</p><p>我们只需要处理 http(s) 请求，只需要 <code>request</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// whistle.combo-url/lib/server.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">server, options</span>) =&gt;</span> &#123;</span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.<span class="title function_">passThrough</span>(); <span class="comment">// 直接放行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h4><p>我们以开头定义的配置为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample 1, for https://www.taobao.com/</span></span><br><span class="line"><span class="comment"># sourceURL: https://d.alicdn.com/alilog/??aplus/1.13.5/aplus_pc.js,aplus/1.13.5/plugin/aplus_spmact.js?v=20240718161046</span></span><br><span class="line"><span class="comment"># target:</span></span><br><span class="line"><span class="comment">#   - aplus/1.13.5/aplus_pc.js -&gt; not modified</span></span><br><span class="line"><span class="comment">#   - aplus/1.13.5/plugin/aplus_spmact.js -&gt; https://d.alicdn.com/alilog/aplus/1.13.2/plugin/aplus_spmact.js</span></span><br><span class="line"></span><br><span class="line"><span class="string">/.+.(ali)cdn.com/i</span> <span class="string">combo-url://&#123;com-yaml&#125;</span> <span class="string">resCors://*</span></span><br><span class="line"><span class="string">```com-yaml</span></span><br><span class="line"><span class="attr">mapping:</span></span><br><span class="line">  <span class="string">/aplus/1.13.5/plugin/aplus_spmact.js/i:</span> <span class="string">https://d.alicdn.com/alilog/aplus/1.13.2/plugin/aplus_spmact.js</span></span><br><span class="line"><span class="string">```</span></span><br></pre></td></tr></table></figure><p>配置 yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mapping:</span></span><br><span class="line">  <span class="string">/aplus/1.13.5/plugin/aplus_spmact.js/i:</span> <span class="string">https://d.alicdn.com/alilog/aplus/1.13.2/plugin/aplus_spmact.js</span></span><br></pre></td></tr></table></figure><p>那么 yaml 转 json 出来就是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mapping&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;/aplus/1.13.5/plugin/aplus_spmact.js/i&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://d.alicdn.com/alilog/aplus/1.13.2/plugin/aplus_spmact.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到正则很好的被识别了出来，不需要使用者额外加转义了</p><h4 id="解析配置文件-解析并应用映射规则"><a href="#解析配置文件-解析并应用映射规则" class="headerlink" title="解析配置文件 &amp; 解析并应用映射规则"></a>解析配置文件 &amp; 解析并应用映射规则</h4><p>解析 YAML 依赖 <code>yaml</code> 这个库，需要手动安装一下 <code>npm i -g yaml</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// whistle.combo-url/lib/server.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">YAML</span> = <span class="built_in">require</span>(<span class="string">&quot;yaml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解开 combo url 变成单个文件</span></span><br><span class="line"><span class="comment">// delimiter 是界定符，默认是 ??</span></span><br><span class="line"><span class="comment">// separator 是文件分隔符，默认是 ,</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unfoldUrlCombo</span>(<span class="params">&#123; delimiter, separator, url &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlParsed = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="string">`<span class="subst">$&#123;urlParsed.origin&#125;</span><span class="subst">$&#123;urlParsed.pathname&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> urlParsed.<span class="property">search</span></span><br><span class="line">    .<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span><span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">server, options</span>) =&gt;</span> &#123;</span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ruleValue = <span class="variable constant_">YAML</span>.<span class="title function_">parse</span>(</span><br><span class="line">      <span class="comment">// 其中 `options.RULE_VALUE_HEADER` 就是一个键的常量</span></span><br><span class="line">      <span class="built_in">decodeURIComponent</span>(req.<span class="property">headers</span>[options.<span class="property">RULE_VALUE_HEADER</span>]),</span><br><span class="line">      <span class="comment">// 通过 `req.headers[options.RULE_VALUE_HEADER]` 可以把用户在 `Rules` 页面的配置拿到，拿到的结果是 URLEncode 之后的，这里还需要解码一下</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> rewriteList = <span class="title function_">unfoldUrlCombo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: req.<span class="property">fullUrl</span>, <span class="comment">// 请求完整的 URL</span></span><br><span class="line">      <span class="attr">delimiter</span>: <span class="string">&#x27;??&#x27;</span>,</span><br><span class="line">      <span class="attr">separator</span>: <span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">    &#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">curUrl</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> regex <span class="keyword">in</span> finalRule.<span class="property">mapping</span>) &#123;</span><br><span class="line">        <span class="comment">// e.g. regex === /aplus/1.13.5/plugin/aplus_spmact.js/i</span></span><br><span class="line">        <span class="comment">// 找到前正则界定符，/aplus/1.13.5/plugin/aplus_spmact.js/i</span></span><br><span class="line">        <span class="comment">//                ⌃</span></span><br><span class="line">        <span class="keyword">const</span> regRaw = regex.<span class="title function_">slice</span>(<span class="number">1</span>, regex.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;/&quot;</span>)); </span><br><span class="line">        <span class="comment">// 找到后正则界定符号，、aplus/1.13.5/plugin/aplus_spmact.js/i</span></span><br><span class="line">        <span class="comment">//                                                      ⌃</span></span><br><span class="line">        <span class="keyword">const</span> modifier = regex.<span class="title function_">slice</span>(regex.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 构建正则，测试是否匹配 URL</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">RegExp</span>(regRaw, modifier).<span class="title function_">test</span>(curUrl)) &#123;</span><br><span class="line">          <span class="comment">// 如果匹配的话用给定配置换掉 URL</span></span><br><span class="line">          <span class="keyword">return</span> finalRule.<span class="property">mapping</span>[regex];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 用原 URL</span></span><br><span class="line">      <span class="keyword">return</span> curUrl;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.<span class="title function_">passThrough</span>(); <span class="comment">// 直接放行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="获取-combo-资源-拼接-Buffer"><a href="#获取-combo-资源-拼接-Buffer" class="headerlink" title="获取 combo 资源 &amp; 拼接 Buffer"></a>获取 combo 资源 &amp; 拼接 Buffer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">server, options</span>) &#123;</span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// const ruleValue = ...</span></span><br><span class="line">    <span class="comment">// const rewriteList = ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type</span> &#123;<span class="type">Uint8Array[]</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> comboBuffer = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: rewriteList.<span class="property">length</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> tasks = rewriteList.<span class="title function_">map</span>(<span class="keyword">async</span> (e, idx) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 挨个请求数据拿到 buffer （其实也可以合并一下没有被替换掉，但是会麻烦一点，需要保持被替换的 js 在返回结果中的上下位置不变）</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(e).<span class="title function_">then</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e.<span class="title function_">arrayBuffer</span>());</span><br><span class="line">      comboBuffer[idx] = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(tasks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    req.<span class="title function_">passThrough</span>(); <span class="comment">// 直接放行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构造响应-返回数据"><a href="#构造响应-返回数据" class="headerlink" title="构造响应 &amp; 返回数据"></a>构造响应 &amp; 返回数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">server, options</span>) &#123;</span><br><span class="line">  server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// const ruleValue = ...</span></span><br><span class="line">    <span class="comment">// const rewriteList = ...</span></span><br><span class="line">    <span class="comment">// const comboBuffer = ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> client = req.<span class="title function_">request</span>(<span class="function">(<span class="params">svrRes</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 长度有变，直接删除</span></span><br><span class="line">      <span class="keyword">delete</span> svrRes.<span class="property">headers</span>[<span class="string">&quot;content-length&quot;</span>];</span><br><span class="line">      <span class="comment">// 目前的 comboBuffer 是没有 gzip 压缩过，删除服务端下发的压缩编码</span></span><br><span class="line">      <span class="keyword">delete</span> svrRes.<span class="property">headers</span>[<span class="string">&quot;content-encoding&quot;</span>];</span><br><span class="line">      <span class="comment">// 写请求头</span></span><br><span class="line">      res.<span class="title function_">writeHead</span>(</span><br><span class="line">        finalRule.<span class="property">resStatusCode</span>,</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, svrRes.<span class="property">headers</span>, finalRule.<span class="property">OverrideResHeaders</span>),</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 发送 buffer</span></span><br><span class="line">      res.<span class="title function_">end</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(comboBuffer));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 处理请求，必须。不然请求方的 socket 会被挂起</span></span><br><span class="line">    req.<span class="title function_">pipe</span>(client);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// req.passThrough(); // 直接放行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>到目前为止，整个插件的功能已经完成了。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>可以在插件项目根目录下面运行 <code>w2 run</code>，这个时候会自动读取当前目录下的插件</p><img src="/2024/description-of-whistle-plug-in-capabilities-combo-replacement/image.png" class=""><p>命中，在检查一下返回的数据，确实被替换了</p><img src="/2024/description-of-whistle-plug-in-capabilities-combo-replacement/image2.png" class=""><p>完结</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR;&quot;&gt;&lt;/a&gt;TL;DR;&lt;/h2&gt;&lt;p&gt;combo 介绍：这个就是&lt;br&gt;&lt;code&gt;https://d.alicdn.com/alilog/??apl</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>获取 css 实际渲染字体，区分本地字体和远程字体，判断混合字体</title>
    <link href="https://eric-gitta-moore.github.io/2024/get-css-rendered-font/"/>
    <id>https://eric-gitta-moore.github.io/2024/get-css-rendered-font/</id>
    <published>2024-08-08T07:21:24.000Z</published>
    <updated>2024-11-06T15:42:38.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>获取 css 实际渲染字体</li><li>希望能够区分本地字体和远程字体</li><li>并且能够判断这行文字有没有混用字体</li></ul><h2 id="尝试方式"><a href="#尝试方式" class="headerlink" title="尝试方式"></a>尝试方式</h2><h3 id="计算样式-getComputedStyle"><a href="#计算样式-getComputedStyle" class="headerlink" title="计算样式 getComputedStyle"></a>计算样式 getComputedStyle</h3><blockquote><p>ref: <a href="https://stackoverflow.com/a/7444724">https://stackoverflow.com/a/7444724</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">css</span>(<span class="params"> element, property </span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>( element, <span class="literal">null</span> ).<span class="title function_">getPropertyValue</span>( property );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="title function_">css</span>($0, <span class="string">&#x27;font-family&#x27;</span>)</span><br></pre></td></tr></table></figure><p>只能获取到计算后的 font-family 有哪些，并无法得知实际使用的字体</p><img src="/2024/get-css-rendered-font/image.png" class="" title="alt text"><h3 id="FontFaceSet-prototype-check"><a href="#FontFaceSet-prototype-check" class="headerlink" title="FontFaceSet.prototype.check"></a>FontFaceSet.prototype.check</h3><blockquote><p>mdn: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet/check">https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet/check</a></p><p>FontFaceSet 的check()方法会返回是否在给定的字体列表中的所有字体已经被加载并可用。</p></blockquote><p>实现 &amp; 使用</p><blockquote><p>ref: <a href="https://stackoverflow.com/a/75228391">https://stackoverflow.com/a/75228391</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getRenderedFontFamilyName</span> = (<span class="params"> element </span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Font families set in CSS for the element</span></span><br><span class="line">    <span class="keyword">const</span> fontFamilies = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>( element, <span class="literal">null</span> ).<span class="title function_">getPropertyValue</span>( <span class="string">&quot;font-family&quot;</span> );</span><br><span class="line">    <span class="comment">// const hardcodedFamilies = &#x27;-apple-system, BlinkMacSystemFont, &quot;Segoe UI Adjusted&quot;, &quot;Segoe UI&quot;, &quot;Liberation Sans&quot;, sans-serif&#x27;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Remove the &quot; sign from names (font families with spaces in their names) and split names to the array</span></span><br><span class="line">    <span class="keyword">const</span> fontFamiliesArr = fontFamilies.<span class="title function_">replaceAll</span>(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the first loaded font from the array</span></span><br><span class="line">    <span class="keyword">return</span> fontFamiliesArr.<span class="title function_">find</span>( <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">document</span>.<span class="property">fonts</span>.<span class="title function_">check</span>( <span class="string">`12px <span class="subst">$&#123;e&#125;</span>`</span>) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="title function_">getRenderedFontFamilyName</span>($0);</span><br></pre></td></tr></table></figure><p>更进一步，这个 api 可以知道字体在整个 document 里面是否可用，但是并不一定是生效的那个字体</p><h3 id="Canvas-绘制-逐字对比"><a href="#Canvas-绘制-逐字对比" class="headerlink" title="Canvas 绘制+逐字对比"></a>Canvas 绘制+逐字对比</h3><blockquote><p>stack overflow: <a href="https://stackoverflow.com/a/38910481">https://stackoverflow.com/a/38910481</a></p></blockquote><p>实际上本质就是先拿到计算字体族然后再用 monospace 字体作为 fallback，</p><p>接着挨个字体去绘制，如果碰到哪次绘制和上一次不一样，那么本次使用的字体就是 rendered font</p><p>问题是很多字体其实有些字是挺类似的，这个误判率还挺高，也不适合频繁获取的场景</p><p>具体实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">renderedfont</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> getDefaultFonts = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> fonts;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line">        iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">open</span>();</span><br><span class="line">        iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">write</span>(html);</span><br><span class="line">        <span class="keyword">var</span> subele = iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">createElement</span>(ele.<span class="property">tagName</span>);</span><br><span class="line">        iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(subele);</span><br><span class="line">        fonts = <span class="title function_">getComputedStyle</span>(subele)[<span class="string">&#x27;font-family&#x27;</span>];</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe);</span><br><span class="line">        <span class="keyword">return</span> fonts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fonts = <span class="title function_">getComputedStyle</span>(ele)[<span class="string">&#x27;font-family&#x27;</span>] + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">getDefaultFonts</span>();</span><br><span class="line">    <span class="keyword">var</span> fontsArray = fonts.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> testString = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()ñ&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> prevImageData;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(canvas);</span><br><span class="line">    canvas.<span class="property">width</span> = <span class="number">500</span>;</span><br><span class="line">    canvas.<span class="property">height</span> = <span class="number">300</span>;</span><br><span class="line">    fontsArray.<span class="title function_">unshift</span>(<span class="string">&#x27;&quot;Font That Doesnt Exists &#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() + <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fontsArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> fontName = fontsArray[i].<span class="title function_">trim</span>();</span><br><span class="line">        ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">        ctx.<span class="property">font</span> = <span class="string">&#x27;16px &#x27;</span> + fontName + <span class="string">&#x27;, monospace&#x27;</span>;</span><br><span class="line">        ctx.<span class="title function_">fillText</span>(testString, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">var</span> idata = ctx.<span class="title function_">getImageData</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>); </span><br><span class="line">        <span class="keyword">var</span> data = idata.<span class="property">data</span></span><br><span class="line">        <span class="keyword">if</span> (prevImageData) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; data.<span class="property">length</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prevImageData[j + <span class="number">3</span>] !== data[j + <span class="number">3</span>]) &#123;</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(canvas);</span><br><span class="line">                    <span class="keyword">return</span> fontName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prevImageData = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(canvas);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;monospace&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="title function_">renderedfont</span>($0)</span><br></pre></td></tr></table></figure><h3 id="Chrome-DevTools-Protocol"><a href="#Chrome-DevTools-Protocol" class="headerlink" title="Chrome DevTools Protocol"></a>Chrome DevTools Protocol</h3><p>这里我们换一个思路，既然控制台能够看到 rendered font，也可以从这里下手。只不过使用 cdp 实现的要派上用场会有点麻烦，用户不一定安装我们自己写的浏览器插件</p><img src="/2024/get-css-rendered-font/image.png" class="" title="alt text"><p>打开 DevTools 的实验性选项 <code>Protocol Monitor</code>，在 <code>Elements</code> tab 选中元素的时候发现会请求一个带有 font 字样的 cdp api <code>getPlatformFontsForNode</code></p><p>经过查阅 <a href="https://chromedevtools.github.io/devtools-protocol/">cdp</a> 的 api 发现 <code>CSS.getPlatformFontsForNode</code> 确实可以获取到 rendered fonts，而且还能够区分是本地字体还是网络字体</p><img src="/2024/get-css-rendered-font/image-1.png" class="" title="alt text"><p>api 的返回结果是 <code>array[ PlatformFontUsage ]</code></p><p>其中又一个键是 <code>isCustomFont</code>，表示 表示字体是否已下载或已在本地解析</p><blockquote><p>isCustomFont: Indicates if the font was downloaded or resolved locally.</p></blockquote><p>所以流程大概如下：</p><p>1、DOM.getDocument 拿到 document nodeId</p><p>2、DOM.querySelector + doc nodeId + CSS Selector 选中目标元素 拿到 Element nodeId</p><p>3、CSS.getPlatformFontsForNode + Element nodeId 拿到 Array<PlatformFontUsage></p><p>4、PlatformFontUsage.isCustomFont：Indicates if the font was downloaded or resolved locally.</p><img src="/2024/get-css-rendered-font/image-2.png" class="" title="alt text"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>1、计算样式，只能获取设置的字体，无法获取实际渲染字体 ❌<br>2、FontFaceSet.prototype.check 可以检测字体是否在 document 可用，但是不一定是 rendered font ❌<br>3、canvas 逐字判定 容错率太低，可能识别错误，且性能不太行 ❌<br>4、CDP 实现，完美获取，性能优异，但是需要额外开发浏览器插件，且用户路径较长</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/57853292/how-to-get-the-rendered-font-in-javascript">https://stackoverflow.com/questions/57853292/how-to-get-the-rendered-font-in-javascript</a></li><li><a href="https://stackoverflow.com/questions/7444451/how-to-get-the-actual-rendered-font-when-its-not-defined-in-css">https://stackoverflow.com/questions/7444451/how-to-get-the-actual-rendered-font-when-its-not-defined-in-css</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;获取 css 实际渲染字体&lt;/li&gt;
&lt;li&gt;希望能够区分本地字体和远程字体&lt;/li&gt;
&lt;li&gt;并且能够判断这行文字有没有混用字</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>2024 年在 Windows/macOS/Linux 启用干净无广告的 Adobe Flash Player 的方法</title>
    <link href="https://eric-gitta-moore.github.io/2024/a-way-to-enable-clean-ad-free-adobe-flash-player-on-windows-macos-linux-in-2024/"/>
    <id>https://eric-gitta-moore.github.io/2024/a-way-to-enable-clean-ad-free-adobe-flash-player-on-windows-macos-linux-in-2024/</id>
    <published>2024-06-24T16:16:25.000Z</published>
    <updated>2024-11-06T15:42:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Adobe 在 2020 年彻底终止了对 Flash Player 的支持, 随后各大主流浏览器（Chrome, Firefox, Safari 等）也开始纷纷移除 Flash Player 的相关代码。目前在这些浏览器的最新版本中，即使你的电脑上安装了 Flash Player 也无法正常使用它。</p><p>这对整个互联网行业的发展毫无疑问是一件好事，垃圾就应该滚出历史的舞台，如果说这件事对整个行业而言有什么不好的地方，那可能就是它发生得太晚了。</p><p>然而 Flash Player 的缺失也给部分用户带来了不便（比如我这种想要玩经典页游的人），本文将会介绍在三大主流桌面平台 Windows&#x2F;macOS&#x2F;Linux 安装纯净版 Flash Player 的方法。</p><h2 id="现有的解决方案及其不足之处"><a href="#现有的解决方案及其不足之处" class="headerlink" title="现有的解决方案及其不足之处"></a>现有的解决方案及其不足之处</h2><h3 id="国产浏览器"><a href="#国产浏览器" class="headerlink" title="国产浏览器"></a>国产浏览器</h3><p>为了迎合部分用户的需求，一些国产浏览器保留了对 Flash Player 的支持。</p><p>但是我要说的是，这些国产浏览器（百度、360、QQ 等），有一个算一个，全都是垃圾。原因如下：</p><ol><li>没什么技术上的创新。它们都是基于 <a href="https://www.chromium.org/chromium-projects/">Chromium</a> 开发的，这是 Google Chrome 的前身，免费开源无广告。如果说它们真的有什么创新，那可能就是在 Chromium 的基础上加了广告和隐私追踪器。</li><li>这些浏览器通常会在后台起一个进程，名字一般含有 Safe &#x2F; Security 之类的字眼，但如果你真以为它们是为了保护你的上网安全那就大错特错了，这些东西的唯一作用就是收集你的隐私数据，然后向你定向推送广告。</li><li>内置各种垃圾根证书。这些东西做过的恶太多了，使用它们将会带来极大的安全隐患。</li><li>最恶心的一点，你想要访问的网站可能会突然因为各种原因而无法访问（例如当年的 996.ICU）。浏览器只不过是一个工具，它不应该也没有任何资格来干涉用户想要访问什么网站。</li></ol><p>我的建议是，不要使用任何国产浏览器。如果你的电脑上安装了什么国产浏览器，你应该立马卸载掉它们，因为即使你不启动它们，第 2 点所提到的那些进程也会在后台自动运行。</p><p>你的首选应该是开源浏览器（例如 Firefox, Chromium），其次是国际化的闭源浏览器（例如 Safari, Chrome）。</p><p>本文所使用的所有浏览器都是开源浏览器。</p><h3 id="中国特供版-Flash-Player"><a href="#中国特供版-Flash-Player" class="headerlink" title="中国特供版 Flash Player"></a>中国特供版 Flash Player</h3><p>Flash Player 由美国的 <a href="https://www.adobe.com/">Adobe</a> 公司开发，由于国内的网络环境比较特殊，时至今日依然有部分网站死守 Flash Player 绝不松手（而你还往往拿它们没办法），于是 Adobe 在 2020 年宣布停止对 Flash Player 的支持后又将它交给了国内的<a href="https://www.izhongcheng.cn/">重橙网络</a>代理，使其依然能够在大陆地区使用。</p><p>然而该公司是业内有名的毒瘤，在代理了 Flash Player 后它所做的事情包括但不限于：</p><ol><li>使用各种手段，阻止大陆用户使用国际版 Flash Player, 让大家只能用“中国特供版”</li><li>收集你的大量隐私信息，包括但不限于你的 IP 地址、你访问的链接、你电脑上安装的软件等等</li><li>根据收集到的信息推送个性化广告，且无法关闭</li><li>如果这些信息遭到了泄露，重橙公司无需承担任何责任（明文写在用户协议里）</li></ol><p>因此，直接安装中国特供版 Flash Player 是一个极其冒险的行为，不建议除了从事网络空间安全以外的任何人尝试。</p><h3 id="开源-Flash-Player-替代品"><a href="#开源-Flash-Player-替代品" class="headerlink" title="开源 Flash Player 替代品"></a>开源 Flash Player 替代品</h3><p>Flash Player 目前有两个开源解决方案：</p><ul><li><a href="https://ruffle.rs/">Ruffle</a>: Rust 写的 Flash Player 替代品，可以正常播放视频，但是完成度还不高，尤其缺乏对 Action Script 3 的支持（也就没法玩游戏）</li><li><a href="http://lightspark.github.io/">Lightspark</a>：C&#x2F;C++ 写的 Flash Player 替代品，同样完成度不高，播放视频足够了，但打游戏还差点意思。</li></ul><p>本文将会使用纯净构建的官方版 Flash Player，支持原版 Flash Player 的所有特性，并且没有广告和和中国特供版的各种恶意组件。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="使用低版本-Firefox"><a href="#使用低版本-Firefox" class="headerlink" title="使用低版本 Firefox"></a>使用低版本 Firefox</h3><p>虽然最新版的 Chrome 和 Firefox 移除了 Flash Player 的相关代码，但是我们依然可以在较低的版本中使用它。</p><p><a href="https://archive.org/">archive.org</a> 上面保留了支持 Flash Player 的最后一个版本的 Firefox 和 Chrome，有需要的可以从这里下载：<a href="https://archive.org/download/Firefox_Chrome_Adobe_Flash">下载链接</a></p><p>下载的版本是便携版，无需安装，解压后双击 “FirefoxPortable.exe” 即可使用。</p><p>这个便携版内置了 Flash，所以你也无需安装 Flash Player，直接访问你想访问的网站即可。</p><h3 id="安装-Flash-Player-独立运行组件"><a href="#安装-Flash-Player-独立运行组件" class="headerlink" title="安装 Flash Player 独立运行组件"></a>安装 Flash Player 独立运行组件</h3><p>某些游戏辅助器可能不会在浏览器里运行，而是会直接使用系统中安装的 Flash Player 独立运行组件，这种情况下你需要安装 Flash Player。</p><p>有人在 GitLab 上开发了一个项目 <a href="https://gitlab.com/cleanflash/installer">Clean Flash Player</a>，它在中国特供版 Flash Player 的基础上进行了魔改，移除了各种限制，删除了和收集隐私与推送广告相关的文件。</p><p>有需要的可以从 <a href="https://gitlab.com/cleanflash/installer/-/releases">Release Page</a> 下载最新版。</p><h3 id="使用-Waterfox"><a href="#使用-Waterfox" class="headerlink" title="使用 Waterfox"></a>使用 Waterfox</h3><p>低版本的 Firefox 虽然能用 Flash，但是由于长期未更新，它也同样存在各种安全漏洞和 Bug。</p><p>Waterfox 是一个基于 Firefox 开发的浏览器，和 Firefox 一样免费开源无广告。</p><p>Waterfox 有两个版本，Current 和 Classic，Current 基于最新版 Firefox 构建，我个人测试无法使用 Flash Player，另外一个 Classic 基于老版本 Firefox 构建，可以用 Flash Player，并且相比于旧版 Firefox 还修复了很多安全漏洞和 Bug。</p><p>首先下载并安装 Waterfox Classic：<a href="https://classic.waterfox.net/">官方下载地址</a></p><p>Waterfox 没有内置 Flash Player，所以安装完后还需要安装 Flash Player 独立运行组件，参考上一节进行安装。</p><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>本文在 Apple Silicon 系列芯片的 Mac 上测试通过，理论上 Intel 芯片的 Mac 应该也可行，因为安装的程序都是 X86 架构的。</p><p>首先下载并安装 Waterfox Classic：<a href="https://classic.waterfox.net/">官方下载地址</a></p><p>然后下载 <a href="https://github.com/darktohka/clean-flash-builds">darktohka&#x2F;clean-flash-builds</a>，这是一个开源构建的纯净版 Flash Player，下载的时候选最新版 Mac NPAPI 版本。</p><p>下载完成之后解压，然后打开访达，按下 Command+Shift+G ，输入 “~&#x2F;Library&#x2F;Internet Plug-Ins&#x2F;” 并回车。</p><p>把解压后得到的 “FlashPlayer-10.6.plugin” 和 “flashplayer.xpt” 复制到这个文件夹下。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>首先安装 Waterfox Classic: <a href="https://classic.waterfox.net/">官方下载地址</a></p><p>Arch Linux 用户也可以从 AUR 安装：<a href="https://aur.archlinux.org/packages/waterfox-classic-bin">waterfox-classic-bin</a></p><p>接下来下载 <a href="https://github.com/darktohka/clean-flash-builds">darktohka&#x2F;clean-flash-builds</a>，选 Linux 版 64 位 NPAPI：<a href="https://github.com/darktohka/clean-flash-builds/releases/tag/v1.7">下载链接</a></p><p>把解压后得到的 <code>libflashplayer.so</code> 放到 <code>~/.waterfox/plugins</code> 目录下。</p><p>或者执行以下命令一键安装:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/.waterfox/plugins &amp;&amp; wget https://download.fastgit.org/darktohka/clean-flash-builds/releases/download/v1.7/flash_player_patched_npapi_linux.$( (( $(getconf LONG_BIT) == 32 )) &amp;&amp; echo &quot;i386&quot; || echo &quot;x86_64&quot;).tar.gz -O - | tar -zxf - -C ~/.waterfox/plugins libflashplayer.so</span><br></pre></td></tr></table></figure><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul><li><a href="https://www.sainnhe.dev/post/enable-flash-player-in-2022/">https://www.sainnhe.dev/post/enable-flash-player-in-2022/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Adobe 在 2020 年彻底终止了对 Flash Player 的支持, 随后各大主流浏览器（Chrome, Firefox, Safa</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>p10k ohmyzsh 右侧 nvm 版本显示错误为 system，不显示具体版本号</title>
    <link href="https://eric-gitta-moore.github.io/2024/p10k-ohmyzsh-the-error-of-the-nvm-version-on-the-right-is-system-and-the-specific-version-is-not-displayed/"/>
    <id>https://eric-gitta-moore.github.io/2024/p10k-ohmyzsh-the-error-of-the-nvm-version-on-the-right-is-system-and-the-specific-version-is-not-displayed/</id>
    <published>2024-06-07T09:58:57.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="病因"><a href="#病因" class="headerlink" title="病因"></a>病因</h2><p><code>~/.nvm/versions/node</code> 下面的目录不能是软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[~/.nvm/versions/node]❯ l                                                               </span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  10 admin  staff   320B  6  7 18:01 .</span><br><span class="line">drwxr-xr-x   3 admin  staff    96B  4 25 16:07 ..</span><br><span class="line">drwxr-xr-x   6 admin  staff   192B  6  7 16:53 v14.21.3</span><br><span class="line">lrwxr-xr-x   1 admin  staff    45B  6  7 18:01 v14.21.999 -&gt; /Users/admin/workspace/prebuild-node/v14.21.3</span><br><span class="line">drwxr-xr-x   9 admin  staff   288B  5 21 12:34 v15.14.0</span><br><span class="line">drwxr-xr-x   9 admin  staff   288B  4 30 14:37 v16.20.2</span><br><span class="line">drwxr-xr-x   9 admin  staff   288B  4 30 14:37 v18.20.2</span><br><span class="line">drwxr-xr-x   9 admin  staff   288B  4 30 14:36 v20.12.2</span><br><span class="line">drwxr-xr-x   9 admin  staff   288B  5 16 02:41 v20.13.1</span><br><span class="line">drwxr-xr-x   9 admin  staff   288B  6  6 23:29 v20.14.0</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>把对应的构建后文件复制过来</p><p>注意，复制之后 <code>bin</code> 目录下面的软链接会丢失，要重新手动链接</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p><strong>目标</strong>：找到显示 nvm 版本号的源码</p><p>先从官方文档入手，发现右侧显示信息是可以配置的，<a href="https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#batteries-included">https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#batteries-included</a></p><p>于是打开 p10k 源码，直接搜索大法，找几个名字长一些比较有个性的配置项</p><p>我选 <code>cpu_arch</code> 搜索出来有 27 个结果</p><p><img src="/../../../../static/images/image.png" alt="alt text"></p><p>然后一个个观察，发现最后两个函数比较可疑</p><p><img src="/../../../../static/images/image-1.png" alt="alt text"></p><p><code>prompt_cpu_arch</code> 比较像是显示的</p><p>接着在这个文件里面继续搜索 <code>nvm</code> 相关</p><p>找葫芦画瓢，改成 <code>prompt_nvm</code> 搜一下看看</p><p><img src="/../../../../static/images/image-2.png" alt="alt text"></p><p>好家伙这一下就看到一个叫 <code>system</code> 的字样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prompt_nvm() &#123;</span><br><span class="line">  [[ -n $NVM_DIR ]] &amp;&amp; _p9k_nvm_ls_current || return</span><br><span class="line">  local current=$_p9k__ret</span><br><span class="line">  (( _POWERLEVEL9K_NVM_SHOW_SYSTEM )) ||</span><br><span class="line">    [[ $current != system ]]          ||</span><br><span class="line">    return</span><br><span class="line">  (( _POWERLEVEL9K_NVM_PROMPT_ALWAYS_SHOW )) ||</span><br><span class="line">    ! _p9k_nvm_ls_default                    ||</span><br><span class="line">    [[ $_p9k__ret != $current ]]             ||</span><br><span class="line">    return</span><br><span class="line">  _p9k_prompt_segment &quot;$0&quot; &quot;magenta&quot; &quot;black&quot; &#x27;NODE_ICON&#x27; 0 &#x27;&#x27; &quot;$&#123;$&#123;current#v&#125;//\%/%%&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知，<code>system</code> 是 <code>$current</code> 变量的一个值，通过调用 <code>_p9k_nvm_ls_current</code> 的返回</p><p>继续搜索 <code>_p9k_nvm_ls_current</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The same as `nvm_version current` but faster.</span></span><br><span class="line">_p9k_nvm_ls_current() &#123;</span><br><span class="line">  local node_path=$&#123;commands[node]:A&#125;</span><br><span class="line">  [[ -n $node_path ]] || return</span><br><span class="line"></span><br><span class="line">  local nvm_dir=$&#123;NVM_DIR:A&#125;</span><br><span class="line">  if [[ -n $nvm_dir &amp;&amp; $node_path == $nvm_dir/versions/io.js/* ]]; then</span><br><span class="line">    _p9k_cached_cmd 0 &#x27;&#x27; iojs --version || return</span><br><span class="line">    _p9k__ret=iojs-v$&#123;_p9k__ret#v&#125;</span><br><span class="line">  elif [[ -n $nvm_dir &amp;&amp; $node_path == $nvm_dir/* ]]; then</span><br><span class="line">    _p9k_cached_cmd 0 &#x27;&#x27; node --version || return</span><br><span class="line">    _p9k__ret=v$&#123;_p9k__ret#v&#125;</span><br><span class="line">  else</span><br><span class="line">    _p9k__ret=system</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个个条件看了下 <code>$nvm_dir/versions/io.js/*</code> 我的 nvm 好像没得这个文件应该不是，而且也没看到过 prompt 显示 <code>iojs-v14.23.4</code> 这种版本号</p><p>应该是下面这个 <code>p9k__ret=v$&#123;_p9k__ret#v&#125;</code></p><p>一看判断调节，这下真相大白了 <code>$node_path == $nvm_dir/*</code></p><blockquote><p><code>local node_path=$&#123;commands[node]:A&#125;</code><br>这个修饰符 <code>A</code> 是获取真实路径的</p></blockquote><p>原来是判断了 node 的真实路径和 NVM_DIR 环境变量是否前缀匹配</p><p>我这里是从其他目录 ln -s 过去的，肯定走不通这条判断</p><p>遂重新 <code>./configure --prefix=</code> 到 nvm 的目录下面</p><p>done</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;病因&quot;&gt;&lt;a href=&quot;#病因&quot; class=&quot;headerlink&quot; title=&quot;病因&quot;&gt;&lt;/a&gt;病因&lt;/h2&gt;&lt;p&gt;&lt;code&gt;~/.nvm/versions/node&lt;/code&gt; 下面的目录不能是软链接&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS 安装 node-sass + conda python2.7</title>
    <link href="https://eric-gitta-moore.github.io/2024/macos-install-node-sass-conda-python2-7/"/>
    <id>https://eric-gitta-moore.github.io/2024/macos-install-node-sass-conda-python2-7/</id>
    <published>2024-06-07T08:50:13.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>个别前端项目有使用 node-sass 依赖</p><p>最开始尝试使用 node 16，但是发现无法编译 node-sass</p><p>于是尝试修改为同年份的 sass，发现个别语法不兼容</p><p>之后手动编译了 node 14 arm 版本，而且 node-sass 依赖 python2，需要配合 conda python2.7 才安装上来的</p><p>但是 mac Apple Silicon Chip 又是 arm 架构，当时 python 2.7 早就 EOL 了</p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>主要坑点在于 conda python2.7 的安装</p><p>目前 conda 已经把 python2 的源剔除了，直接 <code>conda create -n py2 python==2.7</code> 会报错说找不到</p><p>而且 Apple Silicon Chip 发布在 python 2.7 EOL 之后</p><p>如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PackagesNotFoundError: The following packages are not available from current channels:</span><br><span class="line"></span><br><span class="line">  - python=2.7</span><br><span class="line"></span><br><span class="line">Current channels:</span><br><span class="line"></span><br><span class="line">  - https://conda.anaconda.org/conda-forge/osx-arm64</span><br><span class="line">  - https://conda.anaconda.org/conda-forge/noarch</span><br><span class="line"></span><br><span class="line"> To search for alternate channels that may provide the conda package you&#x27;re</span><br><span class="line"> looking for, navigate to</span><br><span class="line"></span><br><span class="line">    https://anaconda.org</span><br><span class="line"></span><br><span class="line">and use the search bar at the top of the page.</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONDA_SUBDIR=osx-64 conda create -n py27 python=2.7  # include other packages here</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ensure that future package installs <span class="keyword">in</span> this <span class="built_in">env</span> stick to <span class="string">&#x27;osx-64&#x27;</span></span></span><br><span class="line">conda activate py27</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/67380286/anaconda-channel-for-installing-python-2-7">https://stackoverflow.com/questions/67380286/anaconda-channel-for-installing-python-2-7</a></li><li><a href="https://www.cnblogs.com/suanec/p/15684862.html">https://www.cnblogs.com/suanec/p/15684862.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;个别前端项目有使用 node-sass 依赖&lt;/p&gt;
&lt;p&gt;最开始尝试使用 node 16，但是发现无法编译 node-sass&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS Apple Silicon 源码构建 node14</title>
    <link href="https://eric-gitta-moore.github.io/2024/macos-apple-silicon-source-code-builds-node14/"/>
    <id>https://eric-gitta-moore.github.io/2024/macos-apple-silicon-source-code-builds-node14/</id>
    <published>2024-06-07T08:30:00.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有时项目很多依赖比较老，安装时候需要现场构建，对 node 版本比较敏感。</p><p>虽然可以通过 <code>arch -x86_64 nvm install 14</code> 来安装 x86 架构的 node 版本，但是性能肯定是需要打折扣的（主要是看着不舒服٩(•̤̀ᵕ•̤́๑)ᵒᵏᵎᵎᵎᵎ）</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><blockquote><p>直接用 <code>nvm install -s 14</code> 可以源码安装但是会有 cpp 的报错，<br>究其具体原因大概是因为 arm 和 x86 enum 枚举的长度限制不一导致的<br>这个需要我们用参数忽略掉 <code>-Wno-enum-constexpr-conversion</code><br>但是 nvm 并没有给我们提供修改的能力。所以我们本次直接拉 git source code 构建</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cpp 构建环境自行安装这里不再赘述，不过应该以前就有意无意中安装过，可以在下面执行的时候碰到了报错再说</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/nodejs/node.git</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> node</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">git checkout v14.21.3</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mkdir</span> ~/.nvm/versions/node/v14.21.3</span></span><br></pre></td></tr></table></figure><p>然后需要修改一下文件 <code>vim common.gypi</code> ，大概是这个位置 <a href="https://github.com/nodejs/node/blob/v14.21.3/common.gypi#L498">https://github.com/nodejs/node/blob/v14.21.3/common.gypi#L498</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">      [&#x27;OS==&quot;mac&quot;&#x27;, &#123;</span><br><span class="line">        &#x27;defines&#x27;: [&#x27;_DARWIN_USE_64_BIT_INODE=1&#x27;],</span><br><span class="line">        &#x27;xcode_settings&#x27;: &#123;</span><br><span class="line">          &#x27;ALWAYS_SEARCH_USER_PATHS&#x27;: &#x27;NO&#x27;,</span><br><span class="line">          &#x27;GCC_CW_ASM_SYNTAX&#x27;: &#x27;NO&#x27;,                # No -fasm-blocks</span><br><span class="line">          &#x27;GCC_DYNAMIC_NO_PIC&#x27;: &#x27;NO&#x27;,               # No -mdynamic-no-pic</span><br><span class="line">                                                    # (Equivalent to -fPIC)</span><br><span class="line">          &#x27;GCC_ENABLE_CPP_EXCEPTIONS&#x27;: &#x27;NO&#x27;,        # -fno-exceptions</span><br><span class="line">          &#x27;GCC_ENABLE_CPP_RTTI&#x27;: &#x27;NO&#x27;,              # -fno-rtti</span><br><span class="line">          &#x27;GCC_ENABLE_PASCAL_STRINGS&#x27;: &#x27;NO&#x27;,        # No -mpascal-strings</span><br><span class="line">          &#x27;PREBINDING&#x27;: &#x27;NO&#x27;,                       # No -Wl,-prebind</span><br><span class="line">          &#x27;MACOSX_DEPLOYMENT_TARGET&#x27;: &#x27;10.13&#x27;,      # -mmacosx-version-min=10.13</span><br><span class="line">          &#x27;USE_HEADERMAP&#x27;: &#x27;NO&#x27;,</span><br><span class="line">          &#x27;OTHER_CFLAGS&#x27;: [</span><br><span class="line">            &#x27;-fno-strict-aliasing&#x27;,</span><br><span class="line">          ],</span><br><span class="line">          &#x27;WARNING_CFLAGS&#x27;: [</span><br><span class="line">            &#x27;-Wall&#x27;,</span><br><span class="line">            &#x27;-Wendif-labels&#x27;,</span><br><span class="line">            &#x27;-W&#x27;,</span><br><span class="line">            &#x27;-Wno-unused-parameter&#x27;,</span><br><span class="line"><span class="addition">+            &#x27;-Wno-enum-constexpr-conversion&#x27;,</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>然后继续 make &amp; install 就 ok</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">./configure --prefix=`realpth ~/.nvm/versions/node/v14.21.3`</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make -j `sysctl hw.logicalcpu`</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">nvm use 14</span></span><br></pre></td></tr></table></figure><p>最后检查一下版本和架构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ file `which node`</span><br><span class="line">/Users/admin/.nvm/versions/node/v14.21.3/bin/node: Mach-O 64-bit executable arm64</span><br></pre></td></tr></table></figure><p>coding !</p><p>现在电脑也不卡了，人也精神了 😅😅</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/nodejs/node/issues/52230#issuecomment-2024353730">https://github.com/nodejs/node/issues/52230#issuecomment-2024353730</a></li><li><a href="https://github.com/nvm-sh/nvm/issues/2218#issuecomment-902697494">https://github.com/nvm-sh/nvm/issues/2218#issuecomment-902697494</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;有时项目很多依赖比较老，安装时候需要现场构建，对 node 版本比较敏感。&lt;/p&gt;
&lt;p&gt;虽然可以通过 &lt;code&gt;arch -x86_64</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>自构建 node 运行 npm 提示 Cannot find module &#39;../lib/utils/unsupported.js&#39;</title>
    <link href="https://eric-gitta-moore.github.io/2024/self-build-node-run-npm-prompt-cannot-find-module-lib-utils-unsupported-js/"/>
    <id>https://eric-gitta-moore.github.io/2024/self-build-node-run-npm-prompt-cannot-find-module-lib-utils-unsupported-js/</id>
    <published>2024-06-07T07:47:42.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 macOS 上自行构建的 arm 版本 node 14，并 copy 到 ~&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v14.999.999 中</p><h2 id="故障现场"><a href="#故障现场" class="headerlink" title="故障现场"></a>故障现场</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">❯ npm i -g yarn</span><br><span class="line">internal/modules/cjs/loader.js:934</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;../lib/utils/unsupported.js&#x27;</span><br><span class="line">Require stack:</span><br><span class="line">- /Users/admin/.nvm/versions/node/v14.999.999/bin/npm</span><br><span class="line">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:931:15)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:774:27)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:1003:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:107:18)</span><br><span class="line">    at /Users/admin/.nvm/versions/node/v14.999.999/bin/npm:19:21</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/admin/.nvm/versions/node/v14.999.999/bin/npm:155:3)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1114:14)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1143:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:979:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:819:12) &#123;</span><br><span class="line">  code: &#x27;MODULE_NOT_FOUND&#x27;,</span><br><span class="line">  requireStack: [ &#x27;/Users/admin/.nvm/versions/node/v14.999.999/bin/npm&#x27; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>重新指定 <code>./configure --prefix=</code> 到 <code>~/.nvm/versions/node/v14.999.999</code> 目录，再 <code>make install</code> 即可</p><h2 id="故障原因"><a href="#故障原因" class="headerlink" title="故障原因"></a>故障原因</h2><p>copy 到 .nvm 目录的过程中丢失了软连接，导致 node 寻找依赖的逻辑不符合预期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[~/.nvm/versions/node/v14.999.999/bin]❯ l</span><br><span class="line">total 136352</span><br><span class="line">drwxr-xr-x  8 admin  staff   256B Jun  5 15:24 .</span><br><span class="line">drwxr-xr-x  6 admin  staff   192B Jun  5 15:25 ..</span><br><span class="line">-rwxr-xr-x  1 admin  staff   600K Jun  5 15:24 corepack</span><br><span class="line">-rwxr-xr-x  1 admin  staff    66M Jun  5 15:24 node</span><br><span class="line">-rwxr-xr-x  1 admin  staff   4.6K Jun  5 15:24 npm</span><br><span class="line">-rwxr-xr-x  1 admin  staff   177B Jun  5 15:24 npx</span><br><span class="line">-rwxr-xr-x  1 admin  staff   8.1K Jun  5 15:24 tnpm</span><br><span class="line">-rwxr-xr-x  1 admin  staff   309B Jun  5 15:24 tnpx</span><br></pre></td></tr></table></figure><p>这个目录正确的应该如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[~/workspace/prebuild-node/v14.21.3/bin]❯ l</span><br><span class="line">total 135096</span><br><span class="line">drwxr-xr-x  8 admin  staff   256B Jun  5 11:23 .</span><br><span class="line">drwxr-xr-x  6 admin  staff   192B Jun  5 11:01 ..</span><br><span class="line">lrwxr-xr-x  1 admin  staff    45B Jun  5 11:01 corepack -&gt; ../lib/node_modules/corepack/dist/corepack.js</span><br><span class="line">-rwxr-xr-x  1 admin  staff    66M Jun  5 11:01 node</span><br><span class="line">lrwxr-xr-x  1 admin  staff    38B Jun  5 11:01 npm -&gt; ../lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line">lrwxr-xr-x  1 admin  staff    38B Jun  5 11:01 npx -&gt; ../lib/node_modules/npm/bin/npx-cli.js</span><br><span class="line">lrwxr-xr-x  1 admin  staff    36B Jun  5 11:23 tnpm -&gt; ../lib/node_modules/tnpm/bin/tnpm.js</span><br><span class="line">lrwxr-xr-x  1 admin  staff    36B Jun  5 11:23 tnpx -&gt; ../lib/node_modules/tnpm/bin/tnpx.js</span><br></pre></td></tr></table></figure><p>node 是通过 realpath 真实路径寻找依赖的，而不是软链接的路径</p><!-- 例如：以 npm 这个命令为例子（版本 v14.21.3） --><p>具体报错代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> #!<span class="regexp">/usr/</span>bin/env node</span><br><span class="line"> <span class="number">2</span> ;(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// wrapper in case we&#x27;re in module_context mode</span></span><br><span class="line"> <span class="number">3</span>   <span class="comment">// windows: running &quot;npm blah&quot; in this folder will invoke WSH, not node.</span></span><br><span class="line"> <span class="number">4</span>   <span class="comment">/* global WScript */</span></span><br><span class="line"> <span class="number">5</span>   <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WScript</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line"> <span class="number">6</span>     <span class="title class_">WScript</span>.<span class="title function_">echo</span>(</span><br><span class="line"> <span class="number">7</span>       <span class="string">&#x27;npm does not work when run\n&#x27;</span> +</span><br><span class="line"> <span class="number">8</span>         <span class="string">&#x27;with the Windows Scripting Host\n\n&#x27;</span> +</span><br><span class="line"> <span class="number">9</span>         <span class="string">&quot;&#x27;cd&#x27; to a different directory,\n&quot;</span> +</span><br><span class="line"><span class="number">10</span>         <span class="string">&quot;or type &#x27;npm.cmd &lt;args&gt;&#x27;,\n&quot;</span> +</span><br><span class="line"><span class="number">11</span>         <span class="string">&quot;or type &#x27;node npm &lt;args&gt;&#x27;.&quot;</span></span><br><span class="line"><span class="number">12</span>     )</span><br><span class="line"><span class="number">13</span>     <span class="title class_">WScript</span>.<span class="title function_">quit</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">14</span>     <span class="keyword">return</span></span><br><span class="line"><span class="number">15</span>   &#125;</span><br><span class="line"><span class="number">16</span> </span><br><span class="line"><span class="number">17</span>   process.<span class="property">title</span> = <span class="string">&#x27;npm&#x27;</span></span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>   <span class="keyword">var</span> unsupported = <span class="built_in">require</span>(<span class="string">&#x27;../lib/utils/unsupported.js&#x27;</span>)  <span class="comment">// &lt;&lt;--------------</span></span><br><span class="line"><span class="number">20</span>   unsupported.<span class="title function_">checkForBrokenNode</span>()</span><br></pre></td></tr></table></figure><h2 id="依赖查找原理"><a href="#依赖查找原理" class="headerlink" title="依赖查找原理"></a>依赖查找原理</h2><p>下面以寻找某个依赖 <code>yargs</code> 为例说明</p><p>文件结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[~/.nvm/versions/node/v14.999.999]❯ tree -L 5</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── corepack</span><br><span class="line">│   ├── node</span><br><span class="line">│   ├── npm</span><br><span class="line">│   ├── npx</span><br><span class="line">├── include</span><br><span class="line">│   └── node</span><br><span class="line">├── lib</span><br><span class="line">│   ├── dtrace</span><br><span class="line">│   └── node_modules</span><br><span class="line">│       ├── corepack</span><br><span class="line">│       ├── npm</span><br><span class="line">│       │   ├── AUTHORS</span><br><span class="line">│       │   ├── CHANGELOG.md</span><br><span class="line">│       │   ├── CONTRIBUTING.md</span><br><span class="line">│       │   ├── LICENSE</span><br><span class="line">│       │   ├── Makefile</span><br><span class="line">│       │   ├── README.md</span><br><span class="line">│       │   ├── bin</span><br><span class="line">│       │   ├── changelogs</span><br><span class="line">│       │   ├── configure</span><br><span class="line">│       │   ├── docs</span><br><span class="line">│       │   ├── lib</span><br><span class="line">│       │   ├── make.bat</span><br><span class="line">│       │   ├── man</span><br><span class="line">│       │   ├── node_modules</span><br><span class="line">│       │   │   ├── xtend</span><br><span class="line">│       │   │   ├── y18n</span><br><span class="line">│       │   │   ├── yallist</span><br><span class="line">│       │   │   ├── yargs # &lt;&lt;&lt;---------- 这里是需要找到的目标</span><br><span class="line">│       │   │   └── yargs-parser</span><br><span class="line">│       │   ├── package.json</span><br><span class="line">│       │   ├── scripts</span><br><span class="line">│       │   └── tap-snapshots</span><br><span class="line">└── share</span><br><span class="line">    ├── doc</span><br><span class="line">    ├── man</span><br><span class="line">    └── systemtap</span><br></pre></td></tr></table></figure><p>查找步骤：</p><ol><li><p>寻找依赖 <code>../lib/utils/unsupported.js</code></p></li><li><p>寻找依赖 <code>yargs</code></p></li><li><p>确定文件当前执行文件路径 <code>/User/admin/.nvm/versions/node/v14.999.999/bin/npm</code></p></li><li><p>确定真实路径 <code>realpath /User/admin/.nvm/versions/node/v14.999.999/bin/npm</code>（这里是 shell 命令）</p></li><li><p>迭代寻找 <code>node_modules</code></p></li></ol><ul><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999/bin/npm)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999/bin)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li><strong>报错</strong>：<code>Error: Cannot find module &#39;../lib/utils/unsupported.js&#39;</code></li></ul><hr><p>所以说这个软链接是罪魁祸首</p><p>如果有软链接的话，目录结构如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[~/.nvm/versions/node/v14.999.999]❯ tree -L 5</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── corepack -&gt; ../lib/node_modules/corepack/dist/corepack.js</span><br><span class="line">│   ├── node</span><br><span class="line">│   ├── npm -&gt; ../lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line">│   ├── npx -&gt; ../lib/node_modules/npm/bin/npx-cli.js</span><br><span class="line">├── include</span><br><span class="line">│   └── node</span><br><span class="line">├── lib</span><br><span class="line">│   ├── dtrace</span><br><span class="line">│   └── node_modules</span><br><span class="line">│       ├── corepack</span><br><span class="line">│       ├── npm</span><br><span class="line">│       │   ├── AUTHORS</span><br><span class="line">│       │   ├── CHANGELOG.md</span><br><span class="line">│       │   ├── CONTRIBUTING.md</span><br><span class="line">│       │   ├── LICENSE</span><br><span class="line">│       │   ├── Makefile</span><br><span class="line">│       │   ├── README.md</span><br><span class="line">│       │   ├── bin</span><br><span class="line">│       │   ├── changelogs</span><br><span class="line">│       │   ├── configure</span><br><span class="line">│       │   ├── docs</span><br><span class="line">│       │   ├── lib</span><br><span class="line">│       │   ├── make.bat</span><br><span class="line">│       │   ├── man</span><br><span class="line">│       │   ├── node_modules</span><br><span class="line">│       │   │   ├── xtend</span><br><span class="line">│       │   │   ├── y18n</span><br><span class="line">│       │   │   ├── yallist</span><br><span class="line">│       │   │   ├── yargs # &lt;&lt;&lt;---------- 这里是需要找到的目标</span><br><span class="line">│       │   │   └── yargs-parser</span><br><span class="line">│       │   ├── package.json</span><br><span class="line">│       │   ├── scripts</span><br><span class="line">│       │   └── tap-snapshots</span><br><span class="line">└── share</span><br><span class="line">    ├── doc</span><br><span class="line">    ├── man</span><br><span class="line">    └── systemtap</span><br></pre></td></tr></table></figure><p>查找步骤：</p><ol><li>寻找依赖 <code>yargs</code></li><li>确定文件当前执行文件路径 <code>/User/admin/.nvm/versions/node/v14.999.999/bin/npm</code></li><li>确定真实路径 <code>realpath /User/admin/.nvm/versions/node/v14.999.999/bin/npm</code>（这里是 shell 命令）</li></ol><ul><li>得到真实路径 <code>/User/admin/.nvm/versions/node/v14.999.999/lib/node_modules/npm/bin/npm-cli.js</code></li></ul><ol start="4"><li>迭代寻找 <code>node_modules</code></li></ol><ul><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999/lib/node_modules/npm/bin/npm-cli.js)/node_modules</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999/lib/node_modules/npm/bin)/node_modules</code>（这里是 shell 命令）<ul><li><strong>找到了</strong>：<code>/User/admin/.nvm/versions/node/v14.999.999/lib/node_modules/npm/node_modules</code></li><li>继续找 <code>yargs</code> 包：<code>/User/admin/.nvm/versions/node/v14.999.999/lib/node_modules/npm/node_modules/yargs/package.json</code></li><li>**这里就已经 ok 了，后续是 node 执行的其他流程</li></ul></li></ul><h2 id="回顾问题"><a href="#回顾问题" class="headerlink" title="回顾问题"></a>回顾问题</h2><p>其实这里出问题的只是 <code>require(&#39;../lib/utils/unsupported.js&#39;)</code> 是一个相对路径的文件，查找会比上面更加简单一些</p><p>查找步骤：</p><ol><li>寻找依赖 <code>../lib/utils/unsupported.js</code></li><li>确定文件当前执行文件路径 <code>/User/admin/.nvm/versions/node/v14.999.999/bin/npm</code></li><li>确定真实路径 <code>realpath /User/admin/.nvm/versions/node/v14.999.999/bin/npm</code>（这里是 shell 命令）</li><li>迭代寻找 <code>../lib/utils/unsupported.js</code></li></ol><ul><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999/bin/npm)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999/bin)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node/v14.999.999)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions/node)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm/versions)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin/.nvm)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li>执行 <code>$(dirname /User/admin)/../lib/utils/unsupported.js</code>（这里是 shell 命令）<ul><li>没找到</li></ul></li><li><strong>报错</strong>：<code>Error: Cannot find module &#39;../lib/utils/unsupported.js&#39;</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一句话，依赖查找用的是真实路径。</p><p>这也是为什么有时候调试项目的依赖的源码时候会莫名其妙报错，或者出现两个 react 版本的问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 macOS 上自行构建的 arm 版本 node 14，并 copy 到 ~&amp;#x2F;.nvm&amp;#x2F;versions&amp;#x2F;</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>ipa 签名工具</title>
    <link href="https://eric-gitta-moore.github.io/2024/ipa-sign/"/>
    <id>https://eric-gitta-moore.github.io/2024/ipa-sign/</id>
    <published>2024-05-07T02:32:16.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<ul><li>爱思助手</li><li>Sideloadly</li><li>AltStore</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;爱思助手&lt;/li&gt;
&lt;li&gt;Sideloadly&lt;/li&gt;
&lt;li&gt;AltStore&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS hosts 文件的锁定保护及修改</title>
    <link href="https://eric-gitta-moore.github.io/2024/lock-protection-and-modification-of-mac-os-hosts-files/"/>
    <id>https://eric-gitta-moore.github.io/2024/lock-protection-and-modification-of-mac-os-hosts-files/</id>
    <published>2024-04-09T13:56:17.000Z</published>
    <updated>2024-11-06T15:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="锁死hosts文件"><a href="#锁死hosts文件" class="headerlink" title="锁死hosts文件"></a>锁死hosts文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chflags uchg /etc/hosts</span><br><span class="line">sudo chflags schg /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="解锁hosts文件"><a href="#解锁hosts文件" class="headerlink" title="解锁hosts文件"></a>解锁hosts文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chflags -hv noschg /etc/hosts</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;锁死hosts文件&quot;&gt;&lt;a href=&quot;#锁死hosts文件&quot; class=&quot;headerlink&quot; title=&quot;锁死hosts文件&quot;&gt;&lt;/a&gt;锁死hosts文件&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>10 行实现简单 Promise</title>
    <link href="https://eric-gitta-moore.github.io/2024/10-lines-implement-a-simple-promise/"/>
    <id>https://eric-gitta-moore.github.io/2024/10-lines-implement-a-simple-promise/</id>
    <published>2024-02-05T13:37:20.000Z</published>
    <updated>2024-11-06T15:42:38.016Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">cb</span>?.(value)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">cb</span> = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> thenCb = <span class="title function_">onFulfilled</span>(val)</span><br><span class="line">            thenCb <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? thenCb.<span class="title function_">then</span>(resolve) : <span class="title function_">resolve</span>(thenCb)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>testCase:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title class_">MyPromise</span></span><br><span class="line"><span class="keyword">const</span> testCase = [</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">                &#125;, <span class="number">1000</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title function_">promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">                &#125;, <span class="number">150</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// testCase[0]()</span></span><br><span class="line">testCase[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP &amp; phpenv</title>
    <link href="https://eric-gitta-moore.github.io/2023/php-phpenv/"/>
    <id>https://eric-gitta-moore.github.io/2023/php-phpenv/</id>
    <published>2023-12-03T06:32:34.000Z</published>
    <updated>2024-11-06T15:42:38.016Z</updated>
    
    <content type="html"><![CDATA[<p>PHP &amp; phpenv</p><p>Reference:</p><ul><li><a href="https://github.com/phpbrew/phpbrew/blob/master/README.cn.md">https://github.com/phpbrew/phpbrew/blob/master/README.cn.md</a></li><li><a href="https://blog.csdn.net/Annlix/article/details/119759752">https://blog.csdn.net/Annlix/article/details/119759752</a></li><li><a href="https://github.com/phpbrew/phpbrew/wiki/Variant-Dependencies">https://github.com/phpbrew/phpbrew/wiki/Variant-Dependencies</a></li><li><a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">phpenv Requirement</span></span><br><span class="line">sudo apt-get install \</span><br><span class="line">  build-essential \</span><br><span class="line">  libbz2-dev \</span><br><span class="line">  libreadline-dev \</span><br><span class="line">  libsqlite3-dev \</span><br><span class="line">  libcurl4-gnutls-dev \</span><br><span class="line">  libzip-dev \</span><br><span class="line">  libssl-dev \</span><br><span class="line">  libxml2-dev \</span><br><span class="line">  libxslt-dev \</span><br><span class="line">  libonig-dev \</span><br><span class="line">  php7.4-cli \</span><br><span class="line">  php7.4-bz2 \</span><br><span class="line">  php7.4-xml \</span><br><span class="line">  pkg-config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install phpenv</span></span><br><span class="line">curl -L -O https://github.com/phpbrew/phpbrew/releases/latest/download/phpbrew.phar</span><br><span class="line">chmod +x phpbrew.phar</span><br><span class="line">sudo mv phpbrew.phar /usr/local/bin/phpbrew</span><br><span class="line">phpbrew init</span><br><span class="line">echo &quot;[[ -e ~/.phpbrew/bashrc ]] &amp;&amp; source ~/.phpbrew/bashrc&quot; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.phpbrew/bashrc</span><br><span class="line"></span><br><span class="line">phpbrew update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Requirement <span class="keyword">for</span> phpbrew everything variant，reference：https://blog.csdn.net/Annlix/article/details/119759752</span></span><br><span class="line">sudo apt install libsystemd-dev libacl1-dev libapparmor-dev valgrind libdmalloc-dev systemtap-sdt-dev krb5-multidev libkrb5-dev libssl-dev libsqlite3-dev libbz2-dev libcurl4-openssl-dev libenchant-2-dev libgmp-dev libc-client2007e-dev libldap2-dev libsasl2-dev libonig-dev unixodbc-dev libpspell-dev libedit-dev libsnmp-dev libsodium-dev libargon2-dev libtidy-dev libzip-dev libwebp-dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gd</span></span><br><span class="line">sudo apt-get install libjpeg8-dev libpng-dev libfreetype6-dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pgsql</span></span><br><span class="line">sudo apt install libpq-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build php</span></span><br><span class="line">phpbrew install -j $(nproc) 7.3 +default +dbs +mb +fpm +gd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">phpbrew switch 7.3.xx</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">composer</span></span><br><span class="line">php -r &quot;copy(&#x27;https://getcomposer.org/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line">php -r &quot;if (hash_file(&#x27;sha384&#x27;, &#x27;composer-setup.php&#x27;) === &#x27;e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02&#x27;) &#123; echo &#x27;Installer verified&#x27;; &#125; else &#123; echo &#x27;Installer corrupt&#x27;; unlink(&#x27;composer-setup.php&#x27;); &#125; echo PHP_EOL;&quot;</span><br><span class="line">php composer-setup.php</span><br><span class="line">php -r &quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line"></span><br><span class="line">sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP &amp;amp; phpenv&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/phpbrew/phpbrew/blob/master/README.cn.md&quot;&gt;https://github.com/</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>浪潮M2220主板加NVME BIOS</title>
    <link href="https://eric-gitta-moore.github.io/2023/inspur-m2220-motherboard-with-nvme-bios/"/>
    <id>https://eric-gitta-moore.github.io/2023/inspur-m2220-motherboard-with-nvme-bios/</id>
    <published>2023-12-02T04:27:11.000Z</published>
    <updated>2024-11-06T15:42:38.012Z</updated>
    
    <content type="html"><![CDATA[<p>浪潮M2220主板加NVME BIOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── 111.mp4</span><br><span class="line">├── 222.mp4</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── 刷机前先看视频.txt</span><br><span class="line">├── 微信图片_20230910154327.jpg</span><br><span class="line">├── 微信图片_20230910154335.jpg</span><br><span class="line">├── 微信图片_20230910154341.jpg</span><br><span class="line">├── 微信图片_20231014083224.jpg</span><br><span class="line">├── 微信图片_20231014083235.jpg</span><br><span class="line">├── 浪潮NF5270M3 主板BIOS 原版提取无修改</span><br><span class="line">│   └── AmericanMegatrendsInc.-2.1.11.rom</span><br><span class="line">├── 浪潮nf5270m3带nvme</span><br><span class="line">│   ├── 1.rom</span><br><span class="line">│   ├── AFUWINGUIx64.EXE</span><br><span class="line">│   ├── AFUWINx64.EXE</span><br><span class="line">│   ├── AMI_Aptio_AFU_User_Guide_NDA.pdf</span><br><span class="line">│   ├── amifldrv64.sys</span><br><span class="line">│   ├── readme.txt</span><br><span class="line">│   └── win.bat</span><br><span class="line">└── 浪潮nf5270m3带nvme.7z</span><br><span class="line"></span><br><span class="line">2 directories, 19 files</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/eric-gitta-moore/eric-gitta-moore.github.io/main/static/images/17014912290411701491228172.png" alt="17014912290411701491228172.png"></p><p><img src="https://raw.githubusercontent.com/eric-gitta-moore/eric-gitta-moore.github.io/main/static/images/17014912430411701491242486.png" alt="17014912430411701491242486.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浪潮M2220主板加NVME BIOS&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>mac font pingfang download</title>
    <link href="https://eric-gitta-moore.github.io/2023/mac-font-pingfang/"/>
    <id>https://eric-gitta-moore.github.io/2023/mac-font-pingfang/</id>
    <published>2023-12-02T04:19:11.000Z</published>
    <updated>2024-11-06T15:42:38.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>19.0d4e2 版本的苹方可以直接被 Windows 识别，估计是华康在导出文件的时候忘了设置什么东西。</p><p>出处：<a href="https://blog.dsrkafuu.net/post/2020/extract-sf-pingfang/">https://blog.dsrkafuu.net/post/2020/extract-sf-pingfang/</a></p></blockquote><p>我用lanzou备份一份</p><p><a href="https://yunling.lanzout.com/iiKti144mgra">https://yunling.lanzout.com/iiKti144mgra</a></p><p>release 也发了一份</p><p><a href="https://github.com/eric-gitta-moore/macOS-font/releases/download/font/PingFang.19.0d4e2.ttc">https://github.com/eric-gitta-moore/macOS-font/releases/download/font/PingFang.19.0d4e2.ttc</a></p><p>sha1: A3104073F3CC498BB5D7F38DB91926F9DA9CA437</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;19.0d4e2 版本的苹方可以直接被 Windows 识别，估计是华康在导出文件的时候忘了设置什么东西。&lt;/p&gt;
&lt;p&gt;出处：&lt;a href=&quot;https://blog.dsrkafuu.net/post/2020/extract-sf-ping</summary>
      
    
    
    
    <category term="默认" scheme="https://eric-gitta-moore.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
</feed>
