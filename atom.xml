<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Curtis</title>
  
  <subtitle>just life</subtitle>
  <link href="https://james-curtis.github.io/atom.xml" rel="self"/>
  
  <link href="https://james-curtis.github.io/"/>
  <updated>2023-09-01T02:52:04.556Z</updated>
  <id>https://james-curtis.github.io/</id>
  
  <author>
    <name>James Curtis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 WSL2 中使用 NVIDIA Docker 进行全栈开发和深度学习 TensorFlow pytorch GPU 加速</title>
    <link href="https://james-curtis.github.io/2023/08/31/%E5%9C%A8%20WSL2%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20NVIDIA%20Docker%20%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20TensorFlow%20pytorch%20GPU%20%E5%8A%A0%E9%80%9F/"/>
    <id>https://james-curtis.github.io/2023/08/31/%E5%9C%A8%20WSL2%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20NVIDIA%20Docker%20%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20TensorFlow%20pytorch%20GPU%20%E5%8A%A0%E9%80%9F/</id>
    <published>2023-08-31T03:13:32.000Z</published>
    <updated>2023-09-01T02:52:04.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><h3 id="0-1-起源"><a href="#0-1-起源" class="headerlink" title="0.1 起源"></a>0.1 起源</h3><ul><li>生产环境都是在 k8d pod 中运行，直接在容器中开发不好嘛？</li><li>每次换电脑，都要配配配，呸呸呸</li><li>新电脑只安装日常用的软件不好嘛，环境变量配配配，各种日常软件和开发软件到处拉💩</li><li>虚拟机呗，怎么调用 GPU 是个问题，hyper-v 好像是可以魔改配置实现，又得改改改。改好了本地能跑了，生产给你报错报错错错错</li><li>到处拉💩，文件弄乱了怎么办，容器直接销毁重建就完事，分分钟解决。电脑重装再配环境也遭不住</li></ul><h3 id="0-2-容器化开发之后"><a href="#0-2-容器化开发之后" class="headerlink" title="0.2. 容器化开发之后"></a>0.2. 容器化开发之后</h3><ul><li>宿主机电脑随便换，随便重装。重装之后我只要 <code>上网</code> + <code>wsl --install</code> + <code>get docker</code> + <code>docker compose up -d</code> 就完事了</li><li>换 macOS？没事，<code>docker compsoe up -d</code></li><li>换 Windows？没事，<code>docker compose up -d</code></li><li>没电脑？没事，搞台远程机子 <code>ssh</code> +  <code>docker compose up -d</code></li><li>电脑炸了？没事，所有 git 修改都在远端有一份。开发环境换台机子 <code>docker compose up -d</code> 继续</li></ul><h3 id="0-3-不足"><a href="#0-3-不足" class="headerlink" title="0.3 不足"></a>0.3 不足</h3><ul><li>如果是做 k8s 开发的，估计不行，起本地集群建议用 vagrant。本质上一个容器根本无法解决这个问题</li><li>如果没有机器不支持 <code>systemd</code> 没法搞，比如公司只给提供开发容器环境（只能操作给你的容器），这个情况下目前正在解决，使用 ansible 重写 Dockerfile 里面的脚本，摆脱容器限制。主要区别就是环境安装过程在本地还是在远端</li></ul><h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1. 前置条件"></a>1. 前置条件</h2><h3 id="1-1-安装系统"><a href="#1-1-安装系统" class="headerlink" title="1.1. 安装系统"></a>1.1. 安装系统</h3><p>Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11</p><p><strong>跳过</strong></p><h3 id="1-2-处理好网络环境"><a href="#1-2-处理好网络环境" class="headerlink" title="1.2. 处理好网络环境"></a>1.2. 处理好网络环境</h3><p>安装过程中需要访问国际网络，自行处理好。建议开启 tun 模式</p><h2 id="2-准备-WSL"><a href="#2-准备-WSL" class="headerlink" title="2. 准备 WSL"></a>2. 准备 WSL</h2><h3 id="2-1-安装-WSL"><a href="#2-1-安装-WSL" class="headerlink" title="2.1. 安装 WSL"></a>2.1. 安装 WSL</h3><p>在管理员模式下打开 PowerShell 或 Windows 命令提示符</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>安装完成，重启电脑</p><h3 id="2-2-首次打开-WSL"><a href="#2-2-首次打开-WSL" class="headerlink" title="2.2. 首次打开 WSL"></a>2.2. 首次打开 WSL</h3><p>重启完成后，打开 powershell，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><p>此时应该会提示为 Linux 发行版创建“用户名”和“密码”</p><blockquote><p>如果这里提示没有安装 Linux 发行版，那么这里可以再次执行 <code>wsl --install</code>，会自动安装 Ubuntu 22.04 LTS</p></blockquote><h3 id="2-3-设置-root-密码"><a href="#2-3-设置-root-密码" class="headerlink" title="2.3. 设置 root 密码"></a>2.3. 设置 root 密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h3 id="2-4-换源"><a href="#2-4-换源" class="headerlink" title="2.4. 换源"></a>2.4. 换源</h3><p>切换到 root 用户，执行下面命令换源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&#x27;EOF&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirror.nju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># # deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirror.nju.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># # deb-src https://mirror.nju.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><blockquote><p>出处：南京大学镜像站 -&gt; <a href="https://mirror.nju.edu.cn/mirrorz-help/ubuntu/?mirror=NJU">https://mirror.nju.edu.cn/mirrorz-help/ubuntu/?mirror=NJU</a></p></blockquote><h3 id="2-5-（可选）迁移-WSL-磁盘目录"><a href="#2-5-（可选）迁移-WSL-磁盘目录" class="headerlink" title="2.5.（可选）迁移 WSL 磁盘目录"></a>2.5.（可选）迁移 WSL 磁盘目录</h3><p>这里以迁移到 <code>D:\hyper-v\ubu1\ubu1.vhdx</code> 为例</p><h3 id="2-6-设置默认用户"><a href="#2-6-设置默认用户" class="headerlink" title="2.6. 设置默认用户"></a>2.6. 设置默认用户</h3><p>把 <code>你的用户名</code> 替换成你设置的用户名，然后在 WSL 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;[user]\ndefault=你的用户名&quot;</span> &gt;&gt; /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>比如我的用户名是 <code>linux</code>，那么我执行的命令就是 <code>sudo echo &quot;[user]\ndefault=linux&quot; &gt;&gt; /etc/wsl.conf</code></p><h3 id="2-7-导出磁盘镜像"><a href="#2-7-导出磁盘镜像" class="headerlink" title="2.7. 导出磁盘镜像"></a>2.7. 导出磁盘镜像</h3><p>在 Windows poweshell 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu d:\hyper-v\ubu1\ubu1.vhdx --vhd</span><br></pre></td></tr></table></figure><h3 id="2-8-删除原系统"><a href="#2-8-删除原系统" class="headerlink" title="2.8. 删除原系统"></a>2.8. 删除原系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h3 id="2-9-导入新系统"><a href="#2-9-导入新系统" class="headerlink" title="2.9. 导入新系统"></a>2.9. 导入新系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import-in-place ubu1 d:\hyper-v\ubu1\ubu1.vhdx</span><br></pre></td></tr></table></figure><h2 id="3-配置-NVIDIA-Docker"><a href="#3-配置-NVIDIA-Docker" class="headerlink" title="3. 配置 NVIDIA Docker"></a>3. 配置 NVIDIA Docker</h2><h3 id="3-1-安装-Docker"><a href="#3-1-安装-Docker" class="headerlink" title="3.1. 安装 Docker"></a>3.1. 安装 Docker</h3><blockquote><p>参考：docker 官网 和 南京大学镜像 -&gt; <a href="https://mirror.nju.edu.cn/mirrorz-help/docker-ce/?mirror=NJU">https://mirror.nju.edu.cn/mirrorz-help/docker-ce/?mirror=NJU</a></p></blockquote><p>在 powershell 中输入 <code>wsl</code>，进入 WSL 中，执行</p><p>首先安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br></pre></td></tr></table></figure><p>信任 Docker 的 GPG 公钥并添加仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirror.nju.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>最后安装 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="3-2-配置普通用户直接使用-Docker-命令"><a href="#3-2-配置普通用户直接使用-Docker-命令" class="headerlink" title="3.2. 配置普通用户直接使用 Docker 命令"></a>3.2. 配置普通用户直接使用 Docker 命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="3-3-安装-NVIDIA-支持"><a href="#3-3-安装-NVIDIA-支持" class="headerlink" title="3.3 安装 NVIDIA 支持"></a>3.3 安装 NVIDIA 支持</h3><blockquote><p>参考：微软 WSL 官方文档：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute">https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute</a></p></blockquote><p>通过运行以下命令为 NVIDIA 容器工具包设置稳定存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> $ID<span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-docker-keyring.gpg</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | sed <span class="string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-docker-keyring.gpg] https://#g&#x27;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-docker.list</span><br></pre></td></tr></table></figure><p>安装 NVIDIA 运行时包和依赖项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br></pre></td></tr></table></figure><h3 id="3-4-Docker-换源"><a href="#3-4-Docker-换源" class="headerlink" title="3.4 Docker 换源"></a>3.4 Docker 换源</h3><blockquote><p>参考：南京大学镜像</p></blockquote><p>修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>正常走到这一步应该是这样的</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934842593104adf16cae3f4c17cb676b650e7ab189a.png" alt="16934842593104adf16cae3f4c17cb676b650e7ab189a.png"></p><br/><p>添加一行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">,</span><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://docker.nju.edu.cn/&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348443613133713cbe8c88e63ec50c28abeb2a443e.png" alt="169348443613133713cbe8c88e63ec50c28abeb2a443e.png"></p><br/><p>按下 <code>ctrl+o</code> 再按下 <code>回车</code> 保存文件</p><p>再按下 <code>ctrl+x</code> 退出编辑器</p><p>检查一下结果，<code>cat /etc/docker/daemon.json</code></p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484492129119f80574646149e30461fa3f60246fc.png" alt="1693484492129119f80574646149e30461fa3f60246fc.png"></p><br/><p>重启 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="4-拉取-运行-Docker-镜像"><a href="#4-拉取-运行-Docker-镜像" class="headerlink" title="4. 拉取 &amp; 运行 Docker 镜像"></a>4. 拉取 &amp; 运行 Docker 镜像</h2><blockquote><p>这个全栈开发镜像是我自己构建的<br>Dockfile 在 GitHub 仓库这里 <a href="https://github.com/james-curtis/code-os-debian">https://github.com/james-curtis/code-os-debian</a><br>包含了</p><ul><li>zsh</li><li>ohmyzsh</li><li>powerlevel10k</li><li>中文语言包，gui 下微软雅黑字体支持</li><li>nodejs、nvm</li><li>openssh</li><li>c++</li><li>wslg 透传到 Windows 母机支持</li><li>Python、conda、pdm<br> temurin 8、11、17 jdk，jenv<br> docker cli<br> TensorFlow<br> pytorch<br> cuda 11.8、cudatoolkit</li></ul></blockquote><h3 id="4-1-拉取镜像"><a href="#4-1-拉取镜像" class="headerlink" title="4.1. 拉取镜像"></a>4.1. 拉取镜像</h3><p>由于镜像较大，建议单独拉取</p><ul><li>GPU 支持镜像（9.94 GB）：<code>jamescurtisfoxmail/code-os:latest-gpu</code></li><li>仅 CPU 支持镜像（2.77 GB）：<code>jamescurtisfoxmail/code-os:latest</code></li></ul><p>这里以 GPU 支持镜像为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jamescurtisfoxmail/code-os:latest-gpu</span><br></pre></td></tr></table></figure><h3 id="4-2-下载-compose-配置"><a href="#4-2-下载-compose-配置" class="headerlink" title="4.2. 下载 compose 配置"></a>4.2. 下载 compose 配置</h3><p>下载 Docker compose 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/james-curtis/code-os-debian.git</span><br></pre></td></tr></table></figure><h3 id="4-3-启动-Docker-compose"><a href="#4-3-启动-Docker-compose" class="headerlink" title="4.3. 启动 Docker compose"></a>4.3. 启动 Docker compose</h3><p>启动 docker compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code-os-debian/docker/wsl/</span><br><span class="line">bash run-gpu.sh</span><br></pre></td></tr></table></figure><p>可以看到已经启动成功了<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484526128a07ecfed1340e7d02b919f23da9378c3.png" alt="1693484526128a07ecfed1340e7d02b919f23da9378c3.png"></p><h2 id="5-检验成果"><a href="#5-检验成果" class="headerlink" title="5. 检验成果"></a>5. 检验成果</h2><p>先进入 Docker 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .gpu-envrc</span><br><span class="line">docker compose <span class="built_in">exec</span> os zsh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484539128fb39edd4cc37214c59b3cfd33a419119.png" alt="1693484539128fb39edd4cc37214c59b3cfd33a419119.png"></p><blockquote><p>如果字体乱码，应该是没有配置 powerlevel10k 的 <code>MesloLGS NF</code> 字体支持。</p><p>我使用的终端是 <code>tabby</code> 全平台支持    </p><p> <img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348454912865a864d5c148fa2d05c1ef3a0f4cd041.png" alt="169348454912865a864d5c148fa2d05c1ef3a0f4cd041.png"><br> 在项目中有这几个字体，复制到 <code>c:\windows\fonts</code> 中即可<br> <img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484558129f5fa68a6adf756a7251eddb9cf098e08.png" alt="1693484558129f5fa68a6adf756a7251eddb9cf098e08.png"></p></blockquote><h3 id="5-1-检测-wslg-支持"><a href="#5-1-检测-wslg-支持" class="headerlink" title="5.1. 检测 wslg 支持"></a>5.1. 检测 wslg 支持</h3><p><code>xeyes</code> 会显示一个跟随鼠标的小眼睛</p><p><code>xclock</code> 是显示一个时钟</p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934845681289dc2fb94f291f99e9c92fb8286d1299e.png" alt="16934845681289dc2fb94f291f99e9c92fb8286d1299e.png"></p><h3 id="5-2-检测-NVIDIA-支持"><a href="#5-2-检测-NVIDIA-支持" class="headerlink" title="5.2. 检测 NVIDIA 支持"></a>5.2. 检测 NVIDIA 支持</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934845861283b76e4afea48293b2be2659a6259389e.png" alt="16934845861283b76e4afea48293b2be2659a6259389e.png"><br>我这里显示出了母机的 3060，说明 Docker 已经检测到这张显卡</p><h3 id="5-3-检测-TensorFlow支持"><a href="#5-3-检测-TensorFlow支持" class="headerlink" title="5.3. 检测 TensorFlow支持"></a>5.3. 检测 TensorFlow支持</h3><h4 id="5-3-1-TensorFlow-CPU"><a href="#5-3-1-TensorFlow-CPU" class="headerlink" title="5.3.1 TensorFlow CPU"></a>5.3.1 TensorFlow CPU</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484594155ce96a3ea90d8dd75ead62cb469ca6561.png" alt="1693484594155ce96a3ea90d8dd75ead62cb469ca6561.png"></p><p>打印出了张量</p><h4 id="5-3-2-TensorFlow-GPU"><a href="#5-3-2-TensorFlow-GPU" class="headerlink" title="5.3.2 TensorFlow GPU"></a>5.3.2 TensorFlow GPU</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import tensorflow as tf; print(tf.config.list_physical_devices(&#x27;GPU&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484602126dce0e8a22b6a116b0332392835e9010e.png" alt="1693484602126dce0e8a22b6a116b0332392835e9010e.png"></p><p>可以看到 TensorFlow 也检测到了显卡</p><h4 id="5-3-3-安装-kaggle-cli"><a href="#5-3-3-安装-kaggle-cli" class="headerlink" title="5.3.3 安装 kaggle cli"></a>5.3.3 安装 kaggle cli</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kaggle</span><br></pre></td></tr></table></figure><p>登录 kaggle 下载登录凭据，下载到 <code>~/.kaggle/kaggle.json</code></p><blockquote><p>官方教程 <a href="https://github.com/Kaggle/kaggle-api#api-credentials">https://github.com/Kaggle/kaggle-api#api-credentials</a></p></blockquote><p>设置权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 ~/.kaggle/kaggle.json</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484611126002ed3169310ad3a2442ea36491ac828.png" alt="1693484611126002ed3169310ad3a2442ea36491ac828.png"></p><h4 id="5-3-4-检测-TensorFlow-GPU-负载支持"><a href="#5-3-4-检测-TensorFlow-GPU-负载支持" class="headerlink" title="5.3.4 检测 TensorFlow GPU 负载支持"></a>5.3.4 检测 TensorFlow GPU 负载支持</h4><p>这里我们使用 kaggle cli 下载比赛中别人提交的代码进行测试，<a href="https://www.kaggle.com/code/hassanamin/tensorflow-mnist-gpu-tutorial">https://www.kaggle.com/code/hassanamin/tensorflow-mnist-gpu-tutorial</a></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846191270cd4adf205ebd8790e2b4bde76166a2b.png" alt="16934846191270cd4adf205ebd8790e2b4bde76166a2b.png"><br>复制下载命令</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484626126a7990a1e7044a3bb5a2054ec07eb7c8a.png" alt="1693484626126a7990a1e7044a3bb5a2054ec07eb7c8a.png"></p><p><strong>启动 openssh-server</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>输入密码 <code>linux</code> </p><blockquote><p>默认用户和密码都是 <code>linux</code></p><p><code>root</code> 用户名也是 <code>linux</code></p></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846331264737dece647d08f3fd827674cb12bd7b.png" alt="16934846331264737dece647d08f3fd827674cb12bd7b.png"></p><p><strong>打开 vscode 进行远程连接</strong><br>需要先下载远程开发插件 <code>ms-vscode-remote.vscode-remote-extensionpack</code></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846411276154d21eb0a904f597d3fcb891ce5345.png" alt="16934846411276154d21eb0a904f597d3fcb891ce5345.png"></p><p>点击左下角的蓝标，会弹出命令列表，选择 <code>Connect to host</code></p><br/><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484662126f34f5829cb9c8ae47ed3eba65b933212.png" alt="1693484662126f34f5829cb9c8ae47ed3eba65b933212.png"></p><br/><p>直接连接 <code>localhost</code> 即可</p><br/><blockquote><p>为什么可以直接通过 <code>localhost</code> 连接有两个原因</p><ol><li>微软支持宿主机直接访问 WSL 的监听端口</li><li>docker compose 中设置的 <code>network</code> 类型是 <code>host</code>，也就是和 WSL 公用一个网络</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484685126844afa00df2604630c9f9dc7df47533a.png" alt="1693484685126844afa00df2604630c9f9dc7df47533a.png"></p><p>点击右侧的 <code>Connect</code> </p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934846901241578876302c28e81b0e1922330432b6f.png" alt="16934846901241578876302c28e81b0e1922330432b6f.png"><br>会提示选择平台和输入密码</p><p>完成之后即可进行远程开发</p><p><strong>进入刚刚 kaggle 的项目</strong></p><p>这里由于的刚刚我下载的目录是 <code>/tmp/kaggle/tf</code> 所以这里我需要打开这个目录</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484697124b68c65ea075ddb3ca0f4bae8f94dfaa2.png" alt="1693484697124b68c65ea075ddb3ca0f4bae8f94dfaa2.png"><br><strong>安装插件</strong><br>需要安装的插件有</p><ul><li>donjayamanne.python-extension-pack</li><li>donjayamanne.python-extension-pack</li></ul><p>安装完成之后需要加载窗口</p><p><strong>选择运行环境</strong><br>选择 conda Python3.9 作为运行环境<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847051258ce5bc169a1945be5f4a05805a73f026.png" alt="16934847051258ce5bc169a1945be5f4a05805a73f026.png"><br>逐个单元格运行试试效果</p><p>可以看到检测到 GPU 了<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484713124268cedbf858fe22cf23a9d8a0a0b15c6.png" alt="1693484713124268cedbf858fe22cf23a9d8a0a0b15c6.png"><br>可以看到成功调用宿主机显卡<br><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847201250b779cecd0e73850fd2689ddf9d169cc.png" alt="16934847201250b779cecd0e73850fd2689ddf9d169cc.png"><br>不过似乎没有使得显卡满载</p><h3 id="5-4-检测-pytorch-cuda-支持"><a href="#5-4-检测-pytorch-cuda-支持" class="headerlink" title="5.4. 检测 pytorch cuda 支持"></a>5.4. 检测 pytorch cuda 支持</h3><p>在 WSL 中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import torch;print(torch.cuda.is_available());&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348472712535ea23e934d88048e2c6c8dab35c3aea.png" alt="169348472712535ea23e934d88048e2c6c8dab35c3aea.png"></p><blockquote><p>这里我还没有换 vscode 的终端字体，所以乱码了，忽略即可</p></blockquote><h4 id="5-4-1-检测-pytorch-GPU-负载支持"><a href="#5-4-1-检测-pytorch-GPU-负载支持" class="headerlink" title="5.4.1 检测 pytorch GPU 负载支持"></a>5.4.1 检测 pytorch GPU 负载支持</h4><p>对于 pytorch，这里使用 <a href="https://www.kaggle.com/code/lyhue1991/pytorch-gpu-examples%EF%BC%8C%E4%BD%9C%E4%B8%BA%E6%B5%8B%E8%AF%95">https://www.kaggle.com/code/lyhue1991/pytorch-gpu-examples，作为测试</a> demo</p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484734124b153e92b893a5c208c7eb054b3154899.png" alt="1693484734124b153e92b893a5c208c7eb054b3154899.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484743125e0d3a43375a635fe2a488d29b8a0c0ea.png" alt="1693484743125e0d3a43375a635fe2a488d29b8a0c0ea.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348475112489327abd58292ac9fc75036ecd4b132e.png" alt="169348475112489327abd58292ac9fc75036ecd4b132e.png"></p><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348476212373dcb403f84c118c1e16e48e6bf352ad.png" alt="169348476212373dcb403f84c118c1e16e48e6bf352ad.png"><br>可以看到成功调度 GPU</p><h3 id="6-检查-nodejs"><a href="#6-检查-nodejs" class="headerlink" title="6. 检查 nodejs"></a>6. 检查 nodejs</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/16934847731247a5f0ca36fe146f3fa6985adb40d9a4c.png" alt="16934847731247a5f0ca36fe146f3fa6985adb40d9a4c.png"></p><h3 id="7-检查-java"><a href="#7-检查-java" class="headerlink" title="7. 检查 java"></a>7. 检查 java</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line">jenv versions</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/1693484779123aaba208a8173522f6b82e93ac2a64cb9.png" alt="1693484779123aaba208a8173522f6b82e93ac2a64cb9.png"></p><h3 id="8-检查-c"><a href="#8-检查-c" class="headerlink" title="8. 检查 c++"></a>8. 检查 c++</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -v</span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/james-curtis/blog-img/img/img/169348478612341eb734dbd75537dc43fba98abb4c225.png" alt="169348478612341eb734dbd75537dc43fba98abb4c225.png"></p><h3 id="9-容器卷"><a href="#9-容器卷" class="headerlink" title="9. 容器卷"></a>9. 容器卷</h3><p>在 Dockerfile 中有写到</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =========== 配置 容器卷 =============</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [ <span class="string">&quot;/mnt/workspace&quot;</span>, <span class="string">&quot;/mnt/data&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>这两个目录都是持久化的，也就是 docker 容器销毁之后，只有这两个目录下的文件不会清理（重启不影响）</p><p>其中 <code>/mnt/workspace</code> 是映射到 WSL 中的，IO 性能比较差</p><p><code>/mnt/data</code> 是没有映射的容器卷，IO 性能较好，建议项目都放到该目录下</p><p>至于 <code>/home/linux</code> 用户目录下的文件可以自己创建并映射容器卷</p><h2 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6. 参考文档"></a>6. 参考文档</h2><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></li><li><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0. 背景&quot;&gt;&lt;/a&gt;0. 背景&lt;/h2&gt;&lt;h3 id=&quot;0-1-起源&quot;&gt;&lt;a href=&quot;#0-1-起源&quot; class=&quot;headerlink&quot; title=&quot;0.1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://james-curtis.github.io/2023/08/30/hello-world/"/>
    <id>https://james-curtis.github.io/2023/08/30/hello-world/</id>
    <published>2023-08-30T10:52:47.000Z</published>
    <updated>2023-09-01T02:52:04.552Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
